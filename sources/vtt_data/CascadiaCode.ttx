<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.0">


  <TSI0>
    <!-- This table will be calculated by the compiler -->
  </TSI0>

  <TSI1>

    <glyphProgram name=".notdef">
/* TT glyph 0, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 4, 106
CALL[], 1, 2, 114
CALL[], 1, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="A">
/* TT glyph 1, char 0x41 (A) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 4
CALL[], 1, 2, 114
SRP1[], 0
IP[], 6
MDAP[R], 6
CALL[], 6, 9, 106
SRP1[], 4
SRP2[], 1
IP[], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="AE">
/* TT glyph 24, char 0xc6 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 12
CALL[], 12, 9, 106
CALL[], 1, 2, 114
CALL[], 1, 4, 106
IP[], 16
SRP2[], 0
IP[], 5
IP[], 14
MDAP[R], 5
MDAP[R], 14
CALL[], 5, 8, 106
CALL[], 14, 17, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="AEacute">
/* VTTTalk Unicode 0x1fc */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 24, 0, 0
OFFSET[R], 1528, 40, 0
SVTCA[Y]
CALL[], 20, 1, 1, 1, 160, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Aacute">
/* VTTTalk Unicode 0xc1 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Abreve">
/* VTTTalk Unicode 0x102 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1532, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 150, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Acircumflex">
/* VTTTalk Unicode 0xc2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Adieresis">
/* VTTTalk Unicode 0xc4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="Agrave">
/* VTTTalk Unicode 0xc0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Alpha">
/* VTTTalk Unicode 0x391 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0

    </glyphProgram>

    <glyphProgram name="Alphatonos">
/* TT glyph 558, char 0x386 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 4
CALL[], 9, 2, 114
CALL[], 9, 11, 106
SHP[1], 2
SRP1[], 4
SRP2[], 2
IP[], 12
SRP1[], 9
SRP2[], 0
IP[], 13
MDAP[R], 13
CALL[], 13, 6, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Amacron">
/* VTTTalk Unicode 0x100 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1535, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Aogonek">
/* TT glyph 20, char 0x104 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 20
SRP1[], 20
SHP[1], 3
CALL[], 20, 9, 105
CALL[], 9, 14, 106
CALL[], 1, 2, 114
SRP1[], 0
IP[], 22
CALL[], 22, 25, 106
SRP1[], 20
SRP2[], 1
IP[], 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Aring">
/* VTTTalk Unicode 0xc5 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1533, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 68, 86
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="Aringacute">
/* VTTTalk Unicode 0x1fa */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1528, 0, 240
USEMYMETRICS[]
OFFSET[R], 21, 0, 0
SVTCA[Y]
CALL[], 0, 22, 0, 0, -80, 86
SHC[2], 0


    </glyphProgram>

    <glyphProgram name="Atilde">
/* VTTTalk Unicode 0xc3 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1534, 10, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 146, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="B">
/* TT glyph 26, char 0x42 (B) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 27, 106
CALL[], 1, 2, 114
CALL[], 1, 17, 106
SRP2[], 0
IP[], 18
MDAP[R], 18
CALL[], 18, 26, 106
IP[], 9
IP[], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Beta">
/* VTTTalk Unicode 0x392 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 26, 0, 0


    </glyphProgram>

    <glyphProgram name="C">
/* TT glyph 27, char 0x43 (C) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 17, 106
CALL[], 5, 3, 114
SHP[2], 8
CALL[], 5, 12, 106
SHP[2], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="CR">
/* TT glyph 1551, char 0xd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="Cacute">
/* VTTTalk Unicode 0x106 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 27, 0, 0
OFFSET[R], 1528, 105, 0
SVTCA[Y]
CALL[], 22, 5, 1, 1, 140, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Cacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 27, 0, 0
OFFSET[R], 1540, 105, 0
SVTCA[Y]
CALL[], 22, 5, 1, 1, 100, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ccaron">
/* VTTTalk Unicode 0x10c */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 27, 0, 0
OFFSET[R], 1531, 105, 0
SVTCA[Y]
CALL[], 22, 5, 1, 1, 140, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Ccedilla">
/* VTTTalk Unicode 0xc7 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 27, 0, 0
OFFSET[R], 1510, 0, 0
SVTCA[Y]
CALL[], 28, 0, 0, 0, 69, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Ccircumflex">
/* VTTTalk Unicode 0x108 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 27, 0, 0
OFFSET[R], 1530, 105, 0
SVTCA[Y]
CALL[], 26, 5, 1, 1, 140, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Cdotaccent">
/* VTTTalk Unicode 0x10a */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 27, 0, 0
OFFSET[R], 1526, 105, 0
SVTCA[Y]
CALL[], 22, 5, 1, 1, 140, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Chi">
/* VTTTalk Unicode 0x3a7 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 167, 0, 0

    </glyphProgram>

    <glyphProgram name="D">
/* TT glyph 33, char 0x44 (D) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 8, 106
CALL[], 0, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Dcaron">
/* VTTTalk Unicode 0x10e */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 33, 0, 0
OFFSET[R], 1531, -50, 0
SVTCA[Y]
CALL[], 14, 1, 1, 1, 160, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Dcroat">
/* VTTTalk Unicode 0x110 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 34, 0, 0


    </glyphProgram>

    <glyphProgram name="E">
/* TT glyph 37, char 0x45 (E) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 9, 106
CALL[], 1, 2, 114
CALL[], 1, 4, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Eacute">
/* VTTTalk Unicode 0xc9 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1528, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ebreve">
/* VTTTalk Unicode 0x114 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1532, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 150, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ecaron">
/* VTTTalk Unicode 0x11a */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1531, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ecircumflex">
/* VTTTalk Unicode 0xca */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1530, 30, 0
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Edieresis">
/* VTTTalk Unicode 0xcb */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1525, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Edotaccent">
/* VTTTalk Unicode 0x116 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1526, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Egrave">
/* VTTTalk Unicode 0xc8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1527, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Emacron">
/* VTTTalk Unicode 0x112 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1535, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Eng">
/* TT glyph 93, char 0x14a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 17
CALL[], 17, 12, 105
CALL[], 12, 11, 106
CALL[], 2, 2, 114
SHP[2], 6
SRP2[], 17
IP[], 3
IP[], 19
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Eogonek">
/* TT glyph 53, char 0x118 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 9, 106
SHP[1], 11
SRP1[], 11
SHP[1], 27
CALL[], 11, 16, 105
CALL[], 16, 21, 106
CALL[], 1, 2, 114
CALL[], 1, 4, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Epsilon">
/* VTTTalk Unicode 0x395 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0


    </glyphProgram>

    <glyphProgram name="Epsilontonos">
/* TT glyph 559, char 0x388 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 9, 106
CALL[], 13, 2, 114
CALL[], 13, 15, 106
SHP[1], 1
CALL[], 1, 4, 106
SRP1[], 13
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Eta">
/* VTTTalk Unicode 0x397 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 62, 0, 0


    </glyphProgram>

    <glyphProgram name="Etatonos">
/* TT glyph 560, char 0x389 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 8
CALL[], 13, 2, 114
CALL[], 13, 15, 106
SHP[1], 2
SRP1[], 2
SHP[1], 6
SRP1[], 13
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 10, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Eth">
/* TT glyph 34, char 0xd0 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 13, 106
CALL[], 5, 2, 114
CALL[], 5, 19, 106
SRP2[], 0
IP[], 20
MDAP[R], 20
SHP[1], 3
CALL[], 20, 12, 106
SHP[2], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Euro">
/* TT glyph 777, char 0x20ac */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 12, 3, 114
SHP[2], 15
CALL[], 12, 19, 106
SHP[2], 16
CALL[], 39, 9, 114
CALL[], 39, 34, 106
SRP2[], 12
IP[], 41
IP[], 9
MDAP[R], 41
MDAP[R], 9
SRP2[], 41
IP[], 1
IP[], 7
SHP[2], 31
SRP1[], 1
SHP[1], 30
SRP1[], 7
SHP[1], 24
SRP1[], 9
SHP[1], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="F">
/* TT glyph 55, char 0x46 (F) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 4, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="G">
/* TT glyph 56, char 0x47 (G) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 17, 106
CALL[], 5, 3, 114
SHP[2], 8
CALL[], 5, 12, 106
SHP[2], 9
SRP2[], 0
IP[], 23
MDAP[R], 23
CALL[], 23, 22, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Gamma">
/* VTTTalk Unicode 0x393 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 389, 0, 0

    </glyphProgram>

    <glyphProgram name="Gbreve">
/* VTTTalk Unicode 0x11e */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 56, 0, 0
OFFSET[R], 1532, 95, 0
SVTCA[Y]
CALL[], 28, 5, 1, 1, 130, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Gcaron">
/* VTTTalk Unicode 0x1e6 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 56, 0, 0
OFFSET[R], 1531, 95, 0
SVTCA[Y]
CALL[], 28, 5, 1, 1, 140, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Gcircumflex">
/* VTTTalk Unicode 0x11c */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 56, 0, 0
OFFSET[R], 1530, 95, 0
SVTCA[Y]
CALL[], 32, 5, 1, 1, 140, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Gdotaccent">
/* VTTTalk Unicode 0x120 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 56, 0, 0
OFFSET[R], 1526, 95, 0
SVTCA[Y]
CALL[], 28, 5, 1, 1, 140, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="H">
/* TT glyph 62, char 0x48 (H) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 8
CALL[], 1, 2, 114
SHP[2], 6
SRP1[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 10, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Hbar">
/* TT glyph 63, char 0x126 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 16
CALL[], 5, 2, 114
SHP[2], 10
SRP1[], 0
IP[], 20
MDAP[R], 20
CALL[], 20, 18, 106
CALL[], 20, 23, 105
SHP[2], 2
SHP[2], 14
CALL[], 23, 7, 106
SHP[2], 3
SHP[2], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Hcircumflex">
/* VTTTalk Unicode 0x124 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 62, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 16, 5, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="I">
/* TT glyph 65, char 0x49 (I) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 5, 2, 114
CALL[], 5, 4, 106
SHP[2], 8
CALL[], 0, 1, 106
SHP[2], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="IJ">
/* TT glyph 66, char 0x132 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 5, 106
CALL[], 11, 2, 114
SHP[2], 20
SRP2[], 0
IP[], 2
MDAP[R], 2
CALL[], 2, 14, 105
CALL[], 14, 15, 106
SHP[2], 23
CALL[], 11, 8, 106
SHP[2], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Iacute">
/* VTTTalk Unicode 0xcd */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Iacute_J.loclNLD">
/* VTTTalk Unicode 0xffff */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 66, 0, 0
OFFSET[R], 1528, -300, 0
OFFSET[R], 1528, 320, 0
SVTCA[Y]
CALL[], 26, 19, 1, 1, 160, 86
SHC[2], 2
CALL[], 30, 10, 1, 1, 160, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="Ibreve">
/* VTTTalk Unicode 0x12c */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1532, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 150, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Icircumflex">
/* VTTTalk Unicode 0xce */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 16, 5, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Idieresis">
/* VTTTalk Unicode 0xcf */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Idotaccent">
/* VTTTalk Unicode 0x130 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1526, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Igrave">
/* VTTTalk Unicode 0xcc */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Imacron">
/* VTTTalk Unicode 0x12a */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1535, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Iogonek">
/* TT glyph 76, char 0x12e */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 5, 2, 114
CALL[], 5, 4, 106
SHP[2], 8
CALL[], 12, 8, 114
SHP[2], 0
SHP[2], 28
CALL[], 12, 9, 106
SHP[2], 1
CALL[], 12, 17, 105
CALL[], 17, 22, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Iota">
/* VTTTalk Unicode 0x399 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0


    </glyphProgram>

    <glyphProgram name="Iotadieresis">
/* VTTTalk Unicode 0x3aa */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 542, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Iotatonos">
/* TT glyph 561, char 0x38a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 1, 106
SHP[2], 9
CALL[], 13, 2, 114
CALL[], 13, 15, 106
SHP[1], 5
CALL[], 5, 4, 106
SHP[2], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Itilde">
/* VTTTalk Unicode 0x128 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1534, 10, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 146, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="J">
/* TT glyph 78, char 0x4a (J) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 7, 106
CALL[], 14, 2, 114
CALL[], 14, 11, 106
SRP2[], 0
IP[], 4
MDAP[R], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Jcircumflex">
/* VTTTalk Unicode 0x134 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0
OFFSET[R], 1530, 180, 0
SVTCA[Y]
CALL[], 22, 13, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="K">
/* TT glyph 80, char 0x4b (K) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 14
CALL[], 1, 2, 114
SHP[2], 9
SRP2[], 0
IP[], 3
CALL[], 3, 18, 106
IP[], 15
IP[], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Kappa">
/* VTTTalk Unicode 0x39a */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 80, 0, 0


    </glyphProgram>

    <glyphProgram name="L">
/* TT glyph 82, char 0x4c (L) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 0, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="LIG">
/* TT glyph 1546, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="Lacute">
/* VTTTalk Unicode 0x139 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 82, 0, 0
OFFSET[R], 1528, -340, 0
SVTCA[Y]
CALL[], 6, 1, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Lambda">
/* VTTTalk Unicode 0x39b */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 450, 0, 0

    </glyphProgram>

    <glyphProgram name="Lcaron">
/* TT glyph 84, char 0x13d */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 8, 114
CALL[], 4, 7, 106
CALL[], 5, 2, 114
SRP2[], 4
IP[], 0
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Ldot">
/* VTTTalk Unicode 0x13f */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 82, 0, 0
OFFSET[R], 673, 150, 370
SVTCA[Y]
CALL[], 12, 1, 2, 0, -192, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Lslash">
/* TT glyph 87, char 0x141 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 11, 106
CALL[], 5, 2, 114
SRP2[], 0
IP[], 3
CALL[], 3, 2, 106
SHP[2], 9
SHP[1], 8
SRP1[], 8
SLOOP[], 4
IP[], 1, 10, 4, 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="M">
/* TT glyph 88, char 0x4d (M) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 8
CALL[], 2, 2, 114
SHP[2], 6
SRP2[], 0
IP[], 4
CALL[], 4, 11, 106
CALL[], 4, 13, 105
SHP[2], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Mu">
/* VTTTalk Unicode 0x39c */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 88, 0, 0


    </glyphProgram>

    <glyphProgram name="N">
/* TT glyph 89, char 0x4e (N) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 8
CALL[], 2, 2, 114
SHP[2], 6
SRP2[], 8
IP[], 3
IP[], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Nacute">
/* VTTTalk Unicode 0x143 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 89, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Nacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 89, 0, 0
OFFSET[R], 1540, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 120, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ncaron">
/* VTTTalk Unicode 0x147 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 89, 0, 0
OFFSET[R], 1531, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ntilde">
/* VTTTalk Unicode 0xd1 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 89, 0, 0
OFFSET[R], 1534, 10, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 146, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Nu">
/* VTTTalk Unicode 0x39d */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 89, 0, 0


    </glyphProgram>

    <glyphProgram name="O">
/* TT glyph 96, char 0x4f (O) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 4, 3, 114
CALL[], 4, 12, 106
CALL[], 0, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="OE">
/* TT glyph 121, char 0x152 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 23, 106
CALL[], 6, 3, 114
CALL[], 6, 28, 106
CALL[], 9, 2, 114
CALL[], 9, 12, 106
SHP[2], 26
CALL[], 20, 8, 114
SRP1[], 9
IP[], 13
MDAP[R], 13
CALL[], 13, 16, 106
CALL[], 20, 17, 106
SHP[2], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Oacute">
/* VTTTalk Unicode 0xd3 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 140, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Oacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1540, 0, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 100, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Obreve">
/* VTTTalk Unicode 0x14e */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1532, 0, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 130, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="Ocircumflex">
/* VTTTalk Unicode 0xd4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 20, 4, 1, 1, 140, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Odieresis">
/* VTTTalk Unicode 0xd6 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 140, 86
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="Ograve">
/* VTTTalk Unicode 0xd2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 140, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Ohorn">
/* VTTTalk Unicode 0x1a0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1537, 400, 0
SVTCA[Y]
CALL[], 20, 4, 0, 0, 213, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Ohungarumlaut">
/* VTTTalk Unicode 0x150 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1529, 0, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 140, 86
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="Omacron">
/* VTTTalk Unicode 0x14c */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1535, 0, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 140, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Omegatonos">
/* TT glyph 564, char 0x38f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 14
CALL[], 0, 1, 106
SHP[2], 3
SRP1[], 3
SHP[1], 11
SHP[2], 24
SRP1[], 24
SHP[1], 16
SRP1[], 16
SHP[1], 13
CALL[], 7, 3, 114
CALL[], 7, 20, 106
CALL[], 27, 2, 114
CALL[], 27, 29, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Omicron">
/* VTTTalk Unicode 0x39f */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0


    </glyphProgram>

    <glyphProgram name="Omicrontonos">
/* TT glyph 562, char 0x38c */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 12, 106
CALL[], 4, 3, 114
CALL[], 4, 16, 106
CALL[], 9, 2, 114
CALL[], 9, 11, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Oslash">
/* TT glyph 118, char 0xd8 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 3, 114
CALL[], 6, 23, 106
SMD[], 96
SRP0[], 6
MDRP[m&gt;RWh], 9
SHP[2], 10
CALL[], 15, 9, 114
CALL[], 15, 25, 106
SRP0[], 15
MDRP[m&gt;RWh], 0
SHP[2], 1
SRP2[], 6
SLOOP[], 8
IP[], 17, 2, 30, 20, 29, 21, 11, 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Oslashacute">
/* VTTTalk Unicode 0x1fe */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 118, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 32, 6, 1, 1, 140, 86
SHC[2], 3



    </glyphProgram>

    <glyphProgram name="Otilde">
/* VTTTalk Unicode 0xd5 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1534, 10, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 126, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="P">
/* TT glyph 122, char 0x50 (P) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 12, 106
SRP2[], 0
IP[], 13
MDAP[R], 13
CALL[], 13, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Phi">
/* VTTTalk Unicode 0x3a6 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 413, 0, 0

    </glyphProgram>

    <glyphProgram name="Pi">
/* VTTTalk Unicode 0x3a0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 407, 0, 0

    </glyphProgram>

    <glyphProgram name="Psi">
/* TT glyph 556, char 0x3a8 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 4, 2, 114
SRP1[], 0
IP[], 1
SRP1[], 1
SHP[1], 18
CALL[], 1, 8, 106
SHP[2], 11
SRP1[], 4
SHP[1], 10
SRP1[], 10
SHP[1], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Q">
/* TT glyph 124, char 0x51 (Q) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 3, 9, 114
SHP[2], 11
CALL[], 3, 17, 106
CALL[], 3, 14, 105
CALL[], 14, 0, 106
CALL[], 7, 3, 114
CALL[], 7, 21, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="R">
/* TT glyph 125, char 0x52 (R) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 10
CALL[], 1, 2, 114
CALL[], 1, 17, 106
SRP2[], 0
IP[], 18
MDAP[R], 18
CALL[], 18, 14, 106
IP[], 11
IP[], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Racute">
/* VTTTalk Unicode 0x154 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 125, 0, 0
OFFSET[R], 1528, -40, 0
SVTCA[Y]
CALL[], 25, 1, 1, 1, 160, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Rcaron">
/* VTTTalk Unicode 0x158 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 125, 0, 0
OFFSET[R], 1531, -40, 0
SVTCA[Y]
CALL[], 25, 1, 1, 1, 160, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Rho">
/* VTTTalk Unicode 0x3a1 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 122, 0, 0

    </glyphProgram>

    <glyphProgram name="S">
/* TT glyph 129, char 0x53 (S) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 6, 106
CALL[], 17, 3, 114
SHP[2], 20
SRP2[], 0
SLOOP[], 8
IP[], 8, 34, 10, 11, 31, 30, 14, 27
CALL[], 17, 24, 106
SHP[2], 21
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Sacute">
/* VTTTalk Unicode 0x15a */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 129, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 36, 17, 1, 1, 140, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Sacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 129, 0, 0
OFFSET[R], 1540, 0, 0
SVTCA[Y]
CALL[], 36, 17, 1, 1, 100, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Scaron">
/* VTTTalk Unicode 0x160 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 129, 0, 0
OFFSET[R], 1531, 0, 0
SVTCA[Y]
CALL[], 36, 17, 1, 1, 140, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Scedilla">
/* VTTTalk Unicode 0x15e */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 129, 0, 0
OFFSET[R], 1510, -65, 0
SVTCA[Y]
CALL[], 42, 0, 0, 0, 69, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Scircumflex">
/* VTTTalk Unicode 0x15c */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 129, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 40, 17, 1, 1, 140, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Sigma">
/* TT glyph 551, char 0x3a3 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 9, 106
SHP[2], 1
CALL[], 4, 2, 114
SRP2[], 0
IP[], 8
IP[], 2
CALL[], 4, 7, 106
SHP[2], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="T">
/* TT glyph 137, char 0x54 (T) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 3, 2, 114
CALL[], 3, 2, 106
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Tau">
/* VTTTalk Unicode 0x3a4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 137, 0, 0

    </glyphProgram>

    <glyphProgram name="Tbar">
/* TT glyph 138, char 0x166 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 7, 2, 114
SRP2[], 0
IP[], 3
MDAP[R], 3
SHP[1], 11
CALL[], 3, 2, 106
SHP[2], 14
CALL[], 7, 6, 106
SHP[2], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Tcaron">
/* VTTTalk Unicode 0x164 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 137, 0, 0
OFFSET[R], 1531, 0, 0
SVTCA[Y]
CALL[], 8, 3, 1, 1, 160, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Theta">
/* TT glyph 541, char 0x398 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 13, 106
CALL[], 4, 3, 114
CALL[], 4, 8, 106
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 16, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Thorn">
/* TT glyph 123, char 0xde */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SRP1[], 0
IP[], 3
IP[], 15
MDAP[R], 3
MDAP[R], 15
CALL[], 3, 14, 106
CALL[], 15, 11, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="U">
/* TT glyph 142, char 0x55 (U) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
MIAP[R], 0, 9
CALL[], 0, 8, 106
MIAP[R], 4, 2
SHP[1], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Uacute">
/* VTTTalk Unicode 0xda */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 16, 3, 1, 1, 160, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Ubreve">
/* VTTTalk Unicode 0x16c */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1532, 0, 0
SVTCA[Y]
CALL[], 16, 11, 1, 1, 150, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Ucircumflex">
/* VTTTalk Unicode 0xdb */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 20, 11, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Udieresis">
/* VTTTalk Unicode 0xdc */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 16, 11, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Ugrave">
/* VTTTalk Unicode 0xd9 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 16, 3, 1, 1, 160, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Uhorn">
/* TT glyph 150, char 0x1af */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 8, 106
CALL[], 3, 2, 114
SHP[2], 11
CALL[], 11, 14, 105
CALL[], 11, 17, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Uhungarumlaut">
/* VTTTalk Unicode 0x170 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1529, 0, 0
SVTCA[Y]
CALL[], 16, 11, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="Umacron">
/* VTTTalk Unicode 0x16a */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1535, 0, 0
SVTCA[Y]
CALL[], 16, 3, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Uogonek">
/* TT glyph 158, char 0x172 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 9, 114
CALL[], 6, 14, 106
SHP[1], 21
CALL[], 6, 28, 105
CALL[], 28, 0, 106
CALL[], 9, 2, 114
SHP[2], 17
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Upsilon">
/* VTTTalk Unicode 0x3a5 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0

    </glyphProgram>

    <glyphProgram name="Upsilondieresis">
/* VTTTalk Unicode 0x3ab */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 553, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 10, 6, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Upsilontonos">
/* TT glyph 563, char 0x38e */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 11, 2, 114
CALL[], 11, 13, 106
SHP[1], 3
SRP1[], 3
SHP[1], 7
SRP2[], 0
SLOOP[], 3
IP[], 8, 1, 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Uring">
/* VTTTalk Unicode 0x16e */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1533, 0, 0
SVTCA[Y]
CALL[], 16, 11, 1, 1, 68, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Utilde">
/* VTTTalk Unicode 0x168 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1534, 10, 0
SVTCA[Y]
CALL[], 16, 3, 1, 1, 146, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="V">
/* TT glyph 161, char 0x56 (V) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SHP[2], 6
SRP2[], 0
IP[], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="W">
/* TT glyph 162, char 0x57 (W) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 12
CALL[], 1, 2, 114
SHP[2], 10
MIAP[R], 5, 6
SRP2[], 12
SLOOP[], 3
IP[], 4, 7, 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Wacute">
/* VTTTalk Unicode 0x1e82 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="Wcircumflex">
/* VTTTalk Unicode 0x174 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 20, 9, 1, 1, 160, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="Wdieresis">
/* VTTTalk Unicode 0x1e84 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 16, 9, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="Wgrave">
/* VTTTalk Unicode 0x1e80 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 162, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 16, 9, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="X">
/* TT glyph 167, char 0x58 (X) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 9
CALL[], 2, 2, 114
SHP[2], 6
SRP2[], 9
SLOOP[], 4
IP[], 10, 7, 1, 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Xi">
/* TT glyph 547, char 0x39e */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
CALL[], 1, 0, 106
CALL[], 8, 8, 114
CALL[], 8, 9, 106
SRP2[], 1
IP[], 5
MDAP[R], 5
CALL[], 5, 4, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Y">
/* TT glyph 168, char 0x59 (Y) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 2, 2, 114
SHP[2], 7
CALL[], 9, 8, 114
SRP1[], 2
SLOOP[], 3
IP[], 1, 8, 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="Yacute">
/* VTTTalk Unicode 0xdd */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 10, 2, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Ycircumflex">
/* VTTTalk Unicode 0x176 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 14, 6, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Ydieresis">
/* VTTTalk Unicode 0x178 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 10, 6, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="Ygrave">
/* VTTTalk Unicode 0x1ef2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 10, 6, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Z">
/* TT glyph 177, char 0x5a (Z) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 7, 106
SHP[2], 1
CALL[], 4, 2, 114
CALL[], 4, 3, 106
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="Zacute">
/* VTTTalk Unicode 0x179 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 177, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Zacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 177, 0, 0
OFFSET[R], 1540, 0, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 120, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="Zcaron">
/* VTTTalk Unicode 0x17d */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 177, 0, 0
OFFSET[R], 1531, 0, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Zdotaccent">
/* VTTTalk Unicode 0x17b */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 177, 0, 0
OFFSET[R], 1526, 0, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="Zeta">
/* VTTTalk Unicode 0x396 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 177, 0, 0

    </glyphProgram>

    <glyphProgram name="a">
/* TT glyph 187, char 0x61 (a) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 24
CALL[], 0, 27, 106
CALL[], 14, 6, 114
CALL[], 14, 13, 106
SRP2[], 0
IP[], 6
SRP1[], 6
SHP[1], 8
CALL[], 6, 35, 106
SHP[2], 32
CALL[], 21, 10, 114
SHP[2], 22
CALL[], 21, 20, 106
SHP[2], 19
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="aacute">
/* VTTTalk Unicode 0xe1 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1497, 10, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 178, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="abreve">
/* VTTTalk Unicode 0x103 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1501, -20, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 168, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="acircumflex">
/* VTTTalk Unicode 0xe2 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1499, -20, 0
SVTCA[Y]
CALL[], 43, 14, 1, 1, 178, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="acute">
/* VTTTalk Unicode 0xb4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1497, 0, 0


    </glyphProgram>

    <glyphProgram name="acutecomb">
/* TT glyph 1497, char 0x301 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="acutecomb.case">
/* TT glyph 1528, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="acutecomb.case.loclPLK">
/* TT glyph 1540, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="acutecomb.loclPLK">
/* TT glyph 1539, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="adieresis">
/* VTTTalk Unicode 0xe4 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1494, -18, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 168, 86
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="ae">
/* TT glyph 210, char 0xe6 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 35
CALL[], 35, 29, 106
CALL[], 0, 49, 106
SHP[2], 52
CALL[], 19, 7, 114
CALL[], 19, 42, 106
SHP[1], 14
CALL[], 14, 13, 106
SRP2[], 35
IP[], 6
MDAP[R], 6
CALL[], 6, 55, 106
SRP1[], 19
SRP2[], 0
IP[], 26
MDAP[R], 26
SRP2[], 19
IP[], 17
SRP2[], 0
IP[], 39
CALL[], 26, 45, 106
SHP[2], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="aeacute">
/* VTTTalk Unicode 0x1fd */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 210, 0, 0
OFFSET[R], 1497, 30, 0
SVTCA[Y]
CALL[], 61, 19, 1, 1, 168, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="agrave">
/* VTTTalk Unicode 0xe0 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1496, 25, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 178, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="alpha">
/* TT glyph 568, char 0x3b1 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 16
CALL[], 0, 22, 106
CALL[], 6, 7, 114
SHP[2], 9
CALL[], 6, 27, 106
CALL[], 10, 6, 114
CALL[], 14, 10, 114
CALL[], 14, 13, 106
SHP[2], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="alphatonos">
/* VTTTalk Unicode 0x3ac */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 568, 0, 0
OFFSET[R], 1541, 0, 0
SVTCA[Y]
CALL[], 30, 11, 1, 1, 168, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="amacron">
/* VTTTalk Unicode 0x101 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1504, -20, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 178, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="ampersand">
/* TT glyph 1113, char 0x26 (&amp;) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 19, 114
CALL[], 0, 38, 106
CALL[], 11, 17, 114
CALL[], 11, 18, 106
SRP2[], 0
IP[], 27
IP[], 15
MDAP[R], 27
MDAP[R], 15
SRP1[], 27
SLOOP[], 5
IP[], 33, 40, 30, 25, 6
CALL[], 6, 43, 106
CALL[], 32, 18, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ampersand_ampersand.liga">
/* TT glyph 1162, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 18, 114
SHP[2], 64
CALL[], 3, 19, 114
SHP[2], 34
CALL[], 3, 69, 106
SHP[2], 76
CALL[], 13, 17, 114
SHP[2], 44
SRP2[], 3
IP[], 29
IP[], 17
MDAP[R], 29
MDAP[R], 17
SRP1[], 29
SLOOP[], 5
IP[], 1, 71, 32, 27, 7
SRP1[], 1
SHP[1], 65
SRP1[], 71
SHP[1], 78
SRP1[], 32
SHP[1], 62
SRP1[], 27
SHP[1], 57
SRP1[], 7
SHP[1], 38
CALL[], 7, 72, 106
SHP[2], 79
SRP1[], 29
SHP[1], 59
SRP1[], 17
SHP[1], 47
CALL[], 13, 20, 106
SHP[2], 50
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="anoteleia">
/* VTTTalk Unicode 0x387 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 664, 0, 804

    </glyphProgram>

    <glyphProgram name="aogonek">
/* TT glyph 206, char 0x105 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 41
MDRP[m&gt;RGr], 27
CALL[], 27, 32, 106
CALL[], 0, 45, 106
SHP[2], 49
CALL[], 14, 6, 114
CALL[], 14, 13, 106
SRP2[], 0
IP[], 6
SRP1[], 6
SHP[1], 8
CALL[], 6, 53, 106
MIAP[R], 21, 10
CALL[], 21, 20, 106
SHP[1], 40
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="approxequal">
USEMYMETRICS[]
OFFSET[R], 819, 0, 290
OVERLAP[]
OFFSET[R], 819, 0, -290

    </glyphProgram>

    <glyphProgram name="aring">
/* VTTTalk Unicode 0xe5 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1502, -20, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 128, 86
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="aringacute">
/* VTTTalk Unicode 0x1fb */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1502, -20, 0
OFFSET[R], 1497, 10, 280
SVTCA[Y]
CALL[], 39, 14, 1, 1, 128, 86
SHC[2], 2
SHC[2], 3
CALL[], 59, 45, 0, 0, -102, 86
SHC[2], 4
    </glyphProgram>

    <glyphProgram name="arrowboth">
/* TT glyph 839, char 0x2194 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 6
SMD[], 96
MDRP[m&gt;RWh], 4
SHP[2], 9
CALL[], 4, 3, 106
SHP[2], 10
CALL[], 6, 17, 106
SLOOP[], 4
IP[], 12, 1, 2, 11
MDRP[m&gt;RWh], 19
SHP[2], 14
CALL[], 19, 0, 106
SHP[2], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="arrowdown">
/* TT glyph 837, char 0x2193 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 5, 17, 114
SRP2[], 0
IP[], 1
MDAP[R], 1
IP[], 4
SRP1[], 4
SHP[1], 7
SRP1[], 1
SHP[1], 10
CALL[], 11, 18, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="arrowleft">
/* TT glyph 838, char 0x2190 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 7
SMD[], 96
MDRP[m&gt;RWh], 4
CALL[], 4, 3, 106
CALL[], 7, 8, 106
IP[], 1
IP[], 2
MDRP[m&gt;RWh], 11
CALL[], 11, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="arrowright">
/* TT glyph 836, char 0x2192 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 5
CALL[], 5, 4, 106
SMD[], 96
MDRP[m&gt;RWh], 1
CALL[], 1, 0, 106
SRP1[], 4
SRP2[], 5
IP[], 11
IP[], 10
SRP0[], 5
MDRP[m&gt;RWh], 8
CALL[], 8, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="arrowup">
/* TT glyph 835, char 0x2191 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 17, 114
CALL[], 11, 18, 114
SRP1[], 5
IP[], 3
IP[], 8
MDAP[R], 3
MDAP[R], 8
SRP2[], 5
IP[], 10
IP[], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="arrowupdn">
/* TT glyph 840, char 0x2195 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MIAP[R], 0, 8
MIAP[R], 9, 2
SLOOP[], 4
IP[], 2, 17, 12, 7
MDAP[R], 2
MDAP[R], 17
MDAP[R], 12
MDAP[R], 7
SRP1[], 2
IP[], 4
IP[], 15
SRP1[], 7
SRP2[], 9
IP[], 5
IP[], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="arrowupdnbse">
/* TT glyph 841, char 0x21a8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 8, 114
CALL[], 1, 0, 106
SHP[1], 21
CALL[], 11, 2, 114
SRP2[], 1
SLOOP[], 4
IP[], 4, 19, 14, 9
MDAP[R], 4
MDAP[R], 19
MDAP[R], 14
MDAP[R], 9
SRP1[], 4
IP[], 17
IP[], 6
SRP1[], 9
SRP2[], 11
IP[], 7
IP[], 16
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asciicircum">
/* TT glyph 821, char 0x5e (^) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
CALL[], 1, 0, 106
SHP[2], 4
IP[], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="asciicircum_equal.liga">
/* TT glyph 1230, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 16, 114
CALL[], 5, 3, 106
IP[], 2
CALL[], 7, 132, 114
CALL[], 7, 0, 106
CALL[], 7, 11, 105
CALL[], 11, 10, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asciitilde">
/* TT glyph 819, char 0x7e (~) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 13
CALL[], 13, 4, 105
CALL[], 4, 24, 106
CALL[], 24, 27, 105
CALL[], 13, 10, 105
CALL[], 10, 18, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="asciitilde_asciitilde.liga">
/* TT glyph 1229, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 34, 105
CALL[], 34, 26, 106
CALL[], 26, 29, 105
CALL[], 1, 40, 105
CALL[], 40, 20, 106
CALL[], 1, 46, 105
CALL[], 46, 12, 106
CALL[], 1, 52, 105
CALL[], 52, 6, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asciitilde_asciitilde_greater.liga">
/* TT glyph 1538, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 68, 131, 114
CALL[], 68, 47, 105
CALL[], 68, 53, 105
CALL[], 68, 59, 105
CALL[], 68, 64, 105
CALL[], 68, 7, 106
CALL[], 7, 1, 105
CALL[], 68, 41, 105
CALL[], 41, 34, 106
CALL[], 34, 37, 105
CALL[], 68, 74, 105
CALL[], 74, 75, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asciitilde_at.liga">
/* TT glyph 1226, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 46, 17, 114
CALL[], 46, 13, 106
CALL[], 13, 6, 105
SHP[2], 9
CALL[], 6, 62, 106
CALL[], 6, 0, 105
SHP[2], 51
SHP[2], 52
CALL[], 0, 56, 106
CALL[], 0, 73, 105
CALL[], 73, 78, 106
SRP1[], 46
IP[], 39
MDAP[R], 39
IP[], 68
IP[], 70
SRP2[], 46
IP[], 24
CALL[], 39, 18, 106
CALL[], 24, 28, 105
CALL[], 24, 33, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asciitilde_equal.liga">
/* TT glyph 1227, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MIAP[R], 12, 16
CALL[], 12, 3, 105
CALL[], 3, 20, 106
CALL[], 20, 23, 105
MDRP[m&lt;RWh], 25
CALL[], 25, 24, 106
CALL[], 12, 8, 105
CALL[], 8, 15, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asciitilde_greater.liga">
/* TT glyph 1228, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 42, 131, 114
CALL[], 42, 7, 106
CALL[], 7, 1, 105
CALL[], 1, 0, 106
SRP1[], 7
SRP2[], 42
IP[], 51
IP[], 50
CALL[], 42, 28, 105
CALL[], 28, 21, 106
CALL[], 21, 24, 105
CALL[], 42, 34, 105
CALL[], 34, 15, 106
CALL[], 42, 39, 105
CALL[], 39, 10, 106
CALL[], 42, 48, 105
CALL[], 48, 49, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="asciitilde_hyphen.liga">
/* TT glyph 1225, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 13, 131, 114
CALL[], 13, 16, 106
CALL[], 13, 28, 105
CALL[], 13, 4, 105
CALL[], 4, 24, 106
CALL[], 13, 10, 105
CALL[], 10, 18, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="asterisk">
/* TT glyph 675, char 0x2a (*) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 134, 114
CALL[], 6, 0, 105
SHP[2], 13
SLOOP[], 11
IP[], 1, 12, 14, 2, 11, 10, 3, 8, 5, 4, 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="asterisk_asterisk.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 675, -1138, 0
OFFSET[R], 675, -58, 0


    </glyphProgram>

    <glyphProgram name="asterisk_asterisk_asterisk.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 675, -58, 0
OFFSET[R], 675, -2338, 0
OFFSET[R], 675, -1190, 300

    </glyphProgram>

    <glyphProgram name="asterisk_greater.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 675, -1138, 0
OFFSET[R], 813, -98, 0


    </glyphProgram>

    <glyphProgram name="asterisk_parenright.liga">
/* TT glyph 1579, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 17, 138, 114
CALL[], 17, 10, 106
CALL[], 17, 23, 105
CALL[], 23, 4, 106
SRP2[], 17
IP[], 34
MDAP[R], 34
CALL[], 34, 28, 105
SLOOP[], 12
IP[], 26, 40, 29, 27, 39, 30, 38, 31, 33, 36, 32, 37
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="asterisk_slash.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 675, -1138, 0
OFFSET[R], 679, -58, 0


    </glyphProgram>

    <glyphProgram name="at">
/* TT glyph 1112, char 0x40 (@) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 28, 17, 114
CALL[], 28, 13, 106
CALL[], 13, 6, 105
SHP[2], 9
CALL[], 6, 43, 106
CALL[], 28, 23, 105
CALL[], 23, 18, 106
CALL[], 18, 0, 105
SHP[2], 32
SHP[2], 33
CALL[], 0, 37, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="atilde">
/* VTTTalk Unicode 0xe3 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1503, -10, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 156, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="b">
/* TT glyph 212, char 0x62 (b) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 1, 0, 114
CALL[], 6, 7, 114
SHP[2], 4
CALL[], 6, 25, 106
SHP[2], 15
CALL[], 12, 11, 114
SHP[2], 0
CALL[], 12, 19, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="backslash">
/* TT glyph 680, char 0x5c (\) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 136, 114
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="backslash_backslash.liga">
OVERLAP[]
OFFSET[R], 680, -1030, 0
OVERLAP[]
OFFSET[R], 680, -148, 0


    </glyphProgram>

    <glyphProgram name="bar">
/* TT glyph 1124, char 0x7c (|) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 133, 114
CALL[], 1, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="bar_bar.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1124, -130, 0
OFFSET[R], 1124, -1070, 0

    </glyphProgram>

    <glyphProgram name="bar_bar_bar_greater.liga">
/* TT glyph 1167, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 133, 114
SHP[2], 5
CALL[], 1, 3, 106
SHP[2], 7
CALL[], 10, 135, 114
CALL[], 10, 9, 106
CALL[], 10, 11, 106
CALL[], 11, 8, 106
SRP1[], 9
SLOOP[], 4
IP[], 14, 15, 12, 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bar_bar_equal.liga">
/* TT glyph 1168, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 132, 114
CALL[], 4, 7, 106
SRP0[], 4
MDRP[m&gt;RBl], 8
CALL[], 8, 11, 106
CALL[], 13, 133, 114
SHP[2], 2
CALL[], 13, 15, 106
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bar_bar_greater.liga">
/* TT glyph 1169, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 133, 114
CALL[], 2, 0, 106
CALL[], 6, 135, 114
CALL[], 6, 5, 106
CALL[], 6, 7, 106
CALL[], 7, 4, 106
SRP1[], 5
SLOOP[], 4
IP[], 10, 11, 8, 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="bar_braceright.liga">
/* TT glyph 1164, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 133, 114
CALL[], 2, 0, 106
CALL[], 37, 138, 114
CALL[], 37, 30, 106
CALL[], 37, 4, 105
CALL[], 4, 11, 106
SRP2[], 37
IP[], 47
MDAP[R], 47
CALL[], 47, 48, 106
IP[], 20
IP[], 21
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bar_bracketright.liga">
/* TT glyph 1165, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 133, 114
CALL[], 1, 3, 106
CALL[], 10, 137, 114
CALL[], 10, 7, 106
CALL[], 10, 11, 106
CALL[], 11, 6, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bar_equal.liga">
/* TT glyph 1170, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 133, 114
CALL[], 2, 0, 106
CALL[], 4, 132, 114
CALL[], 4, 7, 106
SRP0[], 4
MDRP[m&gt;RBl], 8
CALL[], 8, 11, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="bar_greater.liga">
/* TT glyph 1171, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 135, 114
CALL[], 2, 1, 106
CALL[], 2, 3, 106
CALL[], 3, 0, 106
SRP1[], 1
SLOOP[], 4
IP[], 6, 7, 4, 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="bar_hyphen.liga">
/* TT glyph 1163, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 133, 114
CALL[], 2, 0, 106
CALL[], 4, 131, 114
CALL[], 4, 7, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="beta">
/* TT glyph 569, char 0x3b2 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 14, 114
MIAP[R], 3, 2
CALL[], 3, 22, 106
SRP2[], 16
IP[], 35
MDAP[R], 35
CALL[], 35, 34, 106
IP[], 10
IP[], 9
CALL[], 16, 11, 114
CALL[], 16, 27, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="block">
/* TT glyph 849, char 0x2588 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="braceleft">
/* TT glyph 683, char 0x7b ({) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 21, 138, 114
CALL[], 21, 28, 106
CALL[], 21, 0, 105
CALL[], 0, 47, 106
SRP2[], 21
IP[], 11
MDAP[R], 11
CALL[], 11, 10, 106
IP[], 38
IP[], 37
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="braceleft_bar.liga">
/* TT glyph 718, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 133, 114
CALL[], 1, 3, 106
CALL[], 25, 138, 114
CALL[], 25, 32, 106
CALL[], 25, 4, 105
CALL[], 4, 51, 106
SRP2[], 25
IP[], 15
MDAP[R], 15
CALL[], 15, 14, 106
IP[], 42
IP[], 41
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="braceright">
/* TT glyph 684, char 0x7d (}) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 33, 138, 114
CALL[], 33, 26, 106
CALL[], 33, 0, 105
CALL[], 0, 7, 106
SRP2[], 33
IP[], 43
MDAP[R], 43
CALL[], 43, 44, 106
IP[], 16
IP[], 17
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="braceright_numbersign.liga">
/* TT glyph 719, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 41, 138, 114
CALL[], 41, 34, 106
CALL[], 41, 8, 105
CALL[], 8, 15, 106
CALL[], 54, 16, 114
SHP[2], 50
CALL[], 63, 18, 114
SHP[2], 67
SRP1[], 54
IP[], 59
IP[], 58
MDAP[R], 59
MDAP[R], 58
SRP2[], 59
SLOOP[], 4
IP[], 80, 24, 25, 79
CALL[], 59, 62, 106
SHP[2], 66
SRP1[], 66
SHP[1], 1
SRP1[], 59
SHP[1], 71
SRP1[], 71
SHP[1], 73
CALL[], 58, 55, 106
SHP[2], 51
SRP1[], 51
SHP[1], 48
SRP1[], 58
SHP[1], 70
SRP1[], 70
SHP[1], 74
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bracketleft">
/* TT glyph 685, char 0x5b ([) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 137, 114
CALL[], 1, 4, 106
CALL[], 1, 0, 106
CALL[], 0, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bracketleft_bar.liga">
/* TT glyph 720, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 133, 114
CALL[], 1, 3, 106
CALL[], 5, 137, 114
CALL[], 5, 8, 106
CALL[], 5, 4, 106
CALL[], 4, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bracketright">
/* TT glyph 686, char 0x5d (]) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 137, 114
CALL[], 5, 4, 106
CALL[], 5, 0, 105
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="bracketright_numbersign.liga">
/* TT glyph 721, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 10, 138, 114
CALL[], 10, 7, 106
CALL[], 10, 3, 106
CALL[], 3, 6, 106
CALL[], 13, 16, 114
SHP[2], 17
CALL[], 27, 18, 114
SHP[2], 31
SRP1[], 13
IP[], 37
IP[], 39
MDAP[R], 37
MDAP[R], 39
SRP1[], 37
SHP[1], 23
SHP[1], 33
CALL[], 37, 26, 106
SHP[2], 30
SRP1[], 30
SHP[1], 1
SRP1[], 39
SHP[1], 22
SHP[1], 34
CALL[], 39, 12, 106
SHP[2], 15
SRP1[], 15
SHP[1], 19
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="breve">
/* VTTTalk Unicode 0x2d8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1501, 0, 0

    </glyphProgram>

    <glyphProgram name="brevecombcy">
/* TT glyph 1544, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 7, 106
CALL[], 0, 10, 105
SHP[2], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="brevecombcy.case">
/* TT glyph 1545, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 7, 106
CALL[], 0, 10, 105
SHP[2], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="brokenbar">
/* TT glyph 1125, char 0xa6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 133, 114
CALL[], 1, 3, 106
CALL[], 3, 5, 105
CALL[], 5, 4, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="bullet">
/* TT glyph 674, char 0x2022 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 8
CALL[], 8, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="c">
/* TT glyph 213, char 0x63 (c) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 19, 106
CALL[], 6, 7, 114
SHP[2], 9
CALL[], 6, 13, 106
SHP[2], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="cacute">
/* VTTTalk Unicode 0x107 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 213, 0, 0
OFFSET[R], 1497, 80, 0
SVTCA[Y]
CALL[], 26, 6, 1, 1, 168, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="cacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 213, 0, 0
OFFSET[R], 1539, 80, 0
SVTCA[Y]
CALL[], 26, 6, 1, 1, 168, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="caron">
/* VTTTalk Unicode 0x2c7 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1500, 0, 0

    </glyphProgram>

    <glyphProgram name="ccaron">
/* VTTTalk Unicode 0x10d */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 213, 0, 0
OFFSET[R], 1500, 50, 0
SVTCA[Y]
CALL[], 26, 6, 1, 1, 168, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="ccedilla">
/* VTTTalk Unicode 0xe7 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 213, 0, 0
OFFSET[R], 1510, -25, 0
SVTCA[Y]
CALL[], 32, 0, 0, 0, 69, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="ccircumflex">
/* VTTTalk Unicode 0x109 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 213, 0, 0
OFFSET[R], 1499, 50, 0
SVTCA[Y]
CALL[], 30, 6, 1, 1, 168, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="cdotaccent">
/* VTTTalk Unicode 0x10b */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 213, 0, 0
OFFSET[R], 1495, 48, 0
SVTCA[Y]
CALL[], 26, 6, 1, 1, 158, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="cedilla">
/* VTTTalk Unicode 0xb8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1510, 0, 0


    </glyphProgram>

    <glyphProgram name="cent">
/* TT glyph 772, char 0xa2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 11, 114
SMD[], 96
MDRP[m&gt;RBl], 0
SHP[1], 24
CALL[], 1, 29, 106
SHP[2], 17
CALL[], 7, 7, 114
MDRP[m&gt;RBl], 8
SHP[1], 10
SRP1[], 10
SHP[1], 13
CALL[], 7, 30, 106
SHP[2], 16
SRP1[], 16
SHP[1], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="chi">
/* TT glyph 590, char 0x3c7 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 10, 7, 114
CALL[], 10, 5, 106
CALL[], 16, 6, 114
CALL[], 26, 15, 114
CALL[], 26, 21, 106
SRP2[], 10
SLOOP[], 4
IP[], 30, 1, 17, 14
MIAP[R], 31, 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="circle">
/* TT glyph 875, char 0x25cb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="circumflex">
/* VTTTalk Unicode 0x2c6 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1499, 0, 0

    </glyphProgram>

    <glyphProgram name="club">
/* TT glyph 1107, char 0x2663 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 30
SMD[], 96
MDRP[m&gt;RWh], 36
CALL[], 0, 15, 105
SLOOP[], 6
IP[], 21, 9, 24, 6, 22, 8
CALL[], 0, 38, 106
SHP[2], 33
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="colon">
/* TT glyph 666, char 0x3a (:) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 7, 114
CALL[], 6, 0, 106
CALL[], 12, 19, 114
CALL[], 12, 18, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="colon_colon.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 666, -1060, 0
OFFSET[R], 666, -140, 0

    </glyphProgram>

    <glyphProgram name="colon_colon_colon.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 666, -2000, 0
OFFSET[R], 666, -1200, 0
OFFSET[R], 666, -400, 0


    </glyphProgram>

    <glyphProgram name="colon_colon_equal.liga">
/* TT glyph 731, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 25, 132, 114
CALL[], 25, 24, 106
CALL[], 25, 18, 105
SHP[2], 6
CALL[], 18, 12, 106
SHP[2], 0
SRP0[], 25
MDRP[m&gt;RWh], 29
CALL[], 29, 28, 106
CALL[], 28, 44, 105
SHP[2], 32
CALL[], 44, 50, 106
SHP[2], 38
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="colon_equal.liga">
/* TT glyph 732, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 13, 132, 114
CALL[], 13, 12, 106
CALL[], 13, 6, 105
CALL[], 6, 0, 106
SRP0[], 13
MDRP[m&gt;RWh], 17
CALL[], 17, 16, 106
CALL[], 16, 20, 105
CALL[], 20, 26, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="colon_greater.liga">
/* TT glyph 733, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 18, 135, 114
CALL[], 18, 16, 106
CALL[], 16, 17, 106
CALL[], 17, 6, 105
CALL[], 6, 0, 106
CALL[], 18, 19, 106
CALL[], 19, 13, 106
CALL[], 13, 12, 106
CALL[], 12, 20, 105
CALL[], 20, 26, 106
SRP1[], 19
SRP2[], 18
IP[], 14
IP[], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="colon_less.liga">
/* TT glyph 734, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 14, 135, 114
CALL[], 14, 13, 106
IP[], 18
IP[], 17
CALL[], 13, 19, 106
CALL[], 19, 12, 106
CALL[], 12, 20, 105
CALL[], 20, 26, 106
CALL[], 14, 16, 106
CALL[], 16, 15, 106
CALL[], 15, 6, 105
CALL[], 6, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="colon_slash_slash.liga">
OVERLAP[]
OFFSET[R], 666, -2290, 0
OVERLAP[]
OFFSET[R], 679, -320, 0
OVERLAP[]
OFFSET[R], 679, -1280, 0

    </glyphProgram>

    <glyphProgram name="colonmonetary">
/* TT glyph 773, char 0x20a1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 12, 3, 114
SHP[2], 7
SMD[], 96
MDRP[m&gt;RGr], 8
SHP[2], 15
SHP[2], 9
SRP1[], 9
SHP[1], 16
SRP1[], 12
SHP[1], 17
SRP1[], 17
SHP[1], 19
CALL[], 12, 38, 106
SHP[2], 49
SHP[2], 22
SRP1[], 22
SHP[1], 20
CALL[], 32, 9, 114
CALL[], 32, 23, 106
SHP[2], 43
SRP1[], 43
SHP[1], 48
SRP0[], 32
MDRP[m&gt;RBl], 33
SHP[2], 0
SHP[2], 34
SRP1[], 34
SHP[1], 1
SRP1[], 32
SHP[1], 35
SRP1[], 35
SHP[1], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="comma">
/* TT glyph 665, char 0x2c (,) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="copyright">
/* TT glyph 1116, char 0xa9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 18, 114
CALL[], 0, 12, 106
CALL[], 6, 16, 114
CALL[], 6, 18, 106
SRP2[], 0
SLOOP[], 4
IP[], 30, 36, 42, 24
SRP1[], 30
SHP[1], 33
SRP1[], 36
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="currency">
/* TT glyph 774, char 0xa4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 11
CALL[], 11, 14, 105
SHP[2], 8
SHP[2], 15
SRP1[], 15
SHP[1], 7
CALL[], 11, 34, 106
CALL[], 34, 28, 105
CALL[], 28, 25, 106
CALL[], 25, 0, 105
SHP[2], 22
SHP[2], 1
SRP1[], 1
SHP[1], 21
SRP1[], 25
SRP2[], 11
SLOOP[], 8
IP[], 23, 27, 20, 2, 6, 16, 9, 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="d">
/* TT glyph 219, char 0x64 (d) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 15
CALL[], 0, 20, 106
SHP[2], 22
CALL[], 6, 7, 114
SHP[2], 8
CALL[], 6, 25, 106
SHP[2], 23
MIAP[R], 10, 0
MIAP[R], 12, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dagger">
/* TT glyph 1126, char 0x2020 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 17, 114
CALL[], 5, 0, 105
IP[], 3
MDAP[R], 3
SHP[1], 7
CALL[], 3, 2, 106
SHP[2], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="daggerdbl">
/* TT glyph 1128, char 0x2021 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 9, 17, 114
CALL[], 9, 0, 105
IP[], 7
IP[], 2
MDAP[R], 7
MDAP[R], 2
SRP1[], 7
SHP[1], 11
CALL[], 7, 6, 106
SHP[2], 14
SRP1[], 2
SHP[1], 18
CALL[], 2, 3, 106
SHP[2], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dcaron">
/* TT glyph 221, char 0x10f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 11, 114
SHP[2], 16
CALL[], 4, 22, 106
CALL[], 8, 7, 114
SHP[2], 11
CALL[], 8, 27, 106
CALL[], 12, 0, 114
CALL[], 14, 10, 114
SRP1[], 8
SRP2[], 12
IP[], 0
MDAP[R], 0
CALL[], 0, 2, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dcaron.alt">
/* TT glyph 371, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 19, 114
SHP[2], 16
CALL[], 4, 22, 106
CALL[], 8, 7, 114
SHP[2], 11
CALL[], 8, 27, 106
CALL[], 12, 0, 114
SRP1[], 8
IP[], 0
MDAP[R], 0
CALL[], 0, 1, 106
CALL[], 14, 18, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dcroat">
/* TT glyph 222, char 0x111 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 22
CALL[], 0, 28, 106
CALL[], 6, 7, 114
SHP[2], 9
CALL[], 6, 33, 106
CALL[], 14, 0, 114
SRP2[], 6
IP[], 11
IP[], 12
SRP1[], 11
SHP[1], 18
SRP1[], 12
SHP[1], 17
MIAP[R], 20, 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="degree">
/* TT glyph 1121, char 0xb0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 17, 114
CALL[], 6, 18, 106
CALL[], 6, 0, 105
CALL[], 0, 12, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="delta">
/* TT glyph 571, char 0x3b4 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 33, 106
CALL[], 14, 1, 114
SHP[2], 16
CALL[], 14, 19, 106
SHP[2], 17
SRP2[], 0
IP[], 25
CALL[], 25, 39, 106
IP[], 7
IP[], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="diamond">
/* TT glyph 1109, char 0x2666 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 2
CALL[], 2, 0, 106
IP[], 3
IP[], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dieresis">
/* VTTTalk Unicode 0xa8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1494, 0, 0


    </glyphProgram>

    <glyphProgram name="dieresistonos">
/* TT glyph 1543, char 0x385 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 4
SHP[1], 16
MDAP[R], 3
CALL[], 3, 1, 106
CALL[], 4, 10, 106
SHP[2], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="divide">
/* TT glyph 810, char 0xf7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 13, 131, 114
MDRP[m&gt;RWh], 0
CALL[], 0, 6, 106
CALL[], 13, 12, 106
MDRP[m&gt;RWh], 22
CALL[], 22, 16, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dkshade">
/* TT glyph 873, char 0x2593 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="dnblock">
/* TT glyph 845, char 0x2584 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="dollar">
/* TT glyph 775, char 0x24 ($) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 9, 114
CALL[], 1, 0, 106
SHP[1], 31
CALL[], 1, 7, 106
SHP[2], 42
CALL[], 18, 3, 114
SHP[2], 15
CALL[], 18, 17, 106
SHP[1], 21
SRP2[], 1
SLOOP[], 12
IP[], 44, 29, 40, 41, 8, 9, 26, 25, 34, 33, 12, 37
CALL[], 18, 24, 106
SHP[2], 22
SHP[2], 35
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="dollar_greater.liga">
/* TT glyph 1172, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 14, 9, 114
SHP[2], 11
SMD[], 96
MDRP[m&gt;RBl], 13
CALL[], 14, 19, 106
SHP[2], 42
CALL[], 27, 3, 114
MDRP[m&gt;RBl], 28
SHP[1], 30
SRP2[], 14
SLOOP[], 12
IP[], 44, 9, 40, 41, 20, 21, 6, 5, 34, 33, 24, 37
CALL[], 27, 35, 106
SHP[2], 4
CALL[], 31, 135, 114
CALL[], 31, 32, 106
SMD[], 64
MDRP[m&gt;RBl], 1
CALL[], 1, 0, 106
SRP1[], 32
SRP2[], 31
IP[], 2
IP[], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dong">
/* TT glyph 776, char 0x20ab */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 22
CALL[], 0, 28, 106
CALL[], 6, 7, 114
SHP[2], 9
CALL[], 6, 33, 106
CALL[], 15, 0, 114
SRP1[], 6
IP[], 11
SRP1[], 11
SHP[1], 18
CALL[], 11, 12, 106
SHP[2], 17
CALL[], 20, 10, 114
CALL[], 20, 38, 105
CALL[], 38, 39, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dotaccent">
/* VTTTalk Unicode 0x2d9 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1495, 0, 0

    </glyphProgram>

    <glyphProgram name="dotbelowcomb">
/* TT glyph 1508, char 0x323 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 6
CALL[], 6, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="dotlessi">
/* TT glyph 253, char 0x131 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 5, 6, 114
CALL[], 5, 4, 106
CALL[], 0, 1, 106
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="e">
/* TT glyph 223, char 0x65 (e) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 15, 106
CALL[], 6, 7, 114
CALL[], 6, 22, 106
SRP2[], 0
IP[], 12
MDAP[R], 12
CALL[], 12, 25, 106
SHP[2], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eacute">
/* VTTTalk Unicode 0xe9 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1497, 50, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ebreve">
/* VTTTalk Unicode 0x115 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1501, 20, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 158, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="ecaron">
/* VTTTalk Unicode 0x11b */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1500, 20, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 168, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="ecircumflex">
/* VTTTalk Unicode 0xea */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1499, 20, 0
SVTCA[Y]
CALL[], 33, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="edieresis">
/* VTTTalk Unicode 0xeb */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1494, 22, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 158, 86
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="edotaccent">
/* VTTTalk Unicode 0x117 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1495, 18, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 158, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="egrave">
/* VTTTalk Unicode 0xe8 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1496, 65, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="eight">
/* TT glyph 613, char 0x38 (8) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 0, 38, 106
CALL[], 13, 5, 114
CALL[], 13, 32, 106
SRP2[], 0
IP[], 26
CALL[], 26, 44, 106
SLOOP[], 4
IP[], 6, 20, 19, 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eight.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 654, 0, -805

    </glyphProgram>

    <glyphProgram name="eight.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 654, 0, 0






    </glyphProgram>

    <glyphProgram name="ellipsis">
/* VTTTalk Unicode 0x2026 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 664, -398, 0
USEMYMETRICS[]
OFFSET[R], 664, 398, 0
USEMYMETRICS[]
OFFSET[R], 664, 0, 0

    </glyphProgram>

    <glyphProgram name="emacron">
/* VTTTalk Unicode 0x113 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1504, 20, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 168, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="emdash">
/* TT glyph 692, char 0x2014 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 131, 114
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="endash">
/* TT glyph 691, char 0x2013 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 131, 114
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eng">
/* TT glyph 283, char 0x14b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 6, 7, 114
SHP[2], 4
CALL[], 6, 23, 106
SHP[2], 25
CALL[], 14, 15, 114
CALL[], 14, 15, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="eogonek">
/* TT glyph 239, char 0x119 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 15, 106
SRP0[], 0
MDRP[m&gt;RGr], 26
CALL[], 26, 31, 106
CALL[], 6, 7, 114
CALL[], 6, 39, 106
SRP2[], 0
IP[], 12
MDAP[R], 12
CALL[], 12, 42, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="epsilon">
/* TT glyph 572, char 0x3b5 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 24, 106
CALL[], 9, 7, 114
CALL[], 9, 14, 106
SRP2[], 0
IP[], 18
MDAP[R], 18
CALL[], 18, 19, 106
IP[], 4
IP[], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="epsilontonos">
/* VTTTalk Unicode 0x3ad */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 572, 0, 0
OFFSET[R], 1541, 70, 0
SVTCA[Y]
CALL[], 31, 9, 1, 1, 168, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="equal">
/* TT glyph 811, char 0x3d (=) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 132, 114
CALL[], 1, 0, 106
SRP0[], 1
MDRP[m&gt;RWh], 5
CALL[], 5, 4, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="equal_colon_equal.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 811, -2220, 0
OFFSET[R], 811, -180, 0
OFFSET[R], 666, -1200, 180


    </glyphProgram>

    <glyphProgram name="equal_equal.liga">
/* TT glyph 1178, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 132, 114
CALL[], 1, 0, 106
SRP0[], 1
MDRP[m&gt;RWh], 5
CALL[], 5, 4, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="equal_equal_equal.liga">
/* TT glyph 1179, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 131, 114
CALL[], 5, 4, 106
SRP0[], 5
MDRP[m&gt;RWh], 0
CALL[], 0, 1, 106
SRP0[], 5
MDRP[m&gt;RWh], 9
CALL[], 9, 8, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="equal_equal_greater.liga">
/* TT glyph 1180, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 132, 114
CALL[], 11, 10, 106
CALL[], 11, 5, 105
CALL[], 5, 4, 106
SMD[], 96
MDRP[m&gt;RWh], 1
CALL[], 1, 0, 106
SRP1[], 4
SRP2[], 11
SLOOP[], 4
IP[], 17, 7, 8, 16
SRP0[], 11
MDRP[m&gt;RWh], 14
CALL[], 14, 15, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="equal_exclam_equal.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 811, -2220, 0
OFFSET[R], 811, -180, 0
OFFSET[R], 669, -1200, 0


    </glyphProgram>

    <glyphProgram name="equal_greater.liga">
/* TT glyph 1181, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 132, 114
CALL[], 11, 10, 106
SRP0[], 11
MDRP[m&gt;RWh], 5
CALL[], 5, 4, 106
SMD[], 96
MDRP[m&gt;RWh], 1
CALL[], 1, 0, 106
SRP1[], 4
SRP2[], 11
SLOOP[], 4
IP[], 17, 7, 8, 16
SRP0[], 11
MDRP[m&gt;RWh], 14
CALL[], 14, 15, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="equal_greater_greater.liga">
/* TT glyph 1182, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 19, 132, 114
CALL[], 19, 18, 106
SRP0[], 19
MDRP[m&gt;RWh], 13
CALL[], 13, 12, 106
SRP1[], 19
SLOOP[], 8
IP[], 7, 25, 2, 15, 16, 3, 24, 6
SMD[], 96
MDRP[m&gt;RWh], 9
SHP[2], 1
CALL[], 9, 8, 106
SHP[2], 0
SRP0[], 19
MDRP[m&gt;RWh], 22
SHP[2], 4
CALL[], 22, 23, 106
SHP[2], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="equal_less_less.liga">
/* TT glyph 1183, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 10, 132, 114
CALL[], 10, 9, 106
CALL[], 10, 12, 105
SHP[2], 3
CALL[], 12, 13, 106
SHP[2], 4
SRP0[], 10
MDRP[m&gt;RWh], 17
CALL[], 17, 16, 106
SRP1[], 10
SLOOP[], 4
IP[], 1, 6, 5, 2
CALL[], 16, 14, 105
SHP[2], 0
CALL[], 14, 19, 106
SHP[2], 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="equal_slash_equal.liga">
/* TT glyph 1184, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 132, 114
CALL[], 7, 9, 105
SHP[1], 11
SRP0[], 7
MDRP[m&gt;RWh], 3
SHP[2], 15
CALL[], 3, 2, 106
CALL[], 2, 0, 105
SHP[1], 18
CALL[], 7, 6, 106
SHP[2], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="equivalence">
/* TT glyph 802, char 0x2261 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 131, 114
MDRP[m&lt;RWh], 0
CALL[], 0, 1, 106
CALL[], 5, 4, 106
MDRP[m&lt;RWh], 9
CALL[], 9, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="estimated">
/* TT glyph 1130, char 0x212e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 19, 114
CALL[], 0, 16, 106
CALL[], 0, 6, 105
CALL[], 6, 23, 106
SRP2[], 0
IP[], 13
MDAP[R], 13
CALL[], 13, 19, 105
CALL[], 13, 26, 106
SHP[2], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="eta">
/* TT glyph 574, char 0x3b7 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 6, 7, 114
SHP[2], 4
CALL[], 6, 15, 106
SHP[2], 17
CALL[], 10, 14, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="etatonos">
/* VTTTalk Unicode 0x3ae */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 574, 0, 0
OFFSET[R], 1541, 20, 0
SVTCA[Y]
CALL[], 19, 6, 1, 1, 168, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="eth">
/* TT glyph 220, char 0xf0 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 30, 106
CALL[], 0, 6, 105
CALL[], 6, 35, 106
SRP0[], 6
MDRP[m&gt;RWh], 13
SHP[2], 22
CALL[], 13, 14, 106
CALL[], 14, 18, 105
CALL[], 18, 17, 106
SRP1[], 14
SHP[1], 21
SRP1[], 13
SRP2[], 21
SLOOP[], 4
IP[], 12, 23, 15, 20
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="exclam">
/* TT glyph 669, char 0x21 (!) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 16, 114
CALL[], 4, 19, 114
CALL[], 4, 10, 106
CALL[], 10, 3, 105
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="exclam_equal.liga">
/* TT glyph 738, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 132, 114
CALL[], 7, 9, 105
SHP[1], 12
SRP0[], 7
MDRP[m&gt;RWh], 3
SHP[2], 16
CALL[], 3, 2, 106
CALL[], 2, 0, 105
SHP[1], 17
CALL[], 7, 6, 106
SHP[2], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="exclam_equal_equal.liga">
/* TT glyph 739, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 131, 114
SHP[2], 19
CALL[], 7, 6, 106
SHP[2], 22
MDRP[m&lt;RWh], 3
SHP[2], 23
CALL[], 3, 2, 106
CALL[], 2, 0, 105
SHP[1], 26
SRP0[], 7
MDRP[m&lt;RWh], 10
SHP[2], 18
CALL[], 10, 11, 106
CALL[], 11, 13, 105
SHP[1], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="exclam_exclam.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 669, -1060, 0
OFFSET[R], 669, -140, 0

    </glyphProgram>

    <glyphProgram name="exclam_exclam_period.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 669, -2300, 0
OFFSET[R], 669, -1180, 0
OFFSET[R], 664, -100, 0


    </glyphProgram>

    <glyphProgram name="exclamdbl">
/* VTTTalk Unicode 0x203c */
/* ACT generated Sun Nov 17 09:29:04 2019 */

OFFSET[R], 669, -270, 0
OFFSET[R], 669, 270, 0



    </glyphProgram>

    <glyphProgram name="exclamdown">
/* TT glyph 670, char 0xa1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 7, 114
CALL[], 0, 14, 105
CALL[], 0, 6, 106
CALL[], 6, 12, 105
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="f">
/* TT glyph 242, char 0x66 (f) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 7, 1, 114
CALL[], 7, 13, 106
SRP2[], 0
IP[], 16
MDAP[R], 16
SHP[1], 3
CALL[], 16, 19, 106
SHP[2], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="female">
/* TT glyph 1104, char 0x2640 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 9, 3, 114
CALL[], 9, 29, 106
CALL[], 20, 8, 114
CALL[], 20, 19, 106
SHP[2], 0
CALL[], 19, 16, 106
SHP[2], 1
CALL[], 16, 15, 105
SHP[2], 3
CALL[], 15, 23, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="filledbox">
/* TT glyph 918, char 0x25a0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="filledrect">
/* TT glyph 915, char 0x25ac */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="five">
/* TT glyph 610, char 0x35 (5) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 0, 7, 106
CALL[], 16, 4, 114
CALL[], 16, 19, 106
SRP2[], 0
IP[], 4
IP[], 23
MDAP[R], 4
MDAP[R], 23
SHP[1], 20
CALL[], 23, 12, 106
SHP[2], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="five.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 651, 0, -805

    </glyphProgram>

    <glyphProgram name="five.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 651, 0, 0




    </glyphProgram>

    <glyphProgram name="fiveeighths">
/* TT glyph 662, char 0x215d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 14, 16, 114
CALL[], 14, 17, 106
CALL[], 17, 20, 105
CALL[], 20, 10, 106
CALL[], 10, 6, 105
CALL[], 6, 0, 106
SRP2[], 10
IP[], 4
IP[], 13
CALL[], 30, 19, 114
SRP1[], 14
IP[], 26
IP[], 28
SRP1[], 26
SHP[1], 27
SRP1[], 28
SHP[1], 29
CALL[], 30, 62, 106
CALL[], 62, 66, 105
CALL[], 66, 54, 106
IP[], 48
IP[], 36
CALL[], 54, 58, 105
CALL[], 58, 42, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="florin">
/* TT glyph 779, char 0x192 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 0, 1, 106
CALL[], 12, 3, 114
SHP[2], 14
SRP1[], 0
IP[], 9
MDAP[R], 9
SHP[1], 21
CALL[], 9, 6, 106
SHP[2], 24
CALL[], 12, 18, 106
SHP[2], 15
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="four">
/* TT glyph 609, char 0x34 (4) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 7, 4, 114
CALL[], 12, 12, 114
SRP2[], 7
IP[], 11
MDAP[R], 11
IP[], 3
SHP[1], 0
CALL[], 11, 8, 106
SHP[2], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="four.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 650, 0, -805

    </glyphProgram>

    <glyphProgram name="four.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 650, 0, 0




    </glyphProgram>

    <glyphProgram name="fraction">
/* TT glyph 656, char 0x2044 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
MDAP[R], 2
SHP[1], 3
CALL[], 2, 0, 106
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="franc">
/* TT glyph 780, char 0x20a3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 1, 106
SHP[2], 16
CALL[], 1, 4, 106
SHP[2], 13
CALL[], 4, 12, 106
CALL[], 12, 9, 106
CALL[], 5, 2, 114
CALL[], 5, 8, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="g">
/* TT glyph 243, char 0x67 (g) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 0, 1, 106
CALL[], 10, 11, 114
SHP[2], 7
CALL[], 10, 28, 106
SHP[2], 30
CALL[], 16, 7, 114
SHP[2], 18
CALL[], 16, 33, 106
SHP[2], 31
CALL[], 20, 6, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="gamma">
/* TT glyph 570, char 0x3b3 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 9, 7, 114
CALL[], 17, 6, 114
CALL[], 22, 14, 114
SRP2[], 17
IP[], 14
MDAP[R], 14
CALL[], 14, 19, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="gbreve">
/* VTTTalk Unicode 0x11f */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 243, 0, 0
OFFSET[R], 1501, -20, 0
SVTCA[Y]
CALL[], 36, 16, 1, 1, 158, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="gcaron">
/* VTTTalk Unicode 0x1e7 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 243, 0, 0
OFFSET[R], 1500, -20, 0
SVTCA[Y]
CALL[], 36, 16, 1, 1, 168, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="gcircumflex">
/* VTTTalk Unicode 0x11d */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 243, 0, 0
OFFSET[R], 1499, -20, 0
SVTCA[Y]
CALL[], 40, 16, 1, 1, 168, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="gdotaccent">
/* VTTTalk Unicode 0x121 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 243, 0, 0
OFFSET[R], 1495, -22, 0
SVTCA[Y]
CALL[], 36, 16, 1, 1, 158, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="germandbls">
/* TT glyph 325, char 0xdf */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 1, 114
CALL[], 6, 51, 106
CALL[], 26, 11, 114
CALL[], 26, 33, 106
SRP2[], 6
SLOOP[], 10
IP[], 35, 23, 38, 19, 42, 16, 13, 45, 9, 48
CALL[], 56, 10, 114
SRP2[], 6
IP[], 1
MDAP[R], 1
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="grave">
/* VTTTalk Unicode 0x60 (`) */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1496, 0, 0


    </glyphProgram>

    <glyphProgram name="gravecomb">
/* TT glyph 1496, char 0x300 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="gravecomb.case">
/* TT glyph 1527, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="greater">
/* TT glyph 813, char 0x3e (&gt;) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 135, 114
CALL[], 6, 4, 106
CALL[], 4, 5, 106
CALL[], 6, 7, 106
CALL[], 7, 1, 106
CALL[], 1, 0, 106
SRP1[], 7
SRP2[], 6
IP[], 2
IP[], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="greater_colon.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 813, -954, 0
OFFSET[R], 666, 54, 180


    </glyphProgram>

    <glyphProgram name="greater_equal.liga">
/* TT glyph 1188, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 6
CALL[], 6, 4, 106
CALL[], 4, 5, 106
CALL[], 6, 7, 106
CALL[], 7, 1, 106
CALL[], 1, 0, 106
MDRP[m&gt;RWh], 9
CALL[], 9, 8, 106
SRP1[], 7
SRP2[], 6
IP[], 2
IP[], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="greater_equal_greater.liga">
/* TT glyph 1189, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 15, 132, 114
CALL[], 15, 12, 106
SRP0[], 15
MDRP[m&gt;RGr], 7
CALL[], 7, 4, 106
SMD[], 96
MDRP[m&gt;RWh], 1
SHP[2], 6
CALL[], 1, 0, 106
SHP[2], 5
SRP1[], 4
SRP2[], 15
SLOOP[], 4
IP[], 21, 9, 10, 20
SRP0[], 15
MDRP[m&gt;RWh], 18
SHP[2], 13
CALL[], 18, 19, 106
SHP[2], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="greater_greater.liga">
/* TT glyph 1190, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 135, 114
SHP[2], 14
CALL[], 6, 4, 106
SHP[2], 12
CALL[], 4, 5, 106
SHP[2], 13
CALL[], 6, 7, 106
SHP[2], 15
CALL[], 7, 1, 106
SHP[2], 9
CALL[], 1, 0, 106
SHP[2], 8
SRP1[], 7
SRP2[], 6
SLOOP[], 4
IP[], 2, 10, 11, 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="greater_greater_equal.liga">
/* TT glyph 1192, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 132, 114
CALL[], 11, 8, 106
CALL[], 11, 9, 106
SHP[2], 4
CALL[], 9, 10, 106
SHP[2], 5
SRP0[], 11
MDRP[m&gt;RGr], 16
CALL[], 16, 19, 106
SRP1[], 11
SLOOP[], 4
IP[], 7, 2, 3, 6
CALL[], 19, 15, 106
SHP[2], 1
CALL[], 15, 14, 106
SHP[2], 0
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="greater_greater_greater.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 813, -144, 0
OFFSET[R], 813, -2266, 0
OFFSET[R], 813, -1200, 0


    </glyphProgram>

    <glyphProgram name="greater_greater_hyphen.liga">
/* TT glyph 1191, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 131, 114
CALL[], 6, 4, 106
SHP[2], 14
CALL[], 4, 5, 106
SHP[2], 15
CALL[], 6, 9, 106
CALL[], 9, 1, 106
SHP[2], 11
CALL[], 1, 0, 106
SHP[2], 10
SRP1[], 9
SRP2[], 6
SLOOP[], 6
IP[], 17, 12, 2, 3, 13, 16
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="greater_hyphen.liga">
/* TT glyph 1185, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 131, 114
CALL[], 6, 4, 106
CALL[], 4, 5, 106
CALL[], 6, 9, 106
CALL[], 9, 1, 106
CALL[], 1, 0, 106
SRP1[], 9
SRP2[], 6
IP[], 2
IP[], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="greater_hyphen_greater.liga">
/* TT glyph 1186, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 16, 131, 114
CALL[], 16, 7, 106
CALL[], 7, 1, 105
SHP[2], 10
CALL[], 1, 0, 106
SHP[2], 9
SRP1[], 7
SRP2[], 16
SLOOP[], 4
IP[], 25, 11, 12, 24
CALL[], 16, 22, 105
SHP[2], 13
CALL[], 22, 23, 106
SHP[2], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="greaterequal">
/* TT glyph 815, char 0x2265 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 6
CALL[], 6, 4, 106
CALL[], 4, 5, 106
CALL[], 6, 7, 106
CALL[], 7, 1, 106
CALL[], 1, 0, 106
CALL[], 0, 9, 105
CALL[], 9, 8, 106
SRP1[], 6
SRP2[], 7
IP[], 3
IP[], 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="guillemotleft">
/* TT glyph 703, char 0xab */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 3
CALL[], 3, 0, 105
CALL[], 0, 7, 106
SHP[2], 15
SHP[1], 8
CALL[], 3, 4, 106
SHP[2], 12
SHP[1], 11
SRP1[], 8
SRP2[], 11
SLOOP[], 8
IP[], 1, 9, 6, 14, 13, 5, 10, 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="guillemotright">
/* TT glyph 704, char 0xbb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 5
SHP[1], 13
CALL[], 5, 0, 105
SHP[2], 8
CALL[], 0, 1, 106
SHP[2], 9
SRP2[], 5
SLOOP[], 8
IP[], 7, 15, 10, 2, 3, 11, 14, 6
CALL[], 5, 4, 106
SHP[2], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="guilsinglleft">
/* TT glyph 705, char 0x2039 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 3
CALL[], 3, 4, 106
CALL[], 3, 0, 105
CALL[], 0, 7, 106
SRP2[], 3
SLOOP[], 4
IP[], 1, 6, 5, 2
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="guilsinglright">
/* TT glyph 706, char 0x203a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 5
CALL[], 5, 4, 106
CALL[], 5, 0, 105
CALL[], 0, 1, 106
SRP2[], 5
SLOOP[], 4
IP[], 7, 2, 3, 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="h">
/* TT glyph 249, char 0x68 (h) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 11
CALL[], 1, 0, 114
CALL[], 6, 7, 114
SHP[2], 4
CALL[], 6, 15, 106
SHP[2], 17
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hbar">
/* TT glyph 250, char 0x127 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 19
CALL[], 5, 0, 114
CALL[], 14, 7, 114
SHP[2], 11
SRP2[], 5
IP[], 10
MDAP[R], 10
SHP[1], 2
CALL[], 10, 7, 106
SHP[2], 3
CALL[], 14, 23, 106
SHP[2], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hcircumflex">
/* VTTTalk Unicode 0x125 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 249, 0, 0
OFFSET[R], 1530, -326, 80
SVTCA[Y]
CALL[], 23, 1, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="heart">
/* TT glyph 1108, char 0x2665 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 14
SHP[1], 7
CALL[], 14, 0, 106
IP[], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hookabovecomb">
/* TT glyph 1505, char 0x309 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 23
CALL[], 0, 8, 105
CALL[], 8, 14, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hookabovecomb.case">
/* TT glyph 1536, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 8, 105
SHP[2], 10
CALL[], 8, 13, 106
SHP[2], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hungarumlaut">
/* VTTTalk Unicode 0x2dd */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1498, 0, 0

    </glyphProgram>

    <glyphProgram name="hyphen">
/* VTTTalk Unicode 0x2d (-) */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 808, 0, 0


    </glyphProgram>

    <glyphProgram name="hyphen_asciitilde.liga">
/* TT glyph 717, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 131, 114
CALL[], 1, 0, 106
SMD[], 96
SRP0[], 1
MDRP[m&gt;RGr], 4
CALL[], 4, 24, 106
SHP[1], 13
MDAP[R], 13
CALL[], 13, 10, 105
CALL[], 10, 18, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hyphen_bar.liga">
/* TT glyph 712, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 131, 114
CALL[], 3, 2, 106
CALL[], 5, 133, 114
CALL[], 5, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hyphen_greater.liga">
/* TT glyph 713, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 9, 131, 114
CALL[], 9, 8, 106
CALL[], 8, 1, 105
CALL[], 1, 0, 106
SRP1[], 8
SRP2[], 9
IP[], 19
IP[], 18
CALL[], 9, 16, 105
CALL[], 16, 17, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hyphen_greater_greater.liga">
/* TT glyph 714, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 17, 131, 114
CALL[], 17, 16, 106
SLOOP[], 6
IP[], 27, 7, 2, 3, 6, 26
CALL[], 16, 9, 105
SHP[2], 1
CALL[], 9, 8, 106
SHP[2], 0
CALL[], 17, 24, 105
SHP[2], 4
CALL[], 24, 25, 106
SHP[2], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hyphen_hyphen.liga">
/* TT glyph 709, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 131, 114
SHP[2], 1
CALL[], 5, 4, 106
SHP[2], 0
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hyphen_hyphen_greater.liga">
/* TT glyph 711, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 9, 131, 114
CALL[], 9, 8, 106
CALL[], 8, 1, 105
CALL[], 1, 0, 106
SRP1[], 8
SRP2[], 9
IP[], 19
IP[], 18
CALL[], 9, 16, 105
CALL[], 16, 17, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="hyphen_hyphen_hyphen.liga">
/* TT glyph 710, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 131, 114
CALL[], 5, 4, 106
SHP[2], 8
SRP1[], 8
SHP[1], 0
SRP1[], 5
SHP[1], 9
SRP1[], 9
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hyphen_less.liga">
/* TT glyph 715, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 131, 114
CALL[], 3, 2, 106
IP[], 8
IP[], 7
CALL[], 2, 9, 105
CALL[], 9, 0, 106
CALL[], 3, 6, 105
CALL[], 6, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="hyphen_less_less.liga">
/* TT glyph 716, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 131, 114
CALL[], 11, 10, 106
SLOOP[], 6
IP[], 1, 6, 16, 15, 5, 2
CALL[], 10, 17, 105
SHP[2], 7
CALL[], 17, 8, 106
SHP[2], 0
CALL[], 11, 14, 105
SHP[2], 4
CALL[], 14, 13, 106
SHP[2], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="i">
/* TT glyph 252, char 0x69 (i) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 12, 10, 114
CALL[], 12, 13, 106
SHP[2], 19
CALL[], 17, 6, 114
CALL[], 17, 16, 106
SMD[], 96
SRP0[], 17
MDRP[m&gt;RWh], 0
CALL[], 0, 6, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="iacute">
/* VTTTalk Unicode 0xed */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1497, 80, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="iacute_j.loclNLD">
/* TT glyph 372, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 8, 10, 114
CALL[], 9, 6, 114
SHP[2], 18
SMD[], 96
MDRP[m&gt;RWh], 0
SHP[2], 4
CALL[], 0, 1, 106
SHP[2], 5
CALL[], 12, 15, 114
CALL[], 12, 13, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ibreve">
/* VTTTalk Unicode 0x12d */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1501, 50, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 178, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="icircumflex">
/* VTTTalk Unicode 0xee */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1499, 50, 0
SVTCA[Y]
CALL[], 14, 5, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="idieresis">
/* VTTTalk Unicode 0xef */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1494, 52, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="igrave">
/* VTTTalk Unicode 0xec */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1496, 95, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="ij">
/* TT glyph 261, char 0x133 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 24, 10, 114
CALL[], 25, 6, 114
SHP[2], 34
SMD[], 96
MDRP[m&gt;RWh], 0
SHP[2], 12
CALL[], 0, 6, 106
SHP[2], 18
CALL[], 28, 15, 114
CALL[], 28, 29, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="imacron">
/* VTTTalk Unicode 0x12b */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1504, 50, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 188, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="infinity">
/* TT glyph 822, char 0x221e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 6
SHP[1], 12
CALL[], 6, 28, 106
SHP[2], 40
CALL[], 28, 22, 105
SHP[2], 34
CALL[], 22, 0, 106
SHP[2], 18
SRP1[], 6
IP[], 20
IP[], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="integral">
/* TT glyph 824, char 0x222b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 0, 1, 106
CALL[], 8, 3, 114
CALL[], 8, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="integralbt">
/* TT glyph 804, char 0x2321 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 0, 1, 106
CALL[], 0, 6, 105
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="integraltp">
/* TT glyph 805, char 0x2320 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 3, 114
CALL[], 3, 0, 105
SHP[1], 5
CALL[], 3, 9, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="intersection">
/* TT glyph 823, char 0x2229 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 3, 7, 114
CALL[], 3, 10, 106
SRP1[], 0
SHP[1], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="invbullet">
/* TT glyph 894, char 0x25d8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="invcircle">
/* TT glyph 895, char 0x25d9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="invsmileface">
/* TT glyph 1556, char 0x263b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 8
CALL[], 8, 0, 105
CALL[], 0, 40, 106
SRP1[], 8
SLOOP[], 3
IP[], 49, 16, 22
SRP1[], 16
SHP[1], 28
SRP1[], 22
SHP[1], 34
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="iogonek">
/* TT glyph 263, char 0x12f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 17, 6, 114
CALL[], 17, 16, 106
SRP0[], 17
MDRP[m&gt;RWh], 0
CALL[], 0, 6, 106
CALL[], 22, 10, 114
SHP[2], 12
CALL[], 22, 19, 106
SHP[2], 13
SMD[], 96
SRP0[], 22
MDRP[m&gt;RWh], 27
CALL[], 27, 32, 106
SHP[2], 30
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="iota">
/* TT glyph 576, char 0x3b9 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 11, 106
CALL[], 6, 6, 114
CALL[], 6, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="iotadieresis">
/* VTTTalk Unicode 0x3ca */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 576, 0, 0
OFFSET[R], 1494, -62, 0
SVTCA[Y]
CALL[], 17, 6, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="iotadieresistonos">
/* VTTTalk Unicode 0x390 */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 576, 0, 0
OFFSET[R], 1543, -42, 0
SVTCA[Y]
CALL[], 21, 6, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="iotatonos">
/* VTTTalk Unicode 0x3af */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 576, 0, 0
OFFSET[R], 1541, -34, 0
SVTCA[Y]
CALL[], 17, 6, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="itilde">
/* VTTTalk Unicode 0x129 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1503, 60, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 166, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="j">
/* TT glyph 265, char 0x6a (j) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 12, 15, 114
CALL[], 12, 13, 106
CALL[], 20, 6, 114
CALL[], 20, 19, 106
SMD[], 96
SRP0[], 20
MDRP[m&gt;RWh], 0
CALL[], 0, 6, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="jcircumflex">
/* VTTTalk Unicode 0x135 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 266, 0, 0
OFFSET[R], 1499, 182, 0
SVTCA[Y]
CALL[], 19, 8, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="k">
/* TT glyph 268, char 0x6b (k) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 13
CALL[], 1, 0, 114
CALL[], 8, 6, 114
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 17, 106
IP[], 11
IP[], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="kappa">
/* TT glyph 577, char 0x3ba */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 12
CALL[], 1, 6, 114
SRP1[], 0
IP[], 3
MDAP[R], 3
SLOOP[], 3
IP[], 7, 10, 13
CALL[], 8, 7, 114
CALL[], 8, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="kgreenlandic">
/* TT glyph 270, char 0x138 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 13
CALL[], 1, 6, 114
SHP[2], 9
SRP1[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 17, 106
IP[], 14
IP[], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="l">
/* TT glyph 271, char 0x6c (l) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 12, 106
CALL[], 6, 0, 114
CALL[], 6, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lacute">
/* VTTTalk Unicode 0x13a */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 271, 0, 0
OFFSET[R], 1528, -94, 80
SVTCA[Y]
CALL[], 18, 6, 1, 1, 160, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="lambda">
/* TT glyph 578, char 0x3bb */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 10, 1, 114
CALL[], 10, 5, 106
CALL[], 22, 11, 114
CALL[], 22, 17, 106
SRP2[], 10
SLOOP[], 5
IP[], 31, 29, 27, 26, 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lcaron">
/* TT glyph 273, char 0x13e */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 11, 114
CALL[], 4, 16, 106
CALL[], 10, 0, 114
CALL[], 10, 9, 106
SRP2[], 4
IP[], 0
MDAP[R], 0
CALL[], 0, 2, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ldot">
/* VTTTalk Unicode 0x140 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 271, 0, 0
OFFSET[R], 673, 316, 300
SVTCA[Y]
CALL[], 18, 12, 1, 1, 692, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="less">
/* TT glyph 814, char 0x3c (&lt;) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 135, 114
CALL[], 2, 1, 106
IP[], 6
IP[], 5
CALL[], 1, 7, 106
CALL[], 7, 0, 106
CALL[], 2, 4, 106
CALL[], 4, 3, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_asciitilde.liga">
/* TT glyph 1220, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 10, 131, 114
CALL[], 10, 4, 105
CALL[], 4, 3, 106
CALL[], 10, 13, 105
CALL[], 13, 42, 106
CALL[], 10, 18, 105
CALL[], 18, 37, 106
CALL[], 10, 24, 105
CALL[], 24, 27, 105
CALL[], 24, 31, 106
CALL[], 10, 45, 106
IP[], 1
IP[], 2
CALL[], 45, 51, 105
CALL[], 51, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_asciitilde_asciitilde.liga">
/* TT glyph 1222, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 49, 131, 114
CALL[], 49, 32, 106
CALL[], 32, 38, 105
CALL[], 38, 39, 106
SRP1[], 32
SRP2[], 49
IP[], 40
IP[], 41
CALL[], 49, 43, 105
CALL[], 43, 42, 106
CALL[], 49, 53, 105
CALL[], 53, 28, 106
CALL[], 49, 58, 105
CALL[], 58, 23, 106
CALL[], 49, 64, 105
CALL[], 64, 17, 106
CALL[], 49, 70, 105
CALL[], 70, 11, 106
CALL[], 49, 76, 105
CALL[], 76, 1, 105
CALL[], 76, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_asciitilde_greater.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 813, -144, 0
OFFSET[R], 814, -2236, 0
OFFSET[R], 819, -1190, 0


    </glyphProgram>

    <glyphProgram name="less_asterisk.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 814, -1036, 0
OFFSET[R], 675, -100, 0

    </glyphProgram>

    <glyphProgram name="less_asterisk_greater.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 813, -144, 0
OFFSET[R], 814, -2236, 0
OFFSET[R], 675, -1190, 0


    </glyphProgram>

    <glyphProgram name="less_bar.liga">
/* TT glyph 1202, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 135, 114
CALL[], 2, 1, 106
CALL[], 1, 0, 106
CALL[], 2, 3, 106
SRP1[], 0
SLOOP[], 4
IP[], 5, 4, 7, 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_bar_bar.liga">
/* TT glyph 1203, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 133, 114
CALL[], 1, 3, 106
CALL[], 6, 135, 114
CALL[], 6, 5, 106
CALL[], 5, 4, 106
CALL[], 6, 7, 106
SRP1[], 4
SLOOP[], 4
IP[], 10, 11, 8, 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_bar_bar_bar.liga">
/* TT glyph 1204, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 133, 114
SHP[2], 5
CALL[], 1, 3, 106
SHP[2], 4
CALL[], 10, 135, 114
CALL[], 10, 9, 106
CALL[], 9, 8, 106
CALL[], 10, 11, 106
SRP1[], 8
SLOOP[], 4
IP[], 13, 12, 15, 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_bar_greater.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 813, -144, 0
OFFSET[R], 814, -2236, 0
OFFSET[R], 1124, -1190, 0

    </glyphProgram>

    <glyphProgram name="less_colon.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 814, -882, 0
OFFSET[R], 666, 58, 180


    </glyphProgram>

    <glyphProgram name="less_dollar.liga">
/* TT glyph 1206, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 135, 114
CALL[], 3, 2, 106
IP[], 7
IP[], 6
CALL[], 3, 5, 106
CALL[], 5, 4, 106
CALL[], 16, 17, 114
SMD[], 96
MDRP[m&gt;RBl], 17
SHP[1], 19
SRP1[], 19
SHP[1], 22
CALL[], 16, 36, 106
SHP[2], 25
SRP1[], 25
SHP[1], 23
CALL[], 32, 19, 114
SHP[2], 1
MDRP[m&gt;RBl], 33
SRP2[], 16
SLOOP[], 12
IP[], 38, 13, 34, 35, 26, 27, 10, 9, 42, 41, 30, 45
CALL[], 32, 43, 106
SHP[2], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_dollar_greater.liga">
/* TT glyph 1207, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 19, 114
SMD[], 96
MDRP[m&gt;RBl], 13
SHP[1], 14
CALL[], 11, 44, 106
SHP[2], 21
CALL[], 16, 135, 114
CALL[], 16, 15, 106
CALL[], 16, 18, 106
CALL[], 18, 17, 106
CALL[], 29, 17, 114
MDRP[m&gt;RBl], 31
SHP[1], 32
SRP2[], 11
SLOOP[], 12
IP[], 46, 9, 42, 43, 22, 23, 6, 5, 36, 35, 26, 39
CALL[], 29, 37, 106
SHP[2], 4
CALL[], 33, 135, 114
CALL[], 33, 34, 106
CALL[], 34, 1, 106
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_equal.liga">
/* TT glyph 1210, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 2
CALL[], 2, 1, 106
IP[], 6
IP[], 5
CALL[], 1, 7, 106
CALL[], 7, 0, 106
MDRP[M&gt;RWh], 10
MDRP[m&gt;RBl], 8
CALL[], 2, 4, 106
CALL[], 4, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_equal_equal.liga">
/* TT glyph 1211, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 132, 114
CALL[], 7, 8, 106
SMD[], 96
SRP0[], 7
MDRP[m&gt;RWh], 4
CALL[], 4, 3, 106
SMD[], 64
SRP0[], 7
MDRP[m&gt;RWh], 13
CALL[], 13, 14, 106
SRP1[], 7
SLOOP[], 4
IP[], 1, 11, 10, 2
SMD[], 96
MDRP[m&gt;RWh], 17
CALL[], 17, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_equal_equal_greater.liga">
/* TT glyph 1212, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MIAP[R], 13, 16
SMD[], 96
MDRP[m&gt;RWh], 11
SHP[2], 16
CALL[], 11, 10, 106
SHP[2], 17
SMD[], 64
SRP0[], 13
MDRP[m&gt;RGr], 21
CALL[], 21, 4, 106
SMD[], 96
MDRP[m&gt;RWh], 6
SHP[2], 1
CALL[], 6, 7, 106
SHP[2], 0
CALL[], 13, 26, 106
SRP1[], 21
SLOOP[], 8
IP[], 8, 19, 23, 20, 27, 24, 18, 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_equal_greater.liga">
/* TT glyph 1213, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 13, 132, 114
SMD[], 96
MDRP[m&gt;RWh], 11
SHP[2], 16
CALL[], 11, 10, 106
SHP[2], 17
SMD[], 64
SRP0[], 13
MDRP[m&gt;RGr], 21
CALL[], 21, 4, 106
SMD[], 96
MDRP[m&gt;RWh], 6
SHP[2], 1
CALL[], 6, 7, 106
SHP[2], 0
CALL[], 13, 26, 106
SRP1[], 21
SLOOP[], 8
IP[], 8, 19, 23, 20, 27, 24, 18, 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_equal_less.liga">
/* TT glyph 1214, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 12, 132, 114
CALL[], 12, 15, 106
SMD[], 96
SRP0[], 12
MDRP[m&gt;RWh], 9
SHP[2], 14
CALL[], 9, 8, 106
SHP[2], 13
SMD[], 64
SRP0[], 12
MDRP[m&gt;RGr], 20
CALL[], 20, 1, 106
SMD[], 96
MDRP[m&gt;RWh], 4
SHP[2], 21
CALL[], 4, 5, 106
SHP[2], 0
SRP1[], 1
SRP2[], 12
SLOOP[], 4
IP[], 6, 18, 17, 7
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_exclam_hyphen_hyphen.liga">
/* TT glyph 1199, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 16, 114
CALL[], 25, 131, 114
SHP[2], 15
CALL[], 15, 8, 105
CALL[], 8, 7, 106
CALL[], 25, 24, 106
SHP[2], 16
SRP1[], 16
SRP2[], 15
IP[], 5
IP[], 6
CALL[], 16, 23, 105
CALL[], 23, 4, 106
CALL[], 28, 19, 114
CALL[], 28, 34, 106
CALL[], 34, 0, 105
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_greater.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 814, -1044, 0
OFFSET[R], 813, -136, 0

    </glyphProgram>

    <glyphProgram name="less_hyphen.liga">
/* TT glyph 1194, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 131, 114
CALL[], 11, 4, 105
CALL[], 4, 3, 106
CALL[], 11, 12, 106
IP[], 1
IP[], 2
CALL[], 12, 19, 105
CALL[], 19, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_hyphen_greater.liga">
/* TT glyph 1196, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 26, 131, 114
CALL[], 26, 7, 106
CALL[], 7, 1, 105
SHP[2], 14
CALL[], 1, 0, 106
SHP[2], 15
SRP1[], 7
SRP2[], 26
SLOOP[], 4
IP[], 35, 16, 17, 34
CALL[], 26, 32, 105
SHP[2], 19
CALL[], 32, 33, 106
SHP[2], 18
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_hyphen_hyphen.liga">
/* TT glyph 1195, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 131, 114
CALL[], 11, 4, 105
CALL[], 4, 3, 106
CALL[], 11, 12, 106
IP[], 1
IP[], 2
CALL[], 12, 19, 105
CALL[], 19, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_hyphen_less.liga">
/* TT glyph 1197, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 20, 131, 114
CALL[], 20, 1, 106
SLOOP[], 4
IP[], 10, 24, 23, 11
CALL[], 1, 25, 106
SHP[2], 8
CALL[], 25, 0, 106
SHP[2], 9
CALL[], 20, 22, 106
SHP[2], 13
CALL[], 22, 21, 106
SHP[2], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_less.liga">
/* TT glyph 1216, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 135, 114
SHP[2], 10
CALL[], 2, 1, 106
SHP[2], 9
SLOOP[], 4
IP[], 14, 6, 5, 13
CALL[], 1, 7, 106
SHP[2], 15
CALL[], 7, 0, 106
SHP[2], 8
CALL[], 2, 4, 106
SHP[2], 12
CALL[], 4, 3, 106
SHP[2], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_less_equal.liga">
/* TT glyph 1218, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 132, 114
CALL[], 7, 8, 106
SMD[], 96
SRP0[], 7
MDRP[m&gt;RWh], 4
SHP[2], 22
CALL[], 4, 3, 106
SHP[2], 21
SMD[], 64
SRP0[], 7
MDRP[m&gt;RWh], 13
CALL[], 13, 14, 106
SRP1[], 7
SLOOP[], 8
IP[], 19, 1, 11, 24, 23, 10, 2, 20
SMD[], 96
MDRP[m&gt;RWh], 17
SHP[2], 25
CALL[], 17, 0, 106
SHP[2], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_less_hyphen.liga">
/* TT glyph 1217, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 131, 114
CALL[], 11, 4, 105
SHP[2], 24
CALL[], 4, 3, 106
SHP[2], 23
CALL[], 11, 12, 106
SLOOP[], 6
IP[], 1, 21, 26, 25, 22, 2
CALL[], 12, 19, 105
SHP[2], 27
CALL[], 19, 0, 106
SHP[2], 20
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="less_less_less.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 814, -134, 0
OFFSET[R], 814, -2236, 0
OFFSET[R], 814, -1180, 0


    </glyphProgram>

    <glyphProgram name="less_plus.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 814, -1036, 0
OFFSET[R], 807, -180, 0

    </glyphProgram>

    <glyphProgram name="less_plus_greater.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 813, -144, 0
OFFSET[R], 814, -2236, 0
OFFSET[R], 807, -1190, 0


    </glyphProgram>

    <glyphProgram name="less_slash.liga">
/* TT glyph 1223, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 135, 114
CALL[], 3, 2, 106
IP[], 7
IP[], 6
CALL[], 3, 5, 106
CALL[], 5, 4, 106
CALL[], 9, 136, 114
CALL[], 9, 0, 105
IP[], 1
IP[], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="less_slash_greater.liga">
/* TT glyph 1224, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 9, 135, 114
SHP[2], 18
CALL[], 9, 8, 106
SLOOP[], 4
IP[], 3, 12, 13, 2
SHP[2], 19
CALL[], 19, 1, 106
CALL[], 1, 0, 106
CALL[], 9, 11, 106
CALL[], 11, 10, 106
CALL[], 15, 136, 114
CALL[], 15, 5, 106
SLOOP[], 4
IP[], 7, 14, 4, 17
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="lessequal">
/* TT glyph 816, char 0x2264 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 2
CALL[], 2, 1, 106
IP[], 6
IP[], 5
CALL[], 1, 7, 106
CALL[], 7, 0, 106
CALL[], 0, 10, 105
CALL[], 10, 11, 106
CALL[], 2, 4, 106
CALL[], 4, 3, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lfblock">
/* TT glyph 855, char 0x258c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="lira">
/* TT glyph 785, char 0x20a4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 1, 106
SHP[2], 40
CALL[], 17, 3, 114
SHP[2], 20
SRP2[], 0
IP[], 5
IP[], 12
MDAP[R], 5
MDAP[R], 12
SRP2[], 5
IP[], 6
IP[], 11
SHP[2], 36
SRP1[], 6
SHP[1], 35
SRP1[], 11
SHP[1], 30
SRP1[], 12
SHP[1], 29
CALL[], 17, 24, 106
SHP[2], 21
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="logicalnot">
/* TT glyph 820, char 0xac */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 0, 106
CALL[], 1, 3, 105
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="longs">
/* TT glyph 326, char 0x17f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 7, 1, 114
CALL[], 7, 13, 106
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 2, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lozenge">
/* TT glyph 911, char 0x25ca */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 2, 114
CALL[], 2, 8, 114
SRP2[], 0
IP[], 6
IP[], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="lslash">
/* TT glyph 276, char 0x142 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 5, 0, 114
CALL[], 5, 4, 106
CALL[], 21, 11, 114
CALL[], 21, 15, 106
SRP2[], 5
IP[], 1
CALL[], 1, 0, 106
SHP[2], 9
SHP[1], 8
SRP1[], 8
SLOOP[], 4
IP[], 7, 2, 10, 25
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ltshade">
/* TT glyph 871, char 0x2591 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="m">
/* TT glyph 277, char 0x6d (m) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 25
SRP1[], 25
SHP[1], 18
CALL[], 1, 6, 114
CALL[], 6, 7, 114
SHP[2], 3
SHP[2], 13
SRP1[], 13
SHP[1], 10
CALL[], 6, 28, 106
SHP[2], 30
SHP[2], 21
SRP1[], 21
SHP[1], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="macron">
/* VTTTalk Unicode 0xaf */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1504, 0, 0


    </glyphProgram>

    <glyphProgram name="male">
/* TT glyph 1105, char 0x2642 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 27, 106
CALL[], 14, 2, 114
CALL[], 14, 13, 106
SRP2[], 0
IP[], 6
MDAP[R], 6
SRP2[], 14
IP[], 10
IP[], 21
CALL[], 6, 33, 106
IP[], 17
MDAP[R], 17
SRP2[], 6
IP[], 22
IP[], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="minus">
/* TT glyph 808, char 0x2212 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 131, 114
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="minute">
/* TT glyph 1122, char 0x2032 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 16, 114
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="multiply">
/* TT glyph 809, char 0xd7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 4
SHP[1], 6
CALL[], 4, 0, 105
SHP[2], 10
SRP2[], 10
SLOOP[], 8
IP[], 1, 9, 11, 8, 2, 5, 3, 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="musicalnote">
/* TT glyph 1232, char 0x266a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 4, 106
IP[], 17
IP[], 6
CALL[], 7, 2, 114
CALL[], 7, 16, 106
SRP2[], 0
IP[], 11
IP[], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="musicalnotedbl">
/* TT glyph 1558, char 0x266b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 6, 106
IP[], 27
IP[], 8
CALL[], 0, 12, 105
CALL[], 12, 25, 106
SRP2[], 0
IP[], 16
MDAP[R], 16
CALL[], 16, 22, 106
IP[], 13
IP[], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="n">
/* TT glyph 278, char 0x6e (n) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 11
CALL[], 1, 6, 114
CALL[], 6, 7, 114
SHP[2], 4
CALL[], 6, 15, 106
SHP[2], 17
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="nacute">
/* VTTTalk Unicode 0x144 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 278, 0, 0
OFFSET[R], 1497, 20, 0
SVTCA[Y]
CALL[], 19, 6, 1, 1, 168, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="nacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 278, 0, 0
OFFSET[R], 1539, 20, 0
SVTCA[Y]
CALL[], 19, 6, 1, 1, 168, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="napostrophe">
/* TT glyph 280, char 0x149 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 10, 114
SHP[2], 15
CALL[], 5, 6, 114
CALL[], 5, 0, 105
CALL[], 0, 1, 106
CALL[], 10, 7, 114
SHP[2], 8
CALL[], 10, 19, 106
SHP[2], 21
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ncaron">
/* VTTTalk Unicode 0x148 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 278, 0, 0
OFFSET[R], 1500, -10, 0
SVTCA[Y]
CALL[], 19, 6, 1, 1, 168, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="nine">
/* TT glyph 614, char 0x39 (9) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 0, 1, 106
CALL[], 13, 5, 114
CALL[], 13, 25, 106
SRP2[], 0
IP[], 7
MDAP[R], 7
SHP[1], 4
CALL[], 7, 20, 106
SHP[2], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="nine.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 655, 0, -805

    </glyphProgram>

    <glyphProgram name="nine.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 655, 0, 0






    </glyphProgram>

    <glyphProgram name="notequal">
/* TT glyph 812, char 0x2260 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 7, 132, 114
SHP[2], 12
CALL[], 7, 3, 105
SHP[2], 16
CALL[], 3, 2, 106
SHP[2], 17
CALL[], 7, 6, 106
SHP[2], 13
CALL[], 9, 2, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ntilde">
/* VTTTalk Unicode 0xf1 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 278, 0, 0
OFFSET[R], 1503, 0, 0
SVTCA[Y]
CALL[], 19, 1, 1, 1, 166, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="nu">
/* TT glyph 580, char 0x3bd */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 6, 7, 114
CALL[], 6, 5, 106
CALL[], 13, 6, 114
SRP1[], 0
IP[], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="numbersign">
/* TT glyph 677, char 0x23 (#) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 24
CALL[], 9, 2, 114
SHP[2], 14
SRP1[], 0
IP[], 31
IP[], 3
MDAP[R], 31
MDAP[R], 3
SRP1[], 31
SHP[1], 6
SHP[1], 18
CALL[], 31, 11, 106
SHP[2], 7
SHP[2], 15
SRP1[], 3
SHP[1], 19
SHP[1], 28
CALL[], 3, 2, 106
SHP[2], 22
SHP[2], 26
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="numbersign_braceleft.liga">
/* TT glyph 749, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 18, 114
SHP[2], 0
CALL[], 13, 16, 114
SHP[2], 17
SRP1[], 4
IP[], 9
IP[], 8
MDAP[R], 9
MDAP[R], 8
SRP2[], 9
SLOOP[], 4
IP[], 72, 42, 43, 83
CALL[], 9, 12, 106
SHP[2], 16
SRP1[], 16
SHP[1], 19
SRP1[], 9
SHP[1], 70
SRP1[], 70
SHP[1], 77
CALL[], 8, 5, 106
SHP[2], 1
SRP1[], 1
SHP[1], 66
SRP1[], 8
SHP[1], 69
SRP1[], 69
SHP[1], 78
CALL[], 26, 138, 114
CALL[], 26, 33, 106
CALL[], 26, 59, 105
CALL[], 59, 52, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="numbersign_bracketleft.liga">
/* TT glyph 750, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 18, 114
SHP[2], 0
CALL[], 13, 16, 114
SHP[2], 17
SRP2[], 4
IP[], 8
IP[], 9
MDAP[R], 8
MDAP[R], 9
CALL[], 8, 5, 106
SHP[2], 2
SRP1[], 2
SHP[1], 30
SRP1[], 8
SHP[1], 32
SRP1[], 32
SHP[1], 36
CALL[], 9, 12, 106
SHP[2], 15
SRP1[], 15
SHP[1], 19
SRP1[], 9
SHP[1], 35
CALL[], 35, 39, 105
CALL[], 22, 137, 114
CALL[], 22, 23, 106
CALL[], 22, 27, 105
CALL[], 27, 26, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="numbersign_colon.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 677, -1040, 0
OFFSET[R], 666, 22, 180

    </glyphProgram>

    <glyphProgram name="numbersign_equal.liga">
/* TT glyph 755, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 18, 114
SHP[2], 0
CALL[], 13, 16, 114
SHP[2], 17
SRP2[], 4
IP[], 8
IP[], 9
MDAP[R], 8
MDAP[R], 9
CALL[], 8, 5, 106
SHP[2], 2
SRP1[], 2
SHP[1], 26
SRP1[], 26
SHP[1], 36
SRP1[], 8
SHP[1], 32
SRP1[], 32
SHP[1], 23
SRP1[], 23
SHP[1], 37
CALL[], 9, 12, 106
SHP[2], 15
SRP1[], 15
SHP[1], 19
SRP1[], 19
SHP[1], 29
SRP1[], 9
SHP[1], 35
SRP1[], 35
SHP[1], 22
SRP1[], 22
SHP[1], 28
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="numbersign_exclam.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 677, -1040, 0
OFFSET[R], 669, 22, 0

    </glyphProgram>

    <glyphProgram name="numbersign_numbersign.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 677, -1040, 0
OFFSET[R], 677, -200, 0

    </glyphProgram>

    <glyphProgram name="numbersign_parenleft.liga">
/* TT glyph 748, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 18, 114
SHP[2], 0
CALL[], 13, 16, 114
SHP[2], 17
SRP2[], 4
IP[], 8
IP[], 9
MDAP[R], 8
MDAP[R], 9
CALL[], 8, 5, 106
SHP[2], 1
SRP1[], 1
SHP[1], 39
SRP1[], 8
SHP[1], 42
SRP1[], 42
SHP[1], 49
CALL[], 9, 12, 106
SHP[2], 16
SRP1[], 16
SHP[1], 19
SRP1[], 9
SHP[1], 43
SRP1[], 43
SHP[1], 48
CALL[], 23, 138, 114
CALL[], 23, 25, 106
CALL[], 23, 35, 105
CALL[], 35, 32, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="numbersign_question.liga">
/* TT glyph 753, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 18, 114
SHP[2], 0
CALL[], 13, 16, 114
SHP[2], 17
SRP2[], 4
IP[], 8
IP[], 9
MDAP[R], 8
MDAP[R], 9
CALL[], 8, 5, 106
SHP[2], 2
SRP1[], 2
SHP[1], 49
SRP1[], 8
SHP[1], 51
SRP1[], 51
SHP[1], 46
CALL[], 9, 12, 106
SHP[2], 15
SRP1[], 15
SHP[1], 19
SRP1[], 19
SHP[1], 43
SRP1[], 9
SHP[1], 54
SRP1[], 54
SHP[1], 45
CALL[], 23, 17, 114
CALL[], 23, 40, 106
CALL[], 55, 19, 114
CALL[], 55, 61, 106
CALL[], 61, 32, 105
SRP1[], 40
SLOOP[], 4
IP[], 28, 35, 37, 26
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="numbersign_underscore.liga">
/* TT glyph 756, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 18, 114
CALL[], 4, 0, 105
SHP[1], 27
CALL[], 13, 16, 114
SHP[2], 17
SRP2[], 4
IP[], 7
IP[], 10
MDAP[R], 7
MDAP[R], 10
CALL[], 7, 6, 106
SHP[2], 1
SRP1[], 1
SHP[1], 25
SRP1[], 7
SHP[1], 31
SRP1[], 31
SHP[1], 24
CALL[], 10, 11, 106
SHP[2], 16
SRP1[], 16
SHP[1], 20
SRP1[], 10
SHP[1], 32
SRP1[], 32
SHP[1], 21
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="numbersign_underscore_parenleft.liga">
/* TT glyph 381, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */


    </glyphProgram>

    <glyphProgram name="o">
/* TT glyph 286, char 0x6f (o) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 6, 7, 114
CALL[], 6, 18, 106
CALL[], 0, 12, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="oacute">
/* VTTTalk Unicode 0xf3 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1497, 30, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="oacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1539, 30, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="obreve">
/* VTTTalk Unicode 0x14f */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1501, 0, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 158, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ocircumflex">
/* VTTTalk Unicode 0xf4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1499, 0, 0
SVTCA[Y]
CALL[], 28, 6, 1, 1, 168, 86
SHC[2], 2




    </glyphProgram>

    <glyphProgram name="odieresis">
/* VTTTalk Unicode 0xf6 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1494, 2, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 158, 86
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="oe">
/* TT glyph 311, char 0x153 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 35, 106
SHP[1], 24
CALL[], 24, 18, 106
CALL[], 4, 7, 114
CALL[], 4, 39, 106
SRP2[], 0
IP[], 15
MDAP[R], 15
SRP2[], 4
IP[], 6
SRP2[], 0
IP[], 26
CALL[], 15, 31, 106
SHP[2], 11
SRP1[], 4
SHP[1], 8
CALL[], 8, 28, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ogonek">
/* VTTTalk Unicode 0x2db */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1511, 0, 0

    </glyphProgram>

    <glyphProgram name="ograve">
/* VTTTalk Unicode 0xf2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1496, 45, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="ohorn">
/* VTTTalk Unicode 0x1a1 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1507, 300, 0
SVTCA[Y]
CALL[], 24, 6, 0, 0, -185, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="ohungarumlaut">
/* VTTTalk Unicode 0x151 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1498, 70, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 168, 86
SHC[2], 2
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="omacron">
/* VTTTalk Unicode 0x14d */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1504, 0, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="omega">
/* TT glyph 592, char 0x3c9 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 27
CALL[], 0, 9, 106
SHP[2], 18
CALL[], 4, 6, 114
SHP[2], 22
SRP1[], 22
SRP2[], 0
IP[], 14
MDAP[R], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="omegatonos">
/* VTTTalk Unicode 0x3ce */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 592, 0, 0
OFFSET[R], 1541, 30, 0
SVTCA[Y]
CALL[], 34, 22, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="omicron">
/* VTTTalk Unicode 0x3bf */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0

    </glyphProgram>

    <glyphProgram name="omicrontonos">
/* VTTTalk Unicode 0x3cc */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 582, 0, 0
OFFSET[R], 1541, 30, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 168, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="one">
/* TT glyph 606, char 0x31 (1) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 0, 1, 106
SHP[2], 8
CALL[], 6, 4, 114
CALL[], 6, 3, 106
CALL[], 6, 5, 106
CALL[], 5, 4, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="one.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 647, 0, -805

    </glyphProgram>

    <glyphProgram name="one.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 647, 0, 0




    </glyphProgram>

    <glyphProgram name="onedotenleader">
USEMYMETRICS[]
OFFSET[R], 664, 0, 0

    </glyphProgram>

    <glyphProgram name="oneeighth">
/* TT glyph 660, char 0x215b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 16, 114
SHP[2], 5
CALL[], 6, 3, 106
SHP[2], 4
CALL[], 3, 1, 105
CALL[], 1, 0, 106
SHP[1], 8
CALL[], 15, 19, 114
SRP2[], 6
IP[], 13
IP[], 11
SRP1[], 13
SHP[1], 14
SRP1[], 11
SHP[1], 12
CALL[], 15, 47, 106
CALL[], 47, 51, 105
CALL[], 51, 39, 106
IP[], 33
IP[], 21
CALL[], 39, 43, 105
CALL[], 43, 27, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="onehalf">
/* TT glyph 657, char 0xbd */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 16, 114
SHP[2], 5
CALL[], 6, 3, 106
SHP[2], 4
CALL[], 3, 1, 105
CALL[], 1, 0, 106
SHP[1], 8
CALL[], 15, 18, 114
SRP2[], 6
IP[], 13
IP[], 11
SRP1[], 13
SHP[1], 14
SRP1[], 11
SHP[1], 12
CALL[], 15, 33, 106
SHP[2], 16
CALL[], 33, 20, 105
CALL[], 20, 26, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="onequarter">
/* TT glyph 658, char 0xbc */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 16, 114
SHP[2], 5
CALL[], 6, 3, 106
SHP[2], 4
CALL[], 3, 1, 105
CALL[], 1, 0, 106
SHP[1], 8
CALL[], 27, 18, 114
SRP2[], 6
IP[], 13
IP[], 11
SRP1[], 13
SHP[1], 14
SRP1[], 11
SHP[1], 12
CALL[], 27, 26, 106
SHP[2], 15
CALL[], 26, 23, 106
SHP[2], 19
CALL[], 23, 21, 106
IP[], 17
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="openbullet">
/* TT glyph 893, char 0x25e6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="ordfeminine">
/* TT glyph 383, char 0xaa */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 13, 17, 114
CALL[], 13, 12, 106
CALL[], 12, 6, 105
SHP[2], 8
CALL[], 6, 31, 106
CALL[], 31, 26, 105
SHP[2], 19
CALL[], 26, 0, 106
SHP[2], 20
SHP[2], 22
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ordmasculine">
/* TT glyph 384, char 0xba */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 3, 114
CALL[], 6, 18, 106
CALL[], 18, 12, 105
CALL[], 12, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="orthogonal">
/* TT glyph 832, char 0x221f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 0, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="oslash">
/* TT glyph 308, char 0xf8 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 7, 7, 114
CALL[], 7, 25, 106
SMD[], 96
SRP0[], 7
MDRP[m&gt;RWh], 10
SHP[2], 11
CALL[], 17, 11, 114
CALL[], 17, 28, 106
SRP0[], 17
MDRP[m&gt;RWh], 0
SHP[2], 1
SRP2[], 7
SLOOP[], 8
IP[], 19, 2, 34, 22, 33, 23, 12, 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="oslashacute">
/* VTTTalk Unicode 0x1ff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 308, 0, 0
OFFSET[R], 1497, 30, 0
SVTCA[Y]
CALL[], 36, 7, 1, 1, 168, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="otilde">
/* VTTTalk Unicode 0xf5 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1503, 10, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 146, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="p">
/* TT glyph 312, char 0x70 (p) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 14, 114
CALL[], 1, 6, 114
CALL[], 6, 7, 114
SHP[2], 4
CALL[], 6, 18, 106
SHP[2], 20
CALL[], 12, 11, 114
SHP[2], 15
CALL[], 12, 23, 106
SHP[2], 21
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="paragraph">
/* TT glyph 1114, char 0xb6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 18, 114
SHP[2], 12
CALL[], 7, 16, 114
SRP2[], 0
IP[], 1
CALL[], 7, 14, 106
SHP[2], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="parenleft">
/* TT glyph 681, char 0x28 (() */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 138, 114
CALL[], 7, 9, 106
CALL[], 7, 17, 105
CALL[], 17, 15, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="parenleft_asterisk.liga">
/* TT glyph 1577, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 138, 114
CALL[], 11, 18, 106
CALL[], 11, 3, 105
CALL[], 3, 24, 106
SRP2[], 11
IP[], 34
MDAP[R], 34
CALL[], 34, 28, 105
SHP[2], 41
SLOOP[], 11
IP[], 40, 29, 42, 30, 39, 31, 38, 36, 33, 37, 32
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="parenright">
/* TT glyph 682, char 0x29 ()) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 10, 138, 114
CALL[], 10, 9, 106
CALL[], 10, 0, 105
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="partialdiff">
/* VTTTalk Unicode 0x2202 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

SOFFSET[R], 611, 1202, 0, -1, 0, 0, 1


    </glyphProgram>

    <glyphProgram name="percent">
/* TT glyph 833, char 0x25 (%) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 17, 114
CALL[], 6, 18, 106
CALL[], 18, 12, 105
CALL[], 12, 0, 106
SMD[], 160
MDRP[m&gt;RWh], 25
CALL[], 25, 24, 106
CALL[], 28, 19, 114
CALL[], 28, 40, 106
CALL[], 40, 46, 105
CALL[], 46, 34, 106
MDRP[m&gt;RWh], 27
CALL[], 27, 26, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="percent_percent.liga">
/* TT glyph 1231, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 17, 114
SHP[2], 21
CALL[], 6, 33, 106
SHP[2], 45
CALL[], 33, 27, 105
SHP[2], 39
CALL[], 27, 0, 106
SHP[2], 12
SRP1[], 6
IP[], 15
IP[], 18
CALL[], 0, 17, 105
CALL[], 17, 16, 106
CALL[], 66, 19, 114
SHP[2], 51
CALL[], 66, 90, 106
SHP[2], 78
CALL[], 90, 96, 105
SHP[2], 84
CALL[], 96, 72, 106
SHP[2], 57
SRP1[], 66
IP[], 63
IP[], 60
CALL[], 72, 62, 105
CALL[], 62, 61, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="period">
/* TT glyph 664, char 0x2e (.) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 19, 114
CALL[], 0, 6, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="period_equal.liga">
/* TT glyph 728, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 132, 114
CALL[], 1, 0, 106
SRP0[], 1
MDRP[m&gt;RWh], 17
CALL[], 17, 16, 106
SRP1[], 1
IP[], 10
CALL[], 10, 4, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="period_hyphen.liga">
/* TT glyph 722, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 13, 131, 114
CALL[], 13, 6, 105
CALL[], 13, 12, 106
CALL[], 12, 0, 105
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="period_period.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 664, -1060, 0
OFFSET[R], 664, -140, 0

    </glyphProgram>

    <glyphProgram name="period_period_equal.liga">
/* TT glyph 725, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 132, 114
CALL[], 1, 0, 106
SRP0[], 1
MDRP[m&gt;RWh], 29
CALL[], 29, 28, 106
SRP1[], 1
IP[], 22
SRP1[], 22
SHP[1], 10
CALL[], 22, 16, 106
SHP[2], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="period_period_less.liga">
/* TT glyph 726, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 135, 114
CALL[], 2, 1, 106
IP[], 6
IP[], 5
CALL[], 1, 7, 106
CALL[], 7, 0, 106
CALL[], 2, 4, 106
CALL[], 4, 3, 106
SRP1[], 0
IP[], 26
SRP1[], 26
SHP[1], 14
CALL[], 26, 20, 106
SHP[2], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="period_period_period.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 664, -2000, 0
OFFSET[R], 664, -1200, 0
OFFSET[R], 664, -400, 0


    </glyphProgram>

    <glyphProgram name="period_question.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 664, -1100, 0
OFFSET[R], 671, -240, 0

    </glyphProgram>

    <glyphProgram name="periodcentered">
/* VTTTalk Unicode 0xb7 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 664, 0, 582


    </glyphProgram>

    <glyphProgram name="perthousand">
/* TT glyph 834, char 0x2030 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 3, 114
CALL[], 6, 18, 106
CALL[], 18, 12, 105
CALL[], 12, 0, 106
CALL[], 52, 9, 114
CALL[], 52, 28, 105
CALL[], 28, 40, 106
MDRP[m&gt;RWh], 46
CALL[], 46, 34, 106
SHP[2], 27
MDAP[R], 27
SHP[1], 26
CALL[], 52, 64, 106
MDRP[m&gt;RWh], 70
CALL[], 70, 58, 106
SHP[2], 24
SRP1[], 24
SHP[1], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="peseta">
/* TT glyph 789, char 0x20a7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 5, 2, 114
CALL[], 5, 19, 106
SRP2[], 0
IP[], 20
IP[], 29
MDAP[R], 20
MDAP[R], 29
SRP1[], 20
SHP[1], 3
SHP[1], 9
CALL[], 20, 28, 106
SHP[2], 2
SHP[2], 12
CALL[], 29, 16, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="phi">
/* TT glyph 589, char 0x3c6 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 1, 11, 114
CALL[], 1, 0, 106
SHP[1], 12
CALL[], 1, 21, 106
SHP[2], 17
CALL[], 5, 7, 114
CALL[], 5, 6, 106
SHP[1], 8
CALL[], 5, 22, 106
SHP[2], 16
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="pi">
/* TT glyph 583, char 0x3c0 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 3, 6, 114
CALL[], 3, 2, 106
SHP[2], 22
SRP1[], 22
SHP[1], 6
CALL[], 17, 11, 114
CALL[], 17, 10, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="plus">
/* TT glyph 807, char 0x2b (+) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 131, 114
CALL[], 3, 5, 105
SHP[1], 7
CALL[], 3, 2, 106
CALL[], 2, 0, 105
SHP[1], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="plus_greater.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 807, -1020, 0
OFFSET[R], 813, -140, 0

    </glyphProgram>

    <glyphProgram name="plus_plus.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 807, -1060, 0
OFFSET[R], 807, -140, 0

    </glyphProgram>

    <glyphProgram name="plus_plus_plus.liga">
/* TT glyph 1174, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 11, 131, 114
CALL[], 11, 10, 106
SHP[2], 6
SRP1[], 6
SHP[1], 2
SRP1[], 2
SHP[1], 26
CALL[], 10, 8, 105
SHP[2], 4
SRP1[], 4
SHP[1], 0
CALL[], 11, 13, 105
SHP[2], 17
SRP1[], 17
SHP[1], 21
SRP1[], 11
SHP[1], 15
SRP1[], 15
SHP[1], 19
SRP1[], 19
SHP[1], 23
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="plusminus">
/* TT glyph 817, char 0xb1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 7
CALL[], 7, 5, 105
CALL[], 5, 4, 106
CALL[], 4, 1, 105
CALL[], 1, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="product">
/* TT glyph 827, char 0x220f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 2, 114
CALL[], 3, 0, 105
SHP[2], 8
CALL[], 3, 2, 106
SHP[2], 10
SRP1[], 10
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="psi">
/* TT glyph 591, char 0x3c8 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 14, 114
CALL[], 1, 11, 114
SHP[2], 18
CALL[], 1, 8, 106
SHP[2], 11
CALL[], 4, 6, 114
SHP[2], 14
CALL[], 9, 0, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="q">
/* TT glyph 314, char 0x71 (q) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 14
CALL[], 0, 20, 106
SHP[2], 22
CALL[], 6, 7, 114
SHP[2], 9
CALL[], 6, 25, 106
SHP[2], 23
CALL[], 11, 6, 114
CALL[], 12, 14, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="question">
/* TT glyph 671, char 0x3f (?) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 15, 17, 114
SHP[2], 12
CALL[], 15, 8, 106
SHP[2], 11
CALL[], 24, 19, 114
CALL[], 24, 30, 106
CALL[], 30, 0, 105
SRP1[], 15
SLOOP[], 4
IP[], 20, 3, 5, 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="question_colon.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 671, -960, 0
OFFSET[R], 666, -100, 0


    </glyphProgram>

    <glyphProgram name="question_equal.liga">
/* TT glyph 743, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 15, 17, 114
SHP[2], 12
CALL[], 15, 8, 106
SHP[2], 11
MIAP[R], 29, 16
CALL[], 29, 27, 106
SRP0[], 29
MDRP[m&gt;RWh], 32
CALL[], 32, 33, 106
CALL[], 34, 19, 114
CALL[], 34, 40, 106
CALL[], 40, 0, 105
SRP1[], 8
SLOOP[], 4
IP[], 18, 5, 3, 20
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="question_period.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 671, -960, 0
OFFSET[R], 664, -100, 0


    </glyphProgram>

    <glyphProgram name="question_question.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 671, -1114, 0
OFFSET[R], 671, -170, 0

    </glyphProgram>

    <glyphProgram name="questiondown">
/* TT glyph 672, char 0xbf */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 7, 114
CALL[], 0, 6, 106
CALL[], 6, 20, 105
CALL[], 0, 12, 105
SHP[2], 33
SRP1[], 20
SLOOP[], 5
IP[], 15, 26, 24, 17, 22
CALL[], 12, 29, 106
SHP[2], 32
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quotedbl">
/* VTTTalk Unicode 0x22 (") */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 708, -200, 0
OFFSET[R], 708, 204, 0

    </glyphProgram>

    <glyphProgram name="quotedblbase">
/* VTTTalk Unicode 0x201e */
/* ACT generated Mon Nov 18 21:54:11 2019 */

OFFSET[R], 701, 218, -1166
OFFSET[R], 701, -222, -1166



    </glyphProgram>

    <glyphProgram name="quotedblleft">
/* VTTTalk Unicode 0x201c */
/* ACT generated Mon Nov 18 21:54:11 2019 */

OFFSET[R], 700, -222, 0
OFFSET[R], 700, 218, 0



    </glyphProgram>

    <glyphProgram name="quotedblright">
/* VTTTalk Unicode 0x201d */
/* ACT generated Mon Nov 18 21:54:11 2019 */

OFFSET[R], 701, 218, 0
OFFSET[R], 701, -222, 0



    </glyphProgram>

    <glyphProgram name="quoteleft">
/* TT glyph 700, char 0x2018 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 16, 114
CALL[], 2, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quotereversed">
OVERLAP[]
SOFFSET[R], 701, 1240, 0, -1.0000, 0.0000, 0.0000, 1.0000

    </glyphProgram>

    <glyphProgram name="quoteright">
/* TT glyph 701, char 0x2019 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 16, 114
CALL[], 2, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="quotesinglbase">
/* VTTTalk Unicode 0x201a */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 701, 0, -1166




    </glyphProgram>

    <glyphProgram name="quotesingle">
/* TT glyph 708, char 0x27 (') */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 16, 114
CALL[], 1, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="r">
/* TT glyph 315, char 0x72 (r) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 1, 106
SHP[2], 21
CALL[], 5, 6, 114
CALL[], 5, 4, 106
CALL[], 10, 7, 114
SHP[2], 7
CALL[], 10, 17, 106
SRP2[], 0
IP[], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="racute">
/* VTTTalk Unicode 0x155 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 315, 0, 0
OFFSET[R], 1497, 30, 0
SVTCA[Y]
CALL[], 24, 10, 1, 1, 168, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="radical">
/* TT glyph 829, char 0x221a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 2, 114
CALL[], 5, 8, 106
CALL[], 5, 0, 105
IP[], 3
IP[], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="rcaron">
/* VTTTalk Unicode 0x159 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 315, 0, 0
OFFSET[R], 1500, 0, 0
SVTCA[Y]
CALL[], 24, 10, 1, 1, 168, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="registered">
/* TT glyph 1117, char 0xae */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 18, 114
CALL[], 0, 12, 106
CALL[], 6, 16, 114
CALL[], 6, 18, 106
SRP2[], 0
SLOOP[], 3
IP[], 25, 35, 24
MDAP[R], 25
MDAP[R], 35
MDAP[R], 24
CALL[], 25, 38, 106
CALL[], 35, 39, 106
SRP1[], 24
SHP[1], 33
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="revlogicalnot">
/* TT glyph 806, char 0x2310 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 0, 106
CALL[], 1, 4, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="rho">
/* TT glyph 584, char 0x3c1 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 14, 114
CALL[], 4, 7, 114
CALL[], 4, 15, 106
CALL[], 9, 11, 114
SHP[2], 13
CALL[], 9, 21, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="ring">
/* VTTTalk Unicode 0x2da */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1502, 0, 0

    </glyphProgram>

    <glyphProgram name="rtblock">
/* TT glyph 859, char 0x2590 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="s">
/* TT glyph 319, char 0x73 (s) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 7, 106
CALL[], 20, 7, 114
CALL[], 20, 26, 106
SRP2[], 0
SLOOP[], 8
IP[], 10, 36, 13, 14, 33, 32, 17, 29
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="sacute">
/* VTTTalk Unicode 0x15b */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 319, 0, 0
OFFSET[R], 1497, 60, 0
SVTCA[Y]
CALL[], 39, 20, 1, 1, 168, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="sacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 319, 0, 0
OFFSET[R], 1539, 60, 0
SVTCA[Y]
CALL[], 39, 20, 1, 1, 168, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="scaron">
/* VTTTalk Unicode 0x161 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 319, 0, 0
OFFSET[R], 1500, 30, 0
SVTCA[Y]
CALL[], 39, 20, 1, 1, 168, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="scedilla">
/* VTTTalk Unicode 0x15f */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 319, 0, 0
OFFSET[R], 1510, -65, 0
SVTCA[Y]
CALL[], 45, 0, 0, 0, 69, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="scircumflex">
/* VTTTalk Unicode 0x15d */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 319, 0, 0
OFFSET[R], 1499, 30, 0
SVTCA[Y]
CALL[], 43, 20, 1, 1, 168, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="second">
/* TT glyph 1123, char 0x2033 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 16, 114
SHP[2], 2
CALL[], 5, 0, 105
SHP[2], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="section">
/* TT glyph 1115, char 0xa7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 10
CALL[], 10, 17, 106
MDAP[R], 38
CALL[], 38, 44, 106
SRP2[], 10
SLOOP[], 10
IP[], 23, 24, 4, 3, 59, 65, 30, 31, 51, 50
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="semicolon">
/* TT glyph 667, char 0x3b (;) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 7, 114
CALL[], 6, 0, 106
MDAP[R], 14
CALL[], 14, 12, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="semicolon_semicolon.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 667, -1034, 0
OFFSET[R], 667, -116, 0

    </glyphProgram>

    <glyphProgram name="seven">
/* TT glyph 612, char 0x37 (7) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 5, 4, 114
CALL[], 5, 2, 106
SRP2[], 0
IP[], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="seven.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 653, 0, -805

    </glyphProgram>

    <glyphProgram name="seven.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 653, 0, 0






    </glyphProgram>

    <glyphProgram name="seveneighths">
/* TT glyph 663, char 0x215e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 5, 16, 114
CALL[], 5, 2, 106
CALL[], 2, 7, 105
IP[], 3
CALL[], 12, 19, 114
SRP1[], 5
IP[], 8
IP[], 10
SRP1[], 8
SHP[1], 9
SRP1[], 10
SHP[1], 11
CALL[], 12, 44, 106
CALL[], 44, 48, 105
CALL[], 48, 36, 106
IP[], 30
IP[], 18
CALL[], 36, 40, 105
CALL[], 40, 24, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="shade">
/* TT glyph 872, char 0x2592 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="sigma">
/* TT glyph 586, char 0x3c3 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 18, 106
CALL[], 6, 6, 114
CALL[], 6, 24, 106
SHP[2], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="six">
/* TT glyph 611, char 0x36 (6) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 0, 20, 106
CALL[], 7, 4, 114
CALL[], 7, 8, 106
SRP2[], 0
IP[], 14
SRP1[], 14
SHP[1], 10
CALL[], 14, 26, 106
SHP[2], 29
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="six.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 652, 0, -805

    </glyphProgram>

    <glyphProgram name="six.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 652, 0, 0






    </glyphProgram>

    <glyphProgram name="slash">
/* TT glyph 679, char 0x2f (/) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MIAP[R], 1, 136
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="slash_asterisk.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 679, -1080, 0
OFFSET[R], 675, -58, 0


    </glyphProgram>

    <glyphProgram name="slash_equal.liga">
/* TT glyph 758, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 136, 114
CALL[], 1, 3, 106
CALL[], 6, 132, 114
CALL[], 6, 7, 106
SRP0[], 6
MDRP[m&gt;RWh], 10
CALL[], 10, 11, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="slash_equal_equal.liga">
/* TT glyph 759, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 136, 114
CALL[], 1, 3, 106
CALL[], 10, 132, 114
SHP[2], 6
CALL[], 10, 11, 106
SHP[2], 7
CALL[], 10, 18, 105
SHP[2], 14
CALL[], 18, 19, 106
SHP[2], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="slash_greater.liga">
/* TT glyph 760, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 136, 114
CALL[], 7, 5, 106
IP[], 9
IP[], 4
CALL[], 10, 135, 114
CALL[], 10, 11, 106
CALL[], 11, 1, 106
CALL[], 1, 0, 106
SRP1[], 11
SRP2[], 10
IP[], 2
IP[], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="slash_slash.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 679, -1030, 0
OFFSET[R], 679, -148, 0

    </glyphProgram>

    <glyphProgram name="slash_slash_slash.liga">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 679, -180, 0
OFFSET[R], 679, -2190, 0
OFFSET[R], 679, -1170, 0


    </glyphProgram>

    <glyphProgram name="smileface">
/* TT glyph 1555, char 0x263a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 8
CALL[], 8, 0, 105
CALL[], 0, 16, 106
CALL[], 16, 56, 105
CALL[], 8, 24, 106
SRP1[], 56
SLOOP[], 3
IP[], 61, 32, 38
SRP1[], 32
SHP[1], 44
SRP1[], 38
SHP[1], 50
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="space">
/* TT glyph 767, char 0x20 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="spade">
/* TT glyph 1106, char 0x2660 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 6, 106
SHP[1], 12
SMD[], 96
SRP0[], 0
MDRP[m&gt;RWh], 18
CALL[], 0, 20, 106
SHP[2], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="sterling">
/* TT glyph 795, char 0xa3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 28, 106
SHP[2], 1
CALL[], 11, 3, 114
SHP[2], 14
SRP1[], 0
IP[], 5
MDAP[R], 5
SHP[1], 25
CALL[], 5, 6, 106
SHP[2], 22
CALL[], 11, 18, 106
SHP[2], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="summation">
/* TT glyph 828, char 0x2211 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 16, 114
CALL[], 4, 0, 105
IP[], 8
IP[], 2
CALL[], 0, 9, 106
SHP[2], 1
CALL[], 4, 7, 106
SHP[2], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="sun">
/* TT glyph 1557, char 0x263c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 15
CALL[], 15, 14, 106
CALL[], 14, 46, 106
CALL[], 15, 36, 105
SLOOP[], 10
IP[], 0, 1, 39, 2, 4, 7, 9, 12, 10, 11
SRP1[], 0
SHP[1], 31
SRP1[], 1
SHP[1], 30
SRP1[], 39
SHP[1], 32
SRP1[], 2
SHP[1], 29
SRP1[], 4
SHP[1], 27
SRP1[], 7
SHP[1], 24
SRP1[], 9
SHP[1], 22
SRP1[], 12
SHP[1], 19
SRP1[], 10
SHP[1], 21
SRP1[], 11
SHP[1], 20
CALL[], 36, 37, 106
CALL[], 37, 40, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="t">
/* TT glyph 327, char 0x74 (t) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 17, 106
CALL[], 6, 6, 114
CALL[], 6, 8, 105
SHP[1], 10
CALL[], 6, 5, 106
SHP[2], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tau">
/* TT glyph 587, char 0x3c4 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 13, 106
CALL[], 6, 6, 114
CALL[], 6, 5, 106
SHP[2], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="tbar">
/* TT glyph 328, char 0x167 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 9, 6, 114
SHP[2], 5
CALL[], 9, 7, 106
CALL[], 9, 12, 106
SHP[2], 4
CALL[], 12, 13, 105
SHP[2], 1
CALL[], 13, 16, 106
SHP[2], 0
CALL[], 27, 11, 114
CALL[], 27, 20, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tcaron">
/* TT glyph 329, char 0x165 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 11, 114
CALL[], 4, 21, 106
CALL[], 10, 6, 114
CALL[], 10, 12, 105
SHP[1], 14
CALL[], 10, 0, 105
CALL[], 0, 1, 106
CALL[], 10, 9, 106
SHP[2], 17
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="theta">
/* TT glyph 575, char 0x3b8 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="thorn">
/* TT glyph 313, char 0xfe */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 14, 114
CALL[], 1, 0, 114
CALL[], 6, 7, 114
SHP[2], 4
CALL[], 6, 18, 106
SHP[2], 20
CALL[], 12, 11, 114
SHP[2], 15
CALL[], 12, 23, 106
SHP[2], 21
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="three">
/* TT glyph 608, char 0x33 (3) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 13, 114
CALL[], 0, 7, 106
CALL[], 28, 5, 114
SHP[2], 25
SRP2[], 0
SLOOP[], 4
IP[], 14, 35, 34, 15
CALL[], 28, 21, 106
SHP[2], 24
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="three.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 649, 0, -805

    </glyphProgram>

    <glyphProgram name="three.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 649, 0, 0




    </glyphProgram>

    <glyphProgram name="threeeighths">
/* TT glyph 661, char 0x215c */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 24, 17, 114
SHP[2], 21
CALL[], 24, 18, 106
SHP[2], 20
CALL[], 18, 13, 105
CALL[], 13, 12, 106
CALL[], 12, 7, 105
CALL[], 7, 0, 106
SRP1[], 12
SRP2[], 13
IP[], 31
IP[], 30
CALL[], 41, 19, 114
SRP1[], 24
IP[], 37
IP[], 39
SRP1[], 37
SHP[1], 38
SRP1[], 39
SHP[1], 40
CALL[], 41, 73, 106
CALL[], 73, 77, 105
CALL[], 77, 65, 106
IP[], 59
IP[], 47
CALL[], 65, 69, 105
CALL[], 69, 53, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="threequarters">
/* TT glyph 659, char 0xbe */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 24, 17, 114
SHP[2], 21
CALL[], 24, 18, 106
SHP[2], 20
CALL[], 18, 13, 105
CALL[], 13, 12, 106
CALL[], 12, 7, 105
CALL[], 7, 0, 106
SRP1[], 12
SRP2[], 13
IP[], 31
IP[], 30
CALL[], 53, 18, 114
SRP2[], 24
IP[], 39
IP[], 37
CALL[], 53, 52, 106
SHP[2], 41
CALL[], 52, 49, 106
SHP[2], 45
CALL[], 49, 47, 106
IP[], 44
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="tilde">
/* VTTTalk Unicode 0x2dc */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1503, 0, 0

    </glyphProgram>

    <glyphProgram name="tildecomb">
/* TT glyph 1503, char 0x303 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 12, 105
CALL[], 0, 16, 105
CALL[], 16, 9, 106
CALL[], 0, 22, 105
CALL[], 22, 3, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="tildecomb.case">
/* TT glyph 1534, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 16, 105
CALL[], 16, 9, 106
CALL[], 9, 13, 105
CALL[], 0, 22, 105
CALL[], 22, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="tonos">
/* VTTTalk Unicode 0x384 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 1497, 0, 0

    </glyphProgram>

    <glyphProgram name="tonos.case">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1541, 0, 0

    </glyphProgram>

    <glyphProgram name="trademark">
/* TT glyph 1119, char 0x2122 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 16, 114
CALL[], 3, 2, 106
SHP[2], 6
CALL[], 2, 0, 105
SHP[2], 8
SHP[2], 16
SRP1[], 16
SRP2[], 3
SLOOP[], 4
IP[], 19, 12, 18, 22
SHP[2], 9
SRP1[], 9
SHP[1], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="triagdn">
/* TT glyph 946, char 0x25bc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="triaglf">
/* TT glyph 956, char 0x25c4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="triagrt">
/* TT glyph 955, char 0x25ba */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="triagup">
/* TT glyph 944, char 0x25b2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="two">
/* TT glyph 607, char 0x32 (2) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 0, 19, 106
SHP[2], 1
SHP[2], 18
CALL[], 13, 5, 114
SHP[2], 10
CALL[], 13, 6, 106
SHP[2], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="two.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 648, 0, -805

    </glyphProgram>

    <glyphProgram name="two.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 648, 0, 0




    </glyphProgram>

    <glyphProgram name="u">
/* TT glyph 332, char 0x75 (u) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 19
CALL[], 0, 9, 106
SHP[2], 12
CALL[], 4, 6, 114
SHP[2], 13
CALL[], 17, 10, 114
CALL[], 17, 16, 106
SHP[2], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uacute">
/* VTTTalk Unicode 0xfa */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1497, 20, 0
SVTCA[Y]
CALL[], 23, 13, 1, 1, 188, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="ubreve">
/* VTTTalk Unicode 0x16d */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1501, -10, 0
SVTCA[Y]
CALL[], 23, 13, 1, 1, 178, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="ucircumflex">
/* VTTTalk Unicode 0xfb */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1499, -10, 0
SVTCA[Y]
CALL[], 27, 13, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="udieresis">
/* VTTTalk Unicode 0xfc */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1494, -8, 0
SVTCA[Y]
CALL[], 23, 13, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="ugrave">
/* VTTTalk Unicode 0xf9 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1496, 35, 0
SVTCA[Y]
CALL[], 23, 13, 1, 1, 188, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uhorn">
/* TT glyph 340, char 0x1b0 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 9, 106
SHP[1], 27
CALL[], 4, 6, 114
SHP[2], 13
MIAP[R], 14, 6
CALL[], 14, 18, 105
CALL[], 14, 22, 106
CALL[], 25, 10, 114
CALL[], 25, 24, 106
SHP[2], 23
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uhungarumlaut">
/* VTTTalk Unicode 0x171 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1498, 60, 0
SVTCA[Y]
CALL[], 23, 13, 1, 1, 188, 86
SHC[2], 1
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="umacron">
/* VTTTalk Unicode 0x16b */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1504, -10, 0
SVTCA[Y]
CALL[], 23, 4, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="underscore">
/* TT glyph 694, char 0x5f (_) */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MIAP[R], 1, 8
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="underscore_bar_underscore.liga">
/* TT glyph 763, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 18, 114
CALL[], 1, 0, 106
SHP[1], 6
CALL[], 3, 133, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="underscore_underscore.liga">
/* TT glyph 764, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 18, 114
CALL[], 1, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="underscoredbl">
/* VTTTalk Unicode 0x2017 */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 811, 0, -1052




    </glyphProgram>

    <glyphProgram name="uni0009">
/* TT glyph 1547, char 0x9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni00A0">
/* TT glyph 768, char 0xa0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni00AD">
/* VTTTalk Unicode 0xad */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 689, 0, 0


    </glyphProgram>

    <glyphProgram name="uni00B2">
/* TT glyph 648, char 0xb2 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 11, 3, 114
CALL[], 11, 5, 106
CALL[], 5, 17, 105
CALL[], 17, 0, 106
SHP[1], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni00B3">
/* TT glyph 649, char 0xb3 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 24, 3, 114
CALL[], 24, 18, 106
CALL[], 18, 13, 105
CALL[], 13, 12, 106
CALL[], 12, 7, 105
CALL[], 7, 0, 106
SRP1[], 12
SRP2[], 13
IP[], 31
IP[], 30
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni00B5">
/* VTTTalk Unicode 0xb5 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 579, 0, 0


    </glyphProgram>

    <glyphProgram name="uni00B9">
/* TT glyph 647, char 0xb9 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 2, 114
SHP[2], 5
CALL[], 6, 3, 106
SHP[2], 4
CALL[], 3, 1, 105
CALL[], 1, 0, 106
SHP[1], 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0122">
/* VTTTalk Unicode 0x122 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 56, 0, 0
OFFSET[R], 1509, 115, 0
SVTCA[Y]
CALL[], 29, 0, 1, 1, -120, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0123">
/* VTTTalk Unicode 0x123 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 243, 0, 0
OFFSET[R], 1506, -10, 0
SVTCA[Y]
CALL[], 36, 16, 1, 1, 128, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni0136">
/* VTTTalk Unicode 0x136 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 80, 0, 0
OFFSET[R], 1509, 40, 0
SVTCA[Y]
CALL[], 21, 0, 1, 1, -140, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0137">
/* VTTTalk Unicode 0x137 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 268, 0, 0
OFFSET[R], 1509, -20, 0
SVTCA[Y]
CALL[], 20, 0, 1, 1, -140, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni013B">
/* VTTTalk Unicode 0x13b */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 82, 0, 0
OFFSET[R], 1509, 20, 0
SVTCA[Y]
CALL[], 7, 0, 1, 1, -140, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni013C">
/* VTTTalk Unicode 0x13c */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 271, 0, 0
OFFSET[R], 1509, 70, 0
SVTCA[Y]
CALL[], 19, 0, 1, 1, -120, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0145">
/* VTTTalk Unicode 0x145 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 89, 0, 0
OFFSET[R], 1509, 0, 0
SVTCA[Y]
CALL[], 13, 8, 1, 1, -140, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0146">
/* VTTTalk Unicode 0x146 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 278, 0, 0
OFFSET[R], 1509, 0, 0
SVTCA[Y]
CALL[], 20, 0, 1, 1, -140, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0156">
/* VTTTalk Unicode 0x156 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 125, 0, 0
OFFSET[R], 1509, 10, 0
SVTCA[Y]
CALL[], 26, 0, 1, 1, -140, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni0157">
/* VTTTalk Unicode 0x157 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 315, 0, 0
OFFSET[R], 1509, -170, 0
SVTCA[Y]
CALL[], 25, 0, 1, 1, -140, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni0162">
/* VTTTalk Unicode 0x162 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 137, 0, 0
OFFSET[R], 1510, -80, 0
SVTCA[Y]
CALL[], 14, 0, 0, 0, 49, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0163">
/* VTTTalk Unicode 0x163 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 327, 0, 0
OFFSET[R], 1510, -20, 0
SVTCA[Y]
CALL[], 30, 0, 0, 0, 69, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni0186">
/* TT glyph 1564, char 0x186 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 3
CALL[], 0, 7, 106
SHP[2], 4
CALL[], 18, 3, 114
SHP[2], 16
CALL[], 18, 13, 106
SHP[2], 15
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni018F">
/* TT glyph 136, char 0x18f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 17, 106
CALL[], 13, 3, 114
CALL[], 13, 8, 106
SRP2[], 0
IP[], 20
MDAP[R], 20
SHP[1], 2
CALL[], 20, 5, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0190">
/* TT glyph 1560, char 0x190 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 3, 114
SHP[2], 3
CALL[], 0, 7, 106
SHP[2], 4
CALL[], 30, 9, 114
CALL[], 30, 21, 106
SRP2[], 0
IP[], 13
MDAP[R], 13
CALL[], 13, 14, 106
IP[], 38
IP[], 39
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni019D">
/* TT glyph 94, char 0x19d */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 5, 2, 114
SHP[2], 10
CALL[], 12, 8, 114
CALL[], 12, 1, 105
CALL[], 1, 0, 106
SRP1[], 12
SRP2[], 5
IP[], 8
IP[], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni01A9">
USEMYMETRICS[]
OFFSET[R], 551, 0, 0

    </glyphProgram>

    <glyphProgram name="uni01B7">
/* TT glyph 1562, char 0x1b7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 6, 106
CALL[], 17, 2, 114
CALL[], 17, 16, 106
SHP[2], 19
SRP2[], 0
IP[], 20
CALL[], 20, 13, 106
SHP[1], 14
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni01CD">
/* VTTTalk Unicode 0x1cd */
/* ACT generated Wed Apr 29 12:41:08 2020 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1531, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni01CE">
/* VTTTalk Unicode 0x1ce */
/* ACT generated Wed Apr 29 12:41:08 2020 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1500, -20, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 178, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="uni01EA">
/* TT glyph 117, char 0x1ea */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 9, 114
SHP[2], 14
CALL[], 6, 26, 106
CALL[], 6, 21, 105
CALL[], 21, 0, 106
MIAP[R], 10, 3
CALL[], 10, 30, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni01EB">
/* TT glyph 307, char 0x1eb */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 11, 114
SHP[2], 18
CALL[], 6, 30, 106
SRP0[], 6
MDRP[m&gt;RGr], 25
CALL[], 25, 0, 106
CALL[], 12, 7, 114
CALL[], 12, 36, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0218">
/* VTTTalk Unicode 0x218 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 129, 0, 0
OFFSET[R], 1509, 10, 0
SVTCA[Y]
CALL[], 37, 0, 1, 1, -120, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0219">
/* VTTTalk Unicode 0x219 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 319, 0, 0
OFFSET[R], 1509, 10, 0
SVTCA[Y]
CALL[], 40, 0, 1, 1, -120, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni021A">
/* VTTTalk Unicode 0x21a */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 137, 0, 0
OFFSET[R], 1509, -5, 0
SVTCA[Y]
CALL[], 9, 0, 1, 1, -140, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni021B">
/* VTTTalk Unicode 0x21b */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 327, 0, 0
OFFSET[R], 1509, 55, 0
SVTCA[Y]
CALL[], 25, 0, 1, 1, -120, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni021E">
/* VTTTalk Unicode 0x21e */
/* ACT generated Wed Apr 29 12:41:08 2020 */

USEMYMETRICS[]
OFFSET[R], 62, 0, 0
OFFSET[R], 1531, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni021F">
/* VTTTalk Unicode 0x21f */
/* ACT generated Wed Apr 29 12:41:08 2020 */

USEMYMETRICS[]
OFFSET[R], 249, 0, 0
OFFSET[R], 1531, -326, 80
SVTCA[Y]
CALL[], 19, 1, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0232">
/* VTTTalk Unicode 0x232 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0
OFFSET[R], 1535, 0, 0
SVTCA[Y]
CALL[], 10, 2, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0233">
/* VTTTalk Unicode 0x233 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0
OFFSET[R], 1504, 15, 0
SVTCA[Y]
CALL[], 18, 1, 1, 1, 188, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0237">
/* TT glyph 266, char 0x237 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 0, 1, 106
CALL[], 8, 6, 114
CALL[], 8, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0245">
USEMYMETRICS[]
OFFSET[R], 450, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0254">
/* TT glyph 1572, char 0x254 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 3
CALL[], 0, 7, 106
SHP[2], 4
CALL[], 20, 7, 114
SHP[2], 17
CALL[], 20, 13, 106
SHP[2], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0259">
/* TT glyph 241, char 0x259 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 22, 106
CALL[], 16, 7, 114
CALL[], 16, 9, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 26, 106
SHP[2], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni025B">
USEMYMETRICS[]
OFFSET[R], 572, 0, 0

    </glyphProgram>

    <glyphProgram name="uni026A">
/* TT glyph 1566, char 0x26a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 1, 106
SHP[2], 9
CALL[], 5, 6, 114
CALL[], 5, 4, 106
SHP[2], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0272">
/* TT glyph 284, char 0x272 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 0, 1, 106
CALL[], 6, 6, 114
CALL[], 11, 7, 114
SHP[2], 9
CALL[], 11, 20, 106
SHP[2], 22
CALL[], 16, 10, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0283">
USEMYMETRICS[]
OFFSET[R], 824, 0, 0

    </glyphProgram>

    <glyphProgram name="uni028C">
USEMYMETRICS[]
OFFSET[R], 524, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0292">
/* TT glyph 1570, char 0x292 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 17, 6, 114
CALL[], 17, 16, 106
CALL[], 17, 0, 105
CALL[], 0, 6, 106
SRP2[], 17
IP[], 20
CALL[], 20, 13, 106
SHP[1], 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02A7">
/* TT glyph 1573, char 0x2a7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 37, 106
CALL[], 6, 6, 114
CALL[], 6, 8, 105
SHP[1], 10
CALL[], 6, 5, 106
SHP[2], 33
CALL[], 13, 1, 114
CALL[], 13, 18, 106
CALL[], 26, 15, 114
CALL[], 26, 27, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02BB">
/* TT glyph 1492, char 0x2bb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni02BC">
/* VTTTalk Unicode 0x2bc */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 701, 0, 0

    </glyphProgram>

    <glyphProgram name="uni02C9">
/* VTTTalk Unicode 0x2c9 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1522, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0302">
/* TT glyph 1499, char 0x302 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
SHP[1], 4
SRP1[], 4
IP[], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0302.case">
/* TT glyph 1530, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
SHP[1], 4
SRP1[], 4
IP[], 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0304">
/* TT glyph 1504, char 0x304 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0304.case">
/* TT glyph 1535, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0306">
/* TT glyph 1501, char 0x306 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 9, 106
CALL[], 0, 4, 106
SHP[2], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0306.case">
/* TT glyph 1532, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 7, 106
CALL[], 0, 10, 105
SHP[2], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0307">
/* TT glyph 1495, char 0x307 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 6, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0307.case">
/* TT glyph 1526, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 6, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0308">
/* TT glyph 1494, char 0x308 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 12
CALL[], 0, 6, 106
SHP[2], 18
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0308.case">
/* TT glyph 1525, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 12
CALL[], 0, 6, 106
SHP[2], 18
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni030A">
/* TT glyph 1502, char 0x30a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 12, 106
CALL[], 12, 16, 105
CALL[], 16, 6, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni030A.case">
/* TT glyph 1533, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 12, 106
CALL[], 12, 16, 105
CALL[], 16, 6, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni030B">
/* TT glyph 1498, char 0x30b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 4
CALL[], 0, 1, 106
SHP[2], 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni030B.case">
/* TT glyph 1529, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
SHP[2], 4
CALL[], 0, 5, 105
SHP[2], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni030C">
/* TT glyph 1500, char 0x30c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
SHP[2], 5
SRP2[], 5
IP[], 3
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni030C.case">
/* TT glyph 1531, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
SHP[2], 5
SRP2[], 5
IP[], 3
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0312">
/* TT glyph 1506, char 0x312 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni031B">
/* TT glyph 1507, char 0x31b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 0, 106
CALL[], 1, 4, 105
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni031B.case">
/* TT glyph 1537, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 4, 105
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0326">
/* TT glyph 1509, char 0x326 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0327">
/* TT glyph 1510, char 0x327 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 6
MDRP[m&gt;RBl], 8
CALL[], 8, 5, 106
CALL[], 5, 1, 105
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0328">
/* TT glyph 1511, char 0x328 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MIAP[R], 9, 18
SHP[1], 6
SHP[1], 8
CALL[], 9, 14, 105
CALL[], 14, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0340">
USEMYMETRICS[]
OFFSET[R], 1496, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0341">
USEMYMETRICS[]
OFFSET[R], 1497, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0342">
USEMYMETRICS[]
OFFSET[R], 1503, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0374">
/* VTTTalk Unicode 0x374 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 701, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0375">
/* VTTTalk Unicode 0x375 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 665, 0, 0

    </glyphProgram>

    <glyphProgram name="uni037E">
/* VTTTalk Unicode 0x37e */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 667, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0394">
/* TT glyph 537, char 0x394 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 5, 106
CALL[], 1, 2, 114
SRP1[], 0
IP[], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni03A9">
/* TT glyph 557, char 0x3a9 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 15
CALL[], 0, 1, 106
SHP[2], 13
SHP[2], 3
SRP1[], 3
SHP[1], 11
SHP[2], 24
SRP1[], 24
SHP[1], 16
CALL[], 7, 3, 114
CALL[], 7, 20, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni03BC">
/* TT glyph 579, char 0x3bc */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 14, 114
CALL[], 1, 7, 114
SHP[2], 11
CALL[], 14, 10, 114
CALL[], 14, 13, 106
SHP[2], 12
CALL[], 19, 11, 114
SHP[2], 17
SHP[2], 21
CALL[], 19, 6, 106
SHP[2], 3
SHP[2], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni03C2">
/* TT glyph 585, char 0x3c2 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 0, 1, 106
CALL[], 7, 11, 114
CALL[], 7, 26, 106
CALL[], 13, 7, 114
SHP[2], 16
CALL[], 13, 20, 106
SHP[2], 17
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni03CF">
/* TT glyph 567, char 0x3cf */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SMD[], 96
MDRP[m&gt;RWh], 18
CALL[], 1, 2, 114
SHP[2], 8
SRP2[], 0
IP[], 3
CALL[], 3, 26, 106
IP[], 23
IP[], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni03D7">
/* TT glyph 604, char 0x3d7 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 15, 105
CALL[], 1, 7, 114
SRP2[], 0
IP[], 4
MDAP[R], 4
SRP2[], 1
SLOOP[], 3
IP[], 21, 10, 7
CALL[], 8, 6, 114
CALL[], 8, 9, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0400">
/* VTTTalk Unicode 0x400 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 393, 0, 0
OFFSET[R], 1527, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0401">
/* VTTTalk Unicode 0x401 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 393, 0, 0
OFFSET[R], 1525, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni0402">
/* TT glyph 434, char 0x402 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 12
CALL[], 12, 13, 106
CALL[], 3, 2, 114
CALL[], 3, 2, 106
SHP[2], 6
SRP2[], 0
IP[], 7
MDAP[R], 7
CALL[], 7, 18, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0403">
/* VTTTalk Unicode 0x403 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 389, 0, 0
OFFSET[R], 1528, 20, 0
SVTCA[Y]
CALL[], 6, 1, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0404">
/* TT glyph 426, char 0x404 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 20, 106
CALL[], 5, 3, 114
SHP[2], 8
CALL[], 5, 12, 106
SHP[2], 9
SRP2[], 0
IP[], 15
CALL[], 15, 18, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0405">
/* VTTTalk Unicode 0x405 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 129, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0406">
/* VTTTalk Unicode 0x406 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0407">
/* VTTTalk Unicode 0x407 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1525, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni0408">
/* VTTTalk Unicode 0x408 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 78, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0409">
/* TT glyph 423, char 0x409 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 1, 106
SHP[1], 15
CALL[], 15, 24, 106
CALL[], 5, 2, 114
CALL[], 5, 17, 106
SRP2[], 0
IP[], 7
MDAP[R], 7
CALL[], 7, 23, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni040A">
/* TT glyph 424, char 0x40a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 15
CALL[], 15, 21, 106
CALL[], 1, 2, 114
SHP[2], 6
SRP1[], 0
IP[], 7
IP[], 3
MDAP[R], 7
MDAP[R], 3
CALL[], 7, 20, 106
CALL[], 3, 17, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni040B">
/* TT glyph 431, char 0x40b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 13
CALL[], 3, 2, 114
CALL[], 3, 2, 106
SHP[2], 6
SRP2[], 0
IP[], 7
MDAP[R], 7
CALL[], 7, 18, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni040C">
/* VTTTalk Unicode 0x40c */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 401, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 46, 1, 1, 1, 160, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni040D">
/* VTTTalk Unicode 0x40d */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 398, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni040E">
/* VTTTalk Unicode 0x40e */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 411, 0, 0
OFFSET[R], 1545, 50, 0
SVTCA[Y]
CALL[], 15, 9, 1, 1, 150, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni040F">
/* TT glyph 419, char 0x40f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 3, 106
SHP[1], 8
CALL[], 0, 9, 105
CALL[], 1, 2, 114
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0410">
/* VTTTalk Unicode 0x410 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0411">
/* TT glyph 387, char 0x411 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 17, 106
CALL[], 1, 2, 114
CALL[], 1, 4, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 16, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0412">
/* VTTTalk Unicode 0x412 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 26, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0413">
/* TT glyph 389, char 0x413 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 4, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0414">
/* TT glyph 392, char 0x414 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 8, 2, 114
CALL[], 8, 25, 106
CALL[], 15, 8, 114
CALL[], 15, 0, 106
SHP[2], 13
CALL[], 15, 22, 106
SHP[2], 1
SHP[2], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0414.loclBGR">
/* TT glyph 449, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 3, 2, 114
CALL[], 10, 8, 114
CALL[], 10, 2, 106
SHP[2], 13
SRP1[], 13
SHP[1], 5
CALL[], 10, 11, 106
SHP[2], 8
SRP2[], 3
IP[], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0415">
/* VTTTalk Unicode 0x415 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0416">
/* TT glyph 396, char 0x416 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 31, 2, 114
SHP[2], 21
CALL[], 21, 20, 106
SRP1[], 31
SHP[1], 42
CALL[], 42, 43, 106
CALL[], 74, 8, 114
SHP[2], 0
CALL[], 0, 1, 106
SRP1[], 74
SRP2[], 31
IP[], 33
MDAP[R], 33
SHP[1], 30
CALL[], 33, 72, 106
SHP[2], 75
SRP1[], 75
SRP2[], 30
SLOOP[], 4
IP[], 53, 10, 11, 52
SRP1[], 74
SHP[1], 63
CALL[], 63, 62, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0417">
/* TT glyph 397, char 0x417 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 2
CALL[], 0, 6, 106
SHP[2], 3
CALL[], 29, 3, 114
CALL[], 29, 20, 106
SRP2[], 0
IP[], 14
MDAP[R], 14
CALL[], 14, 13, 106
IP[], 36
IP[], 35
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0418">
/* TT glyph 398, char 0x418 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
SHP[2], 6
CALL[], 11, 8, 114
SHP[2], 8
SRP1[], 6
IP[], 3
IP[], 9
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0419">
/* VTTTalk Unicode 0x419 */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 398, 0, 0
OFFSET[R], 1545, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 150, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni041A">
/* TT glyph 401, char 0x41a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 34
CALL[], 34, 33, 106
CALL[], 1, 2, 114
SRP2[], 0
IP[], 3
CALL[], 3, 44, 106
IP[], 24
IP[], 23
SRP1[], 1
SHP[1], 13
CALL[], 13, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni041B">
/* TT glyph 403, char 0x41b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 2, 114
CALL[], 6, 11, 106
CALL[], 8, 8, 114
SHP[2], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni041B.loclBGR">
/* TT glyph 450, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 4
CALL[], 1, 2, 114
SRP2[], 4
IP[], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni041C">
/* VTTTalk Unicode 0x41c */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 88, 0, 0


    </glyphProgram>

    <glyphProgram name="uni041D">
/* VTTTalk Unicode 0x41d */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 62, 0, 0


    </glyphProgram>

    <glyphProgram name="uni041E">
/* VTTTalk Unicode 0x41e */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0


    </glyphProgram>

    <glyphProgram name="uni041F">
/* TT glyph 407, char 0x41f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 6, 106
SRP1[], 0
SHP[1], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0420">
/* VTTTalk Unicode 0x420 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 122, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0421">
/* VTTTalk Unicode 0x421 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 27, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0422">
/* VTTTalk Unicode 0x422 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 137, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0423">
/* TT glyph 411, char 0x423 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 1, 106
CALL[], 5, 2, 114
SHP[2], 10
SRP2[], 0
SLOOP[], 3
IP[], 4, 11, 8
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0424">
/* TT glyph 413, char 0x424 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 6, 3, 114
SRP2[], 0
IP[], 1
IP[], 5
SRP1[], 1
SHP[1], 12
CALL[], 1, 21, 106
SHP[2], 17
SRP1[], 5
SHP[1], 8
CALL[], 5, 22, 106
SHP[2], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0424.loclBGR">
/* TT glyph 451, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 1, 9, 114
SMD[], 96
MDRP[m&gt;RBl], 0
SHP[1], 16
CALL[], 1, 28, 106
SHP[2], 22
CALL[], 7, 3, 114
MDRP[m&gt;RBl], 8
SHP[1], 10
CALL[], 7, 29, 106
SHP[2], 21
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0425">
/* VTTTalk Unicode 0x425 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 167, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0426">
/* TT glyph 416, char 0x426 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 10, 105
CALL[], 0, 3, 106
SHP[2], 7
CALL[], 1, 2, 114
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0427">
/* TT glyph 415, char 0x427 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 12
CALL[], 13, 8, 114
SRP1[], 4
IP[], 9
MDAP[R], 9
CALL[], 9, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0428">
/* TT glyph 417, char 0x428 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 0, 3, 106
SHP[2], 7
SRP1[], 1
SHP[1], 10
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0429">
/* TT glyph 418, char 0x429 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 13, 105
CALL[], 0, 3, 106
SHP[2], 7
SRP1[], 7
SHP[1], 11
CALL[], 1, 2, 114
SHP[2], 6
SRP1[], 6
SHP[1], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni042A">
/* TT glyph 421, char 0x42a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 3, 2, 114
CALL[], 3, 2, 106
SRP2[], 0
IP[], 5
MDAP[R], 5
CALL[], 5, 16, 106
CALL[], 0, 17, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni042B">
/* TT glyph 422, char 0x42b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SRP1[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 16, 106
CALL[], 0, 17, 106
SRP1[], 1
SHP[1], 12
SRP1[], 0
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni042C">
/* TT glyph 420, char 0x42c */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
SRP1[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 14, 106
CALL[], 0, 15, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni042D">
/* TT glyph 427, char 0x42d */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
SHP[2], 3
CALL[], 0, 7, 106
SHP[2], 4
CALL[], 21, 3, 114
CALL[], 21, 16, 106
SRP2[], 0
IP[], 12
MDAP[R], 12
CALL[], 12, 11, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni042E">
/* TT glyph 432, char 0x42e */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 7, 3, 114
CALL[], 7, 25, 106
CALL[], 13, 9, 114
CALL[], 13, 19, 106
SRP2[], 7
IP[], 3
MDAP[R], 3
CALL[], 3, 17, 106
SLOOP[], 3
IP[], 10, 28, 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni042F">
/* TT glyph 433, char 0x42f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 20, 2, 114
MDRP[m&gt;RBl], 34
CALL[], 22, 8, 114
SHP[2], 0
CALL[], 0, 1, 106
SRP1[], 22
SRP2[], 20
IP[], 33
CALL[], 33, 23, 106
IP[], 11
IP[], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0430">
/* VTTTalk Unicode 0x430 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0431">
/* TT glyph 453, char 0x431 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 25, 106
CALL[], 0, 8, 105
CALL[], 8, 9, 106
SRP2[], 0
IP[], 19
MDAP[R], 19
SHP[1], 15
CALL[], 19, 31, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0431.loclSRB">
/* TT glyph 533, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 35, 106
CALL[], 0, 17, 105
CALL[], 17, 18, 106
SRP2[], 0
IP[], 27
CALL[], 27, 41, 106
IP[], 6
IP[], 7
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0432">
/* TT glyph 454, char 0x432 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 27, 106
CALL[], 1, 6, 114
CALL[], 1, 17, 106
SRP2[], 0
IP[], 18
MDAP[R], 18
CALL[], 18, 26, 106
IP[], 9
IP[], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0432.loclBGR">
/* TT glyph 515, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 19, 106
CALL[], 6, 3, 114
CALL[], 6, 34, 106
SRP2[], 0
IP[], 27
CALL[], 27, 26, 106
IP[], 13
IP[], 12
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0433">
/* TT glyph 455, char 0x433 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 1, 4, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0433.loclBGR">
/* TT glyph 516, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 37, 106
CALL[], 22, 7, 114
CALL[], 22, 15, 106
SRP2[], 0
SLOOP[], 8
IP[], 3, 34, 31, 30, 8, 9, 12, 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0434">
/* TT glyph 458, char 0x434 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 6, 114
CALL[], 6, 21, 106
CALL[], 13, 10, 114
CALL[], 13, 14, 106
SHP[2], 11
CALL[], 13, 18, 106
SHP[2], 2
SHP[2], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0434.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 243, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0435">
/* VTTTalk Unicode 0x435 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0436">
/* TT glyph 462, char 0x436 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 31, 6, 114
SHP[2], 21
CALL[], 21, 20, 106
SRP1[], 31
SHP[1], 42
CALL[], 42, 43, 106
CALL[], 74, 10, 114
SHP[2], 0
CALL[], 0, 1, 106
SRP1[], 74
SRP2[], 31
IP[], 33
MDAP[R], 33
SHP[1], 30
CALL[], 33, 72, 106
SHP[2], 75
SRP1[], 75
SRP2[], 30
SLOOP[], 4
IP[], 53, 10, 11, 52
SRP1[], 74
SHP[1], 63
CALL[], 63, 62, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0436.loclBGR">
/* TT glyph 518, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 21, 6, 114
CALL[], 21, 20, 106
SHP[1], 44
CALL[], 44, 45, 106
CALL[], 32, 2, 114
CALL[], 77, 10, 114
SHP[2], 0
CALL[], 0, 1, 106
SRP1[], 77
SRP2[], 21
IP[], 31
MDAP[R], 31
SHP[1], 34
CALL[], 31, 78, 106
SHP[2], 75
SRP1[], 34
SRP2[], 75
SLOOP[], 4
IP[], 11, 54, 55, 10
SRP1[], 77
SHP[1], 65
CALL[], 65, 64, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0437">
/* TT glyph 463, char 0x437 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 3
CALL[], 0, 7, 106
SHP[2], 4
CALL[], 30, 7, 114
CALL[], 30, 23, 106
SRP2[], 0
IP[], 15
MDAP[R], 15
CALL[], 15, 14, 106
IP[], 37
IP[], 36
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0437.loclBGR">
/* TT glyph 519, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 29, 7, 114
CALL[], 29, 21, 106
CALL[], 29, 0, 105
SHP[2], 2
CALL[], 0, 6, 106
SHP[2], 3
SRP2[], 29
IP[], 15
MDAP[R], 15
CALL[], 15, 14, 106
IP[], 37
IP[], 36
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0438">
/* TT glyph 464, char 0x438 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 1, 6, 114
SHP[2], 6
CALL[], 11, 10, 114
SHP[2], 8
SRP1[], 8
SRP2[], 1
IP[], 4
IP[], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0438.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0439">
/* VTTTalk Unicode 0x439 */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 464, 0, 0
OFFSET[R], 1544, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 178, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0439.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 520, 0, 0
OFFSET[R], 1544, -10, 0


    </glyphProgram>

    <glyphProgram name="uni043A">
/* TT glyph 467, char 0x43a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 31
CALL[], 31, 30, 106
CALL[], 1, 6, 114
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 41, 106
IP[], 23
IP[], 22
SRP1[], 1
SHP[1], 13
CALL[], 13, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni043A.loclBGR">
/* TT glyph 523, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 31
CALL[], 31, 30, 106
CALL[], 1, 0, 114
CALL[], 13, 6, 114
CALL[], 13, 14, 106
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 41, 106
IP[], 23
IP[], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni043B">
/* TT glyph 469, char 0x43b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 1, 106
SHP[1], 9
CALL[], 6, 6, 114
CALL[], 6, 11, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni043B.loclBGR">
/* TT glyph 524, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 4
CALL[], 1, 6, 114
SRP2[], 4
IP[], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni043C">
/* TT glyph 470, char 0x43c */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 8
CALL[], 2, 6, 114
SHP[2], 6
SRP1[], 0
SRP2[], 6
SLOOP[], 4
IP[], 12, 3, 13, 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni043D">
/* TT glyph 471, char 0x43d */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 8
CALL[], 1, 6, 114
SHP[2], 6
SRP1[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 10, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni043E">
/* VTTTalk Unicode 0x43e */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0

    </glyphProgram>

    <glyphProgram name="uni043F">
/* TT glyph 473, char 0x43f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 1, 6, 106
SRP1[], 0
SHP[1], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni043F.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 278, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0440">
/* VTTTalk Unicode 0x440 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 312, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0441">
/* VTTTalk Unicode 0x441 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 213, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0442">
/* TT glyph 476, char 0x442 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 3, 6, 114
CALL[], 3, 2, 106
SHP[2], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0442.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 277, 0, 0


    </glyphProgram>

    <glyphProgram name="uni0443">
/* VTTTalk Unicode 0x443 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0444">
/* TT glyph 479, char 0x444 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
MIAP[R], 0, 11
SHP[2], 21
SHP[2], 28
SRP1[], 28
SHP[1], 25
CALL[], 0, 46, 106
SHP[2], 37
MIAP[R], 6, 7
SHP[1], 15
SHP[1], 9
SRP1[], 9
SHP[1], 12
CALL[], 6, 51, 106
SHP[2], 32
MIAP[R], 10, 0
MIAP[R], 27, 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0445">
/* VTTTalk Unicode 0x445 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 357, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0446">
/* TT glyph 482, char 0x446 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SMD[], 96
MDRP[m&gt;RGr], 9
CALL[], 0, 3, 106
SHP[2], 7
CALL[], 1, 6, 114
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0446.loclBGR">
/* TT glyph 527, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0447">
/* TT glyph 481, char 0x447 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 3, 6, 114
SHP[2], 10
CALL[], 11, 10, 114
SRP1[], 3
IP[], 7
MDAP[R], 7
CALL[], 7, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0448">
/* TT glyph 483, char 0x448 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 3, 106
SHP[2], 7
CALL[], 1, 6, 114
SHP[2], 6
SRP1[], 6
SHP[1], 10
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0448.loclBGR">
/* TT glyph 528, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 29
CALL[], 0, 9, 106
SHP[2], 17
SHP[1], 27
SRP1[], 27
SHP[1], 24
CALL[], 4, 6, 114
SHP[2], 13
SRP1[], 13
SHP[1], 20
CALL[], 22, 10, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0449">
/* TT glyph 484, char 0x449 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SMD[], 96
MDRP[m&gt;RGr], 13
CALL[], 0, 3, 106
SHP[2], 7
SRP1[], 7
SHP[1], 11
CALL[], 1, 6, 114
SHP[2], 6
SRP1[], 6
SHP[1], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0449.loclBGR">
/* TT glyph 529, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 9, 106
SHP[1], 33
SHP[1], 31
SRP1[], 31
SHP[1], 28
CALL[], 4, 6, 114
SHP[2], 13
SRP1[], 13
SHP[1], 20
CALL[], 26, 10, 114
CALL[], 26, 22, 106
CALL[], 26, 24, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni044A">
/* TT glyph 487, char 0x44a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 3, 6, 114
CALL[], 3, 2, 106
SRP2[], 0
IP[], 14
MDAP[R], 14
CALL[], 14, 5, 106
CALL[], 0, 15, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044A.loclBGR">
/* TT glyph 531, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 18, 106
CALL[], 6, 6, 114
CALL[], 6, 5, 106
SRP2[], 0
IP[], 24
CALL[], 24, 12, 106
SHP[2], 8
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044B">
/* TT glyph 488, char 0x44b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 11
CALL[], 0, 17, 106
CALL[], 1, 6, 114
SHP[2], 12
SRP1[], 0
IP[], 16
CALL[], 16, 3, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044C">
/* TT glyph 486, char 0x44c */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SRP1[], 0
IP[], 12
MDAP[R], 12
CALL[], 12, 3, 106
CALL[], 0, 13, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044C.loclBGR">
/* TT glyph 530, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 16, 106
CALL[], 4, 6, 114
SRP2[], 0
IP[], 22
CALL[], 22, 10, 106
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044D">
/* TT glyph 493, char 0x44d */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
SHP[2], 3
CALL[], 0, 7, 106
SHP[2], 4
CALL[], 21, 7, 114
CALL[], 21, 16, 106
SRP2[], 0
IP[], 11
CALL[], 11, 12, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni044E">
/* TT glyph 498, char 0x44e */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 7, 7, 114
CALL[], 7, 25, 106
CALL[], 13, 11, 114
CALL[], 13, 19, 106
SRP2[], 7
IP[], 17
MDAP[R], 17
CALL[], 17, 3, 106
SLOOP[], 3
IP[], 10, 28, 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044E.loclBGR">
/* TT glyph 532, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 19, 106
CALL[], 6, 10, 114
CALL[], 7, 0, 114
CALL[], 13, 7, 114
CALL[], 13, 25, 106
SRP2[], 0
IP[], 9
MDAP[R], 9
CALL[], 9, 4, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni044F">
/* TT glyph 499, char 0x44f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 18, 6, 114
CALL[], 18, 34, 106
CALL[], 20, 10, 114
SHP[2], 0
CALL[], 0, 1, 106
SRP1[], 18
SRP2[], 20
IP[], 33
MDAP[R], 33
CALL[], 33, 21, 106
IP[], 9
IP[], 10
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0450">
/* VTTTalk Unicode 0x450 */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 459, 0, 0
OFFSET[R], 1496, 65, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 168, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="uni0451">
/* VTTTalk Unicode 0x451 */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 459, 0, 0
OFFSET[R], 1494, 22, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 158, 86
SHC[2], 2
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni0452">
/* TT glyph 500, char 0x452 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 5, 0, 114
SRP2[], 0
IP[], 14
IP[], 7
MDAP[R], 14
MDAP[R], 7
SRP1[], 14
SHP[1], 11
CALL[], 14, 31, 106
SHP[2], 33
SRP1[], 7
SHP[1], 3
CALL[], 7, 10, 106
SHP[2], 2
CALL[], 22, 15, 114
CALL[], 22, 23, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0453">
/* VTTTalk Unicode 0x453 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 455, 0, 0
OFFSET[R], 1497, 70, 0
SVTCA[Y]
CALL[], 6, 1, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni0454">
/* TT glyph 492, char 0x454 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 22, 106
CALL[], 6, 7, 114
SHP[2], 9
CALL[], 6, 13, 106
SHP[2], 10
SRP2[], 0
IP[], 16
CALL[], 16, 19, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0455">
/* VTTTalk Unicode 0x455 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 319, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0456">
/* VTTTalk Unicode 0x456 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 252, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0457">
/* VTTTalk Unicode 0x457 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1494, 52, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni0458">
/* VTTTalk Unicode 0x458 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 265, 0, 0

    </glyphProgram>

    <glyphProgram name="uni0459">
/* TT glyph 489, char 0x459 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 1, 106
SHP[1], 15
CALL[], 15, 24, 106
CALL[], 5, 6, 114
CALL[], 5, 17, 106
SRP2[], 0
IP[], 23
MDAP[R], 23
CALL[], 23, 7, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni045A">
/* TT glyph 490, char 0x45a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SRP1[], 0
IP[], 17
MDAP[R], 17
CALL[], 17, 3, 106
SHP[1], 20
SHP[2], 7
SRP1[], 0
SHP[1], 15
CALL[], 15, 21, 106
SRP1[], 1
SHP[1], 6
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni045B">
/* TT glyph 497, char 0x45b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 19
CALL[], 5, 0, 114
SRP1[], 0
IP[], 7
IP[], 14
MDAP[R], 7
MDAP[R], 14
SRP1[], 7
SHP[1], 3
CALL[], 7, 10, 106
SHP[2], 2
SRP1[], 14
SHP[1], 11
CALL[], 14, 23, 106
SHP[2], 25
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni045C">
/* VTTTalk Unicode 0x45c */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 467, 0, 0
OFFSET[R], 1497, 20, 0
SVTCA[Y]
CALL[], 43, 1, 1, 1, 188, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni045D">
/* VTTTalk Unicode 0x45d */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 464, 0, 0
OFFSET[R], 1496, 45, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 188, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni045D.loclBGR">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 520, 0, 0
OFFSET[R], 1496, 35, 0

    </glyphProgram>

    <glyphProgram name="uni045E">
/* VTTTalk Unicode 0x45e */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 477, 0, 0
OFFSET[R], 1544, -5, 0
SVTCA[Y]
CALL[], 18, 5, 1, 1, 178, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni045F">
/* TT glyph 485, char 0x45f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 3, 106
SHP[1], 8
SMD[], 96
SRP0[], 0
MDRP[m&gt;RGr], 9
CALL[], 1, 6, 114
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0490">
/* TT glyph 391, char 0x490 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 1, 2, 114
CALL[], 1, 3, 105
CALL[], 1, 5, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0491">
/* TT glyph 457, char 0x491 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
CALL[], 1, 3, 105
CALL[], 1, 6, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0492">
/* TT glyph 435, char 0x492 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 5, 2, 114
CALL[], 5, 8, 106
SRP2[], 0
IP[], 9
MDAP[R], 9
SHP[1], 4
CALL[], 9, 12, 106
SHP[2], 1
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni0493">
/* TT glyph 501, char 0x493 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 5, 6, 114
CALL[], 5, 8, 106
SRP2[], 0
IP[], 9
MDAP[R], 9
SHP[1], 3
CALL[], 9, 12, 106
SHP[2], 2
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0496">
/* TT glyph 436, char 0x496 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 31, 2, 114
SHP[2], 21
CALL[], 21, 20, 106
SRP1[], 31
SHP[1], 42
CALL[], 42, 43, 106
MDAP[R], 66
CALL[], 66, 62, 106
CALL[], 76, 8, 114
CALL[], 76, 64, 105
SHP[1], 65
SHP[1], 0
CALL[], 0, 1, 106
SRP1[], 76
SRP2[], 31
IP[], 33
MDAP[R], 33
SHP[1], 30
CALL[], 33, 74, 106
SHP[2], 77
SRP1[], 77
SRP2[], 30
SLOOP[], 4
IP[], 10, 53, 52, 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni0497">
/* TT glyph 502, char 0x497 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 31, 6, 114
SHP[2], 21
CALL[], 21, 20, 106
SRP1[], 31
SHP[1], 42
CALL[], 42, 43, 106
CALL[], 75, 10, 114
SHP[2], 0
CALL[], 0, 1, 106
SRP1[], 31
SRP2[], 75
IP[], 33
MDAP[R], 33
SHP[1], 30
CALL[], 33, 73, 106
SHP[2], 76
SRP1[], 76
SRP2[], 30
SLOOP[], 4
IP[], 53, 10, 11, 52
SRP1[], 75
SHP[1], 65
CALL[], 65, 62, 106
CALL[], 65, 63, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni049A">
/* TT glyph 437, char 0x49a */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 34, 105
SHP[1], 36
CALL[], 36, 33, 106
CALL[], 1, 2, 114
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 44, 106
IP[], 24
IP[], 23
SRP1[], 1
SHP[1], 13
CALL[], 13, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni049B">
/* TT glyph 503, char 0x49b */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SMD[], 96
MDRP[m&gt;RWh], 32
SHP[1], 33
CALL[], 33, 30, 106
CALL[], 1, 6, 114
SRP1[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 41, 106
IP[], 23
IP[], 22
SRP1[], 1
SHP[1], 13
CALL[], 13, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04A2">
/* TT glyph 438, char 0x4a2 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 10, 105
SHP[1], 12
CALL[], 12, 7, 106
CALL[], 1, 2, 114
SHP[2], 6
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04A3">
/* TT glyph 504, char 0x4a3 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SMD[], 96
MDRP[m&gt;RWh], 10
SHP[1], 12
CALL[], 12, 7, 106
CALL[], 1, 6, 114
SHP[2], 6
SRP1[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 14, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04AE">
/* VTTTalk Unicode 0x4ae */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0

    </glyphProgram>

    <glyphProgram name="uni04AF">
/* TT glyph 505, char 0x4af */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 2, 6, 114
SHP[2], 6
CALL[], 7, 10, 114
SHP[2], 1
SRP1[], 2
IP[], 4
CALL[], 8, 14, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04B0">
/* TT glyph 440, char 0x4b0 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 9
CALL[], 15, 8, 114
SRP2[], 4
IP[], 0
MDAP[R], 0
SLOOP[], 3
IP[], 6, 10, 3
SHP[1], 14
CALL[], 0, 1, 106
SHP[2], 11
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04B1">
/* TT glyph 506, char 0x4b1 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 1, 10, 114
CALL[], 1, 0, 106
CALL[], 4, 6, 114
SHP[2], 8
SRP1[], 1
SRP2[], 8
IP[], 3
IP[], 6
SRP1[], 3
SHP[1], 9
CALL[], 14, 14, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04B2">
/* TT glyph 441, char 0x4b2 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 12
CALL[], 12, 9, 106
CALL[], 12, 10, 106
CALL[], 2, 2, 114
SHP[2], 6
SRP1[], 0
SRP2[], 6
SLOOP[], 4
IP[], 14, 7, 1, 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04B3">
/* TT glyph 507, char 0x4b3 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 12
CALL[], 12, 9, 106
CALL[], 12, 10, 106
CALL[], 2, 6, 114
SHP[2], 6
SRP1[], 6
SRP2[], 0
SLOOP[], 4
IP[], 4, 7, 1, 14
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04B6">
/* TT glyph 442, char 0x4b6 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
SHP[2], 12
CALL[], 18, 8, 114
CALL[], 18, 13, 106
CALL[], 18, 15, 105
SRP2[], 4
IP[], 9
MDAP[R], 9
CALL[], 9, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04B7">
/* TT glyph 508, char 0x4b7 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 3, 6, 114
SHP[2], 10
CALL[], 16, 10, 114
CALL[], 16, 11, 106
SMD[], 96
SRP0[], 16
MDRP[m&gt;RGr], 13
SRP2[], 3
IP[], 7
MDAP[R], 7
CALL[], 7, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni04BA">
/* TT glyph 443, char 0x4ba */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 9
CALL[], 1, 2, 114
SRP2[], 0
IP[], 3
MDAP[R], 3
CALL[], 3, 14, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04BB">
/* VTTTalk Unicode 0x4bb */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 249, 0, 0

    </glyphProgram>

    <glyphProgram name="uni04C0">
/* VTTTalk Unicode 0x4c0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0


    </glyphProgram>

    <glyphProgram name="uni04CF">
/* VTTTalk Unicode 0x4cf */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0

    </glyphProgram>

    <glyphProgram name="uni04D8">
/* VTTTalk Unicode 0x4d8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 136, 0, 0

    </glyphProgram>

    <glyphProgram name="uni04D9">
/* VTTTalk Unicode 0x4d9 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 241, 0, 0

    </glyphProgram>

    <glyphProgram name="uni04E2">
/* VTTTalk Unicode 0x4e2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 398, 0, 0
OFFSET[R], 1535, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 160, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni04E3">
/* VTTTalk Unicode 0x4e3 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 464, 0, 0
OFFSET[R], 1504, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni04E8">
/* TT glyph 447, char 0x4e8 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 9, 114
CALL[], 0, 13, 106
CALL[], 4, 3, 114
CALL[], 4, 8, 106
SRP2[], 0
IP[], 10
MDAP[R], 10
CALL[], 10, 16, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04E9">
/* TT glyph 513, char 0x4e9 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 19, 106
CALL[], 6, 7, 114
CALL[], 6, 12, 106
SRP2[], 0
IP[], 15
MDAP[R], 15
CALL[], 15, 23, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni04EE">
/* VTTTalk Unicode 0x4ee */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 411, 0, 0
OFFSET[R], 1535, 50, 0
SVTCA[Y]
CALL[], 15, 5, 1, 1, 160, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni04EF">
/* VTTTalk Unicode 0x4ef */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 477, 0, 0
OFFSET[R], 1504, 15, 0
SVTCA[Y]
CALL[], 18, 1, 1, 1, 188, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni0E3F">
/* TT glyph 770, char 0xe3f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 19
SMD[], 96
MDRP[m&gt;RWh], 21
CALL[], 0, 34, 106
SHP[2], 40
CALL[], 1, 2, 114
MDRP[m&gt;RWh], 3
SHP[1], 5
CALL[], 1, 24, 106
SHP[2], 29
SRP2[], 0
IP[], 25
MDAP[R], 25
SHP[1], 30
CALL[], 25, 33, 106
SHP[2], 39
IP[], 12
IP[], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni1E9E">
/* TT glyph 135, char 0x1e9e */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 4, 3, 114
CALL[], 4, 30, 106
CALL[], 14, 9, 114
CALL[], 14, 20, 106
SRP2[], 4
SLOOP[], 5
IP[], 23, 11, 8, 28, 6
CALL[], 8, 27, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni1EA0">
/* VTTTalk Unicode 0x1ea0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 18, 4, 1, 1, -152, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EA1">
/* VTTTalk Unicode 0x1ea1 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 45, 0, 1, 1, -132, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EA2">
/* VTTTalk Unicode 0x1ea2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1536, 0, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 109, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EA3">
/* VTTTalk Unicode 0x1ea3 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1505, 0, 0
SVTCA[Y]
CALL[], 39, 14, 1, 1, 178, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EA4">
/* VTTTalk Unicode 0x1ea4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1530, 0, 0
OFFSET[R], 1528, 351, 248
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 2
CALL[], 19, 13, 1, 0, -12, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EA5">
/* VTTTalk Unicode 0x1ea5 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1499, -20, 0
OFFSET[R], 1497, 367, 340
SVTCA[Y]
CALL[], 43, 14, 1, 1, 178, 86
SHC[2], 2
CALL[], 46, 40, 1, 0, -40, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EA6">
/* VTTTalk Unicode 0x1ea6 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1530, 0, 0
OFFSET[R], 1527, 351, 248
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 2
CALL[], 19, 13, 1, 0, -12, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EA7">
/* VTTTalk Unicode 0x1ea7 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1499, -20, 0
OFFSET[R], 1496, 381, 340
SVTCA[Y]
CALL[], 43, 14, 1, 1, 178, 86
SHC[2], 2
CALL[], 46, 40, 1, 0, -40, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EA8">
/* VTTTalk Unicode 0x1ea8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1530, 0, 0
OFFSET[R], 1536, 351, 248
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 2
CALL[], 19, 17, 0, 0, 53, 86
SHC[2], 3



    </glyphProgram>

    <glyphProgram name="uni1EA9">
/* VTTTalk Unicode 0x1ea9 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1499, -20, 0
OFFSET[R], 1505, 357, 340
SVTCA[Y]
CALL[], 43, 14, 1, 1, 178, 86
SHC[2], 2
CALL[], 46, 40, 1, 0, -40, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EAA">
/* VTTTalk Unicode 0x1eaa */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1530, 0, 0
OFFSET[R], 1534, 10, 328
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 2
CALL[], 19, 13, 1, 1, 54, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EAB">
/* VTTTalk Unicode 0x1eab */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1499, -20, 0
OFFSET[R], 1503, -10, 458
SVTCA[Y]
CALL[], 43, 14, 1, 1, 178, 86
SHC[2], 2
CALL[], 46, 40, 1, 1, 56, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EAC">
/* VTTTalk Unicode 0x1eac */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1508, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 18, 4, 1, 1, -152, 86
SHC[2], 2
CALL[], 28, 1, 1, 1, 160, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EAD">
/* VTTTalk Unicode 0x1ead */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1508, 0, 0
OFFSET[R], 1499, -20, 0
SVTCA[Y]
CALL[], 45, 0, 1, 1, -132, 86
SHC[2], 2
CALL[], 55, 14, 1, 1, 178, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EAE">
/* VTTTalk Unicode 0x1eae */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1532, 0, 0
OFFSET[R], 1528, 0, 322
SVTCA[Y]
CALL[], 12, 1, 1, 1, 150, 86
SHC[2], 2
CALL[], 26, 15, 1, 1, 42, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EAF">
/* VTTTalk Unicode 0x1eaf */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1501, -20, 0
OFFSET[R], 1497, 10, 393
SVTCA[Y]
CALL[], 39, 14, 1, 1, 168, 86
SHC[2], 2
CALL[], 57, 43, 1, 1, 38, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EB0">
/* VTTTalk Unicode 0x1eb0 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1532, 0, 0
OFFSET[R], 1527, 0, 322
SVTCA[Y]
CALL[], 12, 1, 1, 1, 150, 86
SHC[2], 2
CALL[], 26, 15, 1, 1, 42, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EB1">
/* VTTTalk Unicode 0x1eb1 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1501, -20, 0
OFFSET[R], 1496, 25, 393
SVTCA[Y]
CALL[], 39, 14, 1, 1, 168, 86
SHC[2], 2
CALL[], 57, 52, 1, 1, 38, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EB2">
/* VTTTalk Unicode 0x1eb2 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1532, 0, 0
OFFSET[R], 1536, 0, 322
SVTCA[Y]
CALL[], 12, 1, 1, 1, 150, 86
SHC[2], 2
CALL[], 26, 22, 1, 0, -9, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EB3">
/* VTTTalk Unicode 0x1eb3 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1501, -20, 0
OFFSET[R], 1505, 0, 393
SVTCA[Y]
CALL[], 39, 14, 1, 1, 168, 86
SHC[2], 2
CALL[], 57, 52, 1, 1, 38, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EB4">
/* VTTTalk Unicode 0x1eb4 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1532, 0, 0
OFFSET[R], 1534, 10, 322
SVTCA[Y]
CALL[], 12, 1, 1, 1, 150, 86
SHC[2], 2
CALL[], 26, 15, 1, 0, 28, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EB5">
/* VTTTalk Unicode 0x1eb5 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1501, -20, 0
OFFSET[R], 1503, -10, 393
SVTCA[Y]
CALL[], 39, 14, 1, 1, 168, 86
SHC[2], 2
CALL[], 57, 43, 1, 0, 16, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EB6">
/* VTTTalk Unicode 0x1eb6 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 1, 0, 0
OFFSET[R], 1508, 0, 0
OFFSET[R], 1532, 0, 0
SVTCA[Y]
CALL[], 18, 4, 1, 1, -152, 86
SHC[2], 2
CALL[], 24, 1, 1, 1, 150, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EB7">
/* VTTTalk Unicode 0x1eb7 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 187, 0, 0
OFFSET[R], 1508, 0, 0
OFFSET[R], 1501, -20, 0
SVTCA[Y]
CALL[], 45, 0, 1, 1, -132, 86
SHC[2], 2
CALL[], 51, 14, 1, 1, 168, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EB8">
/* VTTTalk Unicode 0x1eb8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1508, 30, 0
SVTCA[Y]
CALL[], 18, 0, 1, 1, -152, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EB9">
/* VTTTalk Unicode 0x1eb9 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1508, 30, 0
SVTCA[Y]
CALL[], 35, 0, 1, 1, -132, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="uni1EBA">
/* VTTTalk Unicode 0x1eba */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1536, 30, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 109, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EBB">
/* VTTTalk Unicode 0x1ebb */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1505, 40, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EBC">
/* VTTTalk Unicode 0x1ebc */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1534, 40, 0
SVTCA[Y]
CALL[], 12, 1, 1, 1, 146, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EBD">
/* VTTTalk Unicode 0x1ebd */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1503, 30, 0
SVTCA[Y]
CALL[], 29, 6, 1, 1, 146, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1EBE">
/* VTTTalk Unicode 0x1ebe */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1530, 30, 0
OFFSET[R], 1528, 381, 248
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 1
CALL[], 19, 13, 1, 0, -12, 86
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="uni1EBF">
/* VTTTalk Unicode 0x1ebf */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1499, 20, 0
OFFSET[R], 1497, 407, 340
SVTCA[Y]
CALL[], 33, 6, 1, 1, 168, 86
SHC[2], 2
CALL[], 36, 30, 1, 0, -40, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EC0">
/* VTTTalk Unicode 0x1ec0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1530, 30, 0
OFFSET[R], 1527, 381, 248
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 1
CALL[], 19, 13, 1, 0, -12, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EC1">
/* VTTTalk Unicode 0x1ec1 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1499, 20, 0
OFFSET[R], 1496, 421, 340
SVTCA[Y]
CALL[], 33, 6, 1, 1, 168, 86
SHC[2], 2
CALL[], 36, 30, 1, 0, -40, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EC2">
/* VTTTalk Unicode 0x1ec2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1530, 30, 0
OFFSET[R], 1536, 381, 248
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 1
CALL[], 19, 17, 0, 0, 53, 86
SHC[2], 2



    </glyphProgram>

    <glyphProgram name="uni1EC3">
/* VTTTalk Unicode 0x1ec3 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1499, 20, 0
OFFSET[R], 1505, 397, 340
SVTCA[Y]
CALL[], 33, 6, 1, 1, 168, 86
SHC[2], 2
CALL[], 36, 30, 1, 0, -40, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EC4">
/* VTTTalk Unicode 0x1ec4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1530, 30, 0
OFFSET[R], 1534, 40, 328
SVTCA[Y]
CALL[], 16, 1, 1, 1, 160, 86
SHC[2], 1
CALL[], 19, 13, 1, 1, 54, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1EC5">
/* VTTTalk Unicode 0x1ec5 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1499, 20, 0
OFFSET[R], 1503, 30, 458
SVTCA[Y]
CALL[], 33, 6, 1, 1, 168, 86
SHC[2], 2
CALL[], 36, 30, 1, 1, 56, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EC6">
/* VTTTalk Unicode 0x1ec6 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 37, 0, 0
OFFSET[R], 1508, 30, 0
OFFSET[R], 1530, 30, 0
SVTCA[Y]
CALL[], 18, 0, 1, 1, -152, 86
SHC[2], 1
CALL[], 28, 1, 1, 1, 160, 86
SHC[2], 2



    </glyphProgram>

    <glyphProgram name="uni1EC7">
/* VTTTalk Unicode 0x1ec7 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 223, 0, 0
OFFSET[R], 1508, 30, 0
OFFSET[R], 1499, 20, 0
SVTCA[Y]
CALL[], 35, 0, 1, 1, -132, 86
SHC[2], 2
CALL[], 45, 6, 1, 1, 168, 86
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="uni1EC8">
/* VTTTalk Unicode 0x1ec8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1536, 0, 0
SVTCA[Y]
CALL[], 12, 5, 1, 1, 109, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EC9">
/* VTTTalk Unicode 0x1ec9 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 253, 0, 0
OFFSET[R], 1505, 70, 0
SVTCA[Y]
CALL[], 10, 5, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1ECA">
/* VTTTalk Unicode 0x1eca */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 65, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 18, 0, 1, 1, -152, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1ECB">
/* VTTTalk Unicode 0x1ecb */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 252, 0, 0
OFFSET[R], 1508, 70, 0
SVTCA[Y]
CALL[], 28, 12, 1, 1, -152, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1ECC">
/* VTTTalk Unicode 0x1ecc */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 22, 0, 1, 1, -132, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1ECD">
/* VTTTalk Unicode 0x1ecd */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 30, 0, 1, 1, -132, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1ECE">
/* VTTTalk Unicode 0x1ece */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1536, 0, 0
SVTCA[Y]
CALL[], 16, 4, 1, 1, 89, 86
SHC[2], 2


    </glyphProgram>

    <glyphProgram name="uni1ECF">
/* VTTTalk Unicode 0x1ecf */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1505, 20, 0
SVTCA[Y]
CALL[], 24, 6, 1, 1, 168, 86
SHC[2], 2

    </glyphProgram>

    <glyphProgram name="uni1ED0">
/* VTTTalk Unicode 0x1ed0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1530, 0, 0
OFFSET[R], 1528, 351, 248
SVTCA[Y]
CALL[], 20, 4, 1, 1, 140, 86
SHC[2], 2
CALL[], 23, 17, 1, 0, -12, 86
SHC[2], 3



    </glyphProgram>

    <glyphProgram name="uni1ED1">
/* VTTTalk Unicode 0x1ed1 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1499, 0, 0
OFFSET[R], 1497, 387, 340
SVTCA[Y]
CALL[], 28, 6, 1, 1, 168, 86
SHC[2], 2
CALL[], 31, 25, 1, 0, -40, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED2">
/* VTTTalk Unicode 0x1ed2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1530, 0, 0
OFFSET[R], 1527, 351, 248
SVTCA[Y]
CALL[], 20, 4, 1, 1, 140, 86
SHC[2], 2
CALL[], 23, 17, 1, 0, -12, 86
SHC[2], 3



    </glyphProgram>

    <glyphProgram name="uni1ED3">
/* VTTTalk Unicode 0x1ed3 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1499, 0, 0
OFFSET[R], 1496, 401, 340
SVTCA[Y]
CALL[], 28, 6, 1, 1, 168, 86
SHC[2], 2
CALL[], 31, 25, 1, 0, -40, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED4">
/* VTTTalk Unicode 0x1ed4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1530, 0, 0
OFFSET[R], 1536, 351, 248
SVTCA[Y]
CALL[], 20, 4, 1, 1, 140, 86
SHC[2], 2
CALL[], 23, 21, 0, 0, 53, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED5">
/* VTTTalk Unicode 0x1ed5 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1499, 0, 0
OFFSET[R], 1505, 377, 340
SVTCA[Y]
CALL[], 28, 6, 1, 1, 168, 86
SHC[2], 2
CALL[], 31, 25, 1, 0, -40, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED6">
/* VTTTalk Unicode 0x1ed6 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1530, 0, 0
OFFSET[R], 1534, 10, 328
SVTCA[Y]
CALL[], 20, 4, 1, 1, 140, 86
SHC[2], 2
CALL[], 23, 17, 1, 1, 54, 86
SHC[2], 3



    </glyphProgram>

    <glyphProgram name="uni1ED7">
/* VTTTalk Unicode 0x1ed7 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1499, 0, 0
OFFSET[R], 1503, 10, 458
SVTCA[Y]
CALL[], 28, 6, 1, 1, 168, 86
SHC[2], 2
CALL[], 31, 25, 1, 1, 56, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1ED8">
/* VTTTalk Unicode 0x1ed8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 96, 0, 0
OFFSET[R], 1508, 0, 0
OFFSET[R], 1530, 0, 0
SVTCA[Y]
CALL[], 22, 0, 1, 1, -132, 86
SHC[2], 2
CALL[], 32, 4, 1, 1, 140, 86
SHC[2], 3



    </glyphProgram>

    <glyphProgram name="uni1ED9">
/* VTTTalk Unicode 0x1ed9 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 286, 0, 0
OFFSET[R], 1508, 0, 0
OFFSET[R], 1499, 0, 0
SVTCA[Y]
CALL[], 30, 0, 1, 1, -132, 86
SHC[2], 2
CALL[], 40, 6, 1, 1, 168, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EDA">
/* VTTTalk Unicode 0x1eda */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 109, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 24, 4, 1, 1, 140, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EDB">
/* VTTTalk Unicode 0x1edb */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 299, 0, 0
OFFSET[R], 1497, 30, 0
SVTCA[Y]
CALL[], 32, 6, 1, 1, 168, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EDC">
/* VTTTalk Unicode 0x1edc */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 109, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 24, 4, 1, 1, 140, 86
SHC[2], 3


    </glyphProgram>

    <glyphProgram name="uni1EDD">
/* VTTTalk Unicode 0x1edd */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 299, 0, 0
OFFSET[R], 1496, 45, 0
SVTCA[Y]
CALL[], 32, 6, 1, 1, 168, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EDE">
/* VTTTalk Unicode 0x1ede */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 109, 0, 0
OFFSET[R], 1536, 0, 0
SVTCA[Y]
CALL[], 24, 4, 1, 1, 89, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EDF">
/* VTTTalk Unicode 0x1edf */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 299, 0, 0
OFFSET[R], 1505, 20, 0
SVTCA[Y]
CALL[], 32, 6, 1, 1, 168, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EE0">
/* VTTTalk Unicode 0x1ee0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 109, 0, 0
OFFSET[R], 1534, 10, 0
SVTCA[Y]
CALL[], 24, 4, 1, 1, 126, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EE1">
/* VTTTalk Unicode 0x1ee1 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 299, 0, 0
OFFSET[R], 1503, 10, 0
SVTCA[Y]
CALL[], 32, 6, 1, 1, 146, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EE2">
/* VTTTalk Unicode 0x1ee2 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 109, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 30, 0, 1, 1, -132, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EE3">
/* VTTTalk Unicode 0x1ee3 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 299, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 38, 0, 1, 1, -132, 86
SHC[2], 3

    </glyphProgram>

    <glyphProgram name="uni1EE4">
/* VTTTalk Unicode 0x1ee4 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 22, 0, 1, 1, -132, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EE5">
/* VTTTalk Unicode 0x1ee5 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1508, -30, 0
SVTCA[Y]
CALL[], 29, 0, 1, 1, -132, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EE6">
/* VTTTalk Unicode 0x1ee6 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 142, 0, 0
OFFSET[R], 1536, 0, 0
SVTCA[Y]
CALL[], 16, 11, 1, 1, 109, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EE7">
/* VTTTalk Unicode 0x1ee7 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1505, 10, 0
SVTCA[Y]
CALL[], 23, 13, 1, 1, 188, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni1EE8">
/* VTTTalk Unicode 0x1ee8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 150, 0, 0
OFFSET[R], 1528, 0, 0
SVTCA[Y]
CALL[], 22, 15, 1, 1, 160, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1EE9">
/* VTTTalk Unicode 0x1ee9 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 340, 0, 0
OFFSET[R], 1497, 20, 0
SVTCA[Y]
CALL[], 31, 4, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EEA">
/* VTTTalk Unicode 0x1eea */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 150, 0, 0
OFFSET[R], 1527, 0, 0
SVTCA[Y]
CALL[], 22, 15, 1, 1, 160, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1EEB">
/* VTTTalk Unicode 0x1eeb */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 340, 0, 0
OFFSET[R], 1496, 35, 0
SVTCA[Y]
CALL[], 31, 18, 1, 0, -95, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni1EEC">
/* VTTTalk Unicode 0x1eec */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 150, 0, 0
OFFSET[R], 1536, 0, 0
SVTCA[Y]
CALL[], 21, 3, 1, 1, 109, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni1EED">
/* VTTTalk Unicode 0x1eed */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 340, 0, 0
OFFSET[R], 1505, 10, 0
SVTCA[Y]
CALL[], 31, 18, 1, 0, -95, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni1EEE">
/* VTTTalk Unicode 0x1eee */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 150, 0, 0
OFFSET[R], 1534, 10, 0
SVTCA[Y]
CALL[], 21, 3, 1, 1, 146, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EEF">
/* VTTTalk Unicode 0x1eef */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 340, 0, 0
OFFSET[R], 1503, 0, 0
SVTCA[Y]
CALL[], 31, 4, 1, 1, 166, 86
SHC[2], 1
    </glyphProgram>

    <glyphProgram name="uni1EF0">
/* VTTTalk Unicode 0x1ef0 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 150, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 27, 0, 1, 1, -132, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EF1">
/* VTTTalk Unicode 0x1ef1 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 340, 0, 0
OFFSET[R], 1508, -30, 0
SVTCA[Y]
CALL[], 37, 0, 1, 1, -132, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EF4">
/* VTTTalk Unicode 0x1ef4 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0
OFFSET[R], 1508, 0, 0
SVTCA[Y]
CALL[], 16, 0, 1, 1, -152, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EF5">
/* VTTTalk Unicode 0x1ef5 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0
OFFSET[R], 1508, 345, 0
SVTCA[Y]
CALL[], 18, 12, 2, 0, 60, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EF6">
/* VTTTalk Unicode 0x1ef6 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0
OFFSET[R], 1536, 0, 0
SVTCA[Y]
CALL[], 10, 6, 1, 1, 109, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="uni1EF7">
/* VTTTalk Unicode 0x1ef7 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0
OFFSET[R], 1505, 35, 0
SVTCA[Y]
CALL[], 18, 5, 1, 1, 188, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni1EF8">
/* VTTTalk Unicode 0x1ef8 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 168, 0, 0
OFFSET[R], 1534, 10, 0
SVTCA[Y]
CALL[], 10, 2, 1, 1, 146, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uni1EF9">
/* VTTTalk Unicode 0x1ef9 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0
OFFSET[R], 1503, 25, 0
SVTCA[Y]
CALL[], 18, 1, 1, 1, 166, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="uni2008">
/* TT glyph 1581, char 0x2008 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2010">
USEMYMETRICS[]
OFFSET[R], 689, 0, 0

    </glyphProgram>

    <glyphProgram name="uni2011">
USEMYMETRICS[]
OFFSET[R], 1550, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2015">
/* VTTTalk Unicode 0x2015 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 692, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2028">
/* TT glyph 769, char 0x2028 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni203E">
/* TT glyph 678, char 0x203e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 0
CALL[], 0, 1, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2070">
/* TT glyph 646, char 0x2070 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 3, 114
CALL[], 6, 18, 106
CALL[], 18, 12, 105
CALL[], 12, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2074">
/* TT glyph 650, char 0x2074 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 6, 2, 114
CALL[], 6, 8, 106
SHP[2], 4
IP[], 3
CALL[], 8, 11, 106
SHP[2], 0
CALL[], 11, 12, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2075">
/* TT glyph 651, char 0x2075 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 14, 2, 114
CALL[], 14, 17, 106
CALL[], 17, 20, 105
CALL[], 20, 10, 106
CALL[], 10, 6, 105
CALL[], 6, 0, 106
SRP2[], 10
IP[], 3
IP[], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2076">
/* TT glyph 652, char 0x2076 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 7, 3, 114
CALL[], 7, 8, 106
CALL[], 8, 15, 105
SHP[2], 11
CALL[], 15, 25, 106
CALL[], 25, 21, 105
CALL[], 21, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2077">
/* TT glyph 653, char 0x2077 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 5, 2, 114
CALL[], 5, 2, 106
CALL[], 2, 0, 105
IP[], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2078">
/* TT glyph 654, char 0x2078 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 12, 3, 114
CALL[], 12, 28, 106
CALL[], 28, 24, 105
CALL[], 24, 36, 106
IP[], 6
IP[], 18
CALL[], 36, 32, 105
CALL[], 32, 0, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2079">
/* TT glyph 655, char 0x2079 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 14, 3, 114
CALL[], 14, 25, 106
CALL[], 25, 21, 105
CALL[], 21, 8, 106
SHP[2], 5
CALL[], 8, 1, 105
CALL[], 1, 0, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni207F">
/* TT glyph 385, char 0x207f */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
CALL[], 1, 0, 106
SHP[2], 12
CALL[], 7, 3, 114
SHP[2], 3
CALL[], 7, 15, 106
SHP[2], 17
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2080">
/* VTTTalk Unicode 0x2080 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 646, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2081">
/* VTTTalk Unicode 0x2081 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 647, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2082">
/* VTTTalk Unicode 0x2082 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 648, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2083">
/* VTTTalk Unicode 0x2083 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 649, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2084">
/* VTTTalk Unicode 0x2084 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 650, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2085">
/* VTTTalk Unicode 0x2085 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 651, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2086">
/* VTTTalk Unicode 0x2086 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 652, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2087">
/* VTTTalk Unicode 0x2087 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 653, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2088">
/* VTTTalk Unicode 0x2088 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 654, 0, -805

    </glyphProgram>

    <glyphProgram name="uni2089">
/* VTTTalk Unicode 0x2089 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 655, 0, -805

    </glyphProgram>

    <glyphProgram name="uni20A0">
/* TT glyph 778, char 0x20a0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 18, 114
CALL[], 0, 22, 105
IP[], 20
CALL[], 20, 1, 106
CALL[], 22, 23, 106
CALL[], 0, 29, 106
SRP1[], 23
IP[], 28
IP[], 25
CALL[], 8, 3, 114
SHP[2], 11
CALL[], 8, 14, 106
SHP[2], 12
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20A6">
/* TT glyph 788, char 0x20a6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 16
CALL[], 5, 2, 114
SHP[2], 9
SRP1[], 9
SRP2[], 0
IP[], 3
MDAP[R], 3
SRP2[], 9
IP[], 21
SRP2[], 0
IP[], 25
CALL[], 3, 2, 106
SHP[2], 18
SRP1[], 18
SHP[1], 27
SRP1[], 27
SHP[1], 14
SRP1[], 3
SHP[1], 22
SRP1[], 22
SHP[1], 7
SRP1[], 7
SHP[1], 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20A8">
/* TT glyph 792, char 0x20a8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 9
CALL[], 1, 2, 114
CALL[], 1, 16, 106
SRP2[], 0
IP[], 17
MDAP[R], 17
CALL[], 17, 13, 106
IP[], 10
IP[], 7
CALL[], 24, 11, 114
CALL[], 24, 29, 106
CALL[], 38, 7, 114
CALL[], 38, 43, 106
SRP2[], 24
SLOOP[], 6
IP[], 31, 50, 33, 48, 36, 45
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20A9">
/* TT glyph 798, char 0x20a9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 20
CALL[], 5, 2, 114
SHP[2], 13
SRP1[], 0
SRP2[], 13
IP[], 3
MDAP[R], 3
SRP2[], 0
IP[], 32
IP[], 28
SRP2[], 13
IP[], 24
IP[], 9
CALL[], 3, 2, 106
SHP[2], 30
SRP1[], 30
SHP[1], 21
SRP1[], 21
SHP[1], 34
SRP1[], 34
SHP[1], 17
SRP1[], 3
SHP[1], 8
SRP1[], 8
SHP[1], 26
SRP1[], 26
SHP[1], 12
SRP1[], 12
SHP[1], 16
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20AA">
/* TT glyph 794, char 0x20aa */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 8, 8, 114
SHP[2], 0
CALL[], 0, 3, 106
SMD[], 96
MDRP[m&gt;RWh], 12
CALL[], 8, 9, 106
SHP[2], 5
CALL[], 9, 14, 106
MDRP[m&gt;RWh], 1
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20AD">
/* TT glyph 783, char 0x20ad */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
SHP[2], 21
CALL[], 5, 2, 114
SHP[2], 12
SRP1[], 0
IP[], 4
MDAP[R], 4
SRP2[], 0
IP[], 7
SHP[1], 16
CALL[], 4, 1, 106
SHP[2], 19
CALL[], 7, 25, 106
IP[], 22
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20AE">
/* TT glyph 797, char 0x20ae */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 9, 2, 114
CALL[], 9, 8, 106
SHP[2], 12
CALL[], 22, 8, 114
SRP1[], 8
IP[], 2
IP[], 3
SRP1[], 2
SHP[1], 17
CALL[], 2, 23, 106
SHP[2], 20
SRP1[], 3
SHP[1], 16
CALL[], 3, 6, 106
SHP[2], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20B1">
/* TT glyph 790, char 0x20b1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 12, 114
CALL[], 9, 4, 114
CALL[], 9, 30, 106
SRP2[], 0
IP[], 31
MDAP[R], 31
IP[], 37
SRP1[], 37
SHP[1], 6
SHP[1], 16
SRP1[], 31
SHP[1], 7
SHP[1], 13
CALL[], 31, 38, 106
SHP[2], 3
SHP[2], 20
CALL[], 38, 44, 106
SHP[2], 2
SHP[2], 23
MDRP[m&gt;RWh], 45
CALL[], 45, 27, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B2">
/* TT glyph 781, char 0x20b2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 9, 3, 114
SHP[2], 6
SMD[], 96
MDRP[m&gt;RBl], 8
SHP[1], 12
CALL[], 9, 15, 106
SHP[2], 13
SHP[2], 26
CALL[], 21, 9, 114
SHP[2], 1
MDRP[m&gt;RBl], 22
SRP2[], 9
IP[], 17
CALL[], 17, 34, 106
CALL[], 21, 30, 106
SHP[2], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B4">
/* TT glyph 782, char 0x20b4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 18, 3, 114
SHP[2], 15
CALL[], 18, 11, 106
SHP[2], 14
CALL[], 43, 9, 114
CALL[], 43, 36, 106
SRP2[], 18
IP[], 1
IP[], 5
MDAP[R], 1
MDAP[R], 5
SRP1[], 43
SRP2[], 1
IP[], 0
SRP1[], 5
IP[], 4
SRP1[], 0
SHP[1], 30
SHP[2], 29
SRP1[], 4
SHP[1], 26
SRP1[], 5
SHP[1], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B5">
/* TT glyph 771, char 0x20b5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 9, 114
SMD[], 96
MDRP[m&gt;RBl], 0
SHP[1], 23
CALL[], 1, 27, 106
SHP[2], 16
CALL[], 6, 3, 114
MDRP[m&gt;RBl], 7
SHP[1], 9
SRP1[], 9
SHP[1], 12
CALL[], 6, 28, 106
SHP[2], 15
SRP1[], 15
SHP[1], 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B8">
/* TT glyph 796, char 0x20b8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 2, 114
CALL[], 1, 0, 106
SRP0[], 1
MDRP[m&lt;RWh], 7
CALL[], 7, 6, 106
SHP[2], 10
CALL[], 4, 8, 114
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni20B9">
/* TT glyph 793, char 0x20b9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 12, 2, 114
CALL[], 12, 11, 106
SHP[2], 15
CALL[], 11, 7, 105
SHP[2], 18
CALL[], 7, 6, 106
SHP[2], 21
CALL[], 6, 1, 105
CALL[], 1, 0, 106
IP[], 23
CALL[], 24, 8, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20BA">
/* TT glyph 786, char 0x20ba */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 3, 114
CALL[], 28, 9, 114
SHP[2], 25
SRP1[], 7
IP[], 13
IP[], 12
SRP1[], 13
SHP[1], 2
CALL[], 13, 16, 106
SHP[2], 32
SRP1[], 12
SHP[1], 3
CALL[], 12, 9, 106
SHP[2], 6
CALL[], 28, 21, 106
SHP[2], 24
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20BC">
/* TT glyph 787, char 0x20bc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MIAP[R], 0, 8
SHP[2], 15
SRP1[], 15
SHP[1], 10
MIAP[R], 4, 2
IP[], 3
SRP1[], 3
SHP[1], 6
CALL[], 3, 16, 106
SHP[2], 13
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20BD">
/* TT glyph 791, char 0x20bd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 21, 106
SHP[2], 2
CALL[], 21, 18, 106
SHP[2], 3
SMD[], 96
MDRP[m&gt;RGr], 6
SHP[2], 17
CALL[], 6, 7, 106
SHP[2], 25
MIAP[R], 9, 2
CALL[], 9, 24, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni20BE">
/* TT glyph 784, char 0x20be */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 0, 1, 106
SHP[2], 44
CALL[], 14, 3, 114
SHP[2], 9
SHP[2], 19
SMD[], 96
MDRP[m&gt;RGr], 10
SHP[2], 17
SRP2[], 0
IP[], 24
MDAP[R], 24
SHP[1], 28
SRP1[], 28
SHP[1], 35
CALL[], 14, 32, 106
SHP[2], 27
SHP[2], 37
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2105">
/* TT glyph 1120, char 0x2105 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 6, 17, 114
CALL[], 6, 12, 106
CALL[], 12, 18, 105
CALL[], 18, 0, 106
CALL[], 0, 24, 105
CALL[], 24, 23, 106
CALL[], 27, 19, 114
CALL[], 27, 39, 106
CALL[], 39, 45, 105
CALL[], 45, 33, 106
CALL[], 33, 26, 105
CALL[], 26, 25, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2113">
/* TT glyph 1127, char 0x2113 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 18, 114
CALL[], 0, 22, 106
CALL[], 13, 17, 114
CALL[], 13, 31, 106
SRP2[], 0
IP[], 6
MDAP[R], 6
CALL[], 6, 5, 106
SHP[2], 3
SRP1[], 3
SHP[1], 19
SRP1[], 6
SHP[1], 8
SRP1[], 8
SHP[1], 25
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2116">
/* TT glyph 1129, char 0x2116 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 2, 16, 114
SHP[2], 6
CALL[], 2, 7, 105
SHP[2], 11
IP[], 10
IP[], 4
CALL[], 36, 18, 114
CALL[], 36, 37, 106
CALL[], 37, 12, 105
CALL[], 12, 24, 106
CALL[], 24, 30, 105
CALL[], 30, 18, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2117">
/* TT glyph 1118, char 0x2117 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 18, 114
CALL[], 0, 12, 106
CALL[], 6, 16, 114
CALL[], 6, 18, 106
SRP2[], 0
SLOOP[], 3
IP[], 25, 33, 24
MDAP[R], 25
MDAP[R], 33
MDAP[R], 24
CALL[], 25, 36, 106
CALL[], 33, 37, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2126">
/* VTTTalk Unicode 0x2126 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 557, 0, 0


    </glyphProgram>

    <glyphProgram name="uni21E1">
/* TT glyph 1582, char 0x21e1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 1, 17, 114
CALL[], 20, 18, 114
SRP1[], 1
IP[], 17
MDAP[R], 17
IP[], 21
SRP2[], 1
SLOOP[], 3
IP[], 4, 11, 8
CALL[], 21, 16, 105
CALL[], 17, 12, 105
CALL[], 8, 13, 105
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni21E3">
/* TT glyph 1583, char 0x21e3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 17, 114
CALL[], 0, 23, 105
SLOOP[], 5
IP[], 16, 13, 20, 7, 3
CALL[], 16, 11, 105
CALL[], 7, 8, 105
CALL[], 3, 4, 105
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2206">
/* VTTTalk Unicode 0x2206 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 537, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2215">
/* VTTTalk Unicode 0x2215 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

OFFSET[R], 679, 2, 0

    </glyphProgram>

    <glyphProgram name="uni2219">
/* VTTTalk Unicode 0x2219 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 674, 0, 0


    </glyphProgram>

    <glyphProgram name="uni2262">
/* TT glyph 1552, char 0x2262 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
MDAP[R], 15
SHP[1], 19
CALL[], 15, 14, 106
SHP[2], 22
CALL[], 14, 11, 105
SHP[2], 23
CALL[], 11, 10, 106
SHP[2], 26
CALL[], 10, 7, 105
SHP[2], 27
CALL[], 7, 6, 106
SHP[2], 30
CALL[], 6, 3, 105
SHP[2], 31
CALL[], 3, 2, 106
SHP[2], 34
CALL[], 17, 2, 114
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2263">
/* TT glyph 1553, char 0x2263 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 1
CALL[], 1, 0, 106
CALL[], 0, 5, 105
CALL[], 5, 4, 106
CALL[], 4, 9, 105
CALL[], 9, 8, 106
CALL[], 8, 13, 105
CALL[], 13, 12, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni23AF">
/* VTTTalk Unicode 0x23af */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 1048, 0, 0

    </glyphProgram>

    <glyphProgram name="uni2500">
/* TT glyph 1048, char 0x2500 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2501">
/* TT glyph 1010, char 0x2501 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2502">
/* TT glyph 1061, char 0x2502 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2503">
/* TT glyph 1023, char 0x2503 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2504">
/* TT glyph 1054, char 0x2504 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2505">
/* TT glyph 1016, char 0x2505 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2506">
/* TT glyph 1055, char 0x2506 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2507">
/* TT glyph 1017, char 0x2507 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2508">
/* TT glyph 1051, char 0x2508 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2509">
/* TT glyph 1013, char 0x2509 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni250A">
/* TT glyph 1052, char 0x250a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni250B">
/* TT glyph 1014, char 0x250b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni250C">
/* TT glyph 1047, char 0x250c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni250D">
/* TT glyph 998, char 0x250d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni250E">
/* TT glyph 992, char 0x250e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni250F">
/* TT glyph 1009, char 0x250f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2510">
/* TT glyph 1046, char 0x2510 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2511">
/* TT glyph 996, char 0x2511 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2512">
/* TT glyph 990, char 0x2512 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2513">
/* TT glyph 1008, char 0x2513 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2514">
/* TT glyph 1060, char 0x2514 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2515">
/* TT glyph 1087, char 0x2515 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2516">
/* TT glyph 1081, char 0x2516 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2517">
/* TT glyph 1022, char 0x2517 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2518">
/* TT glyph 1059, char 0x2518 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2519">
/* TT glyph 1085, char 0x2519 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni251A">
/* TT glyph 1079, char 0x251a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni251B">
/* TT glyph 1020, char 0x251b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni251C">
/* TT glyph 1064, char 0x251c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni251D">
/* TT glyph 1099, char 0x251d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni251E">
/* TT glyph 1080, char 0x251e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni251F">
/* TT glyph 993, char 0x251f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2520">
/* TT glyph 1096, char 0x2520 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2521">
/* TT glyph 999, char 0x2521 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2522">
/* TT glyph 1086, char 0x2522 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2523">
/* TT glyph 1026, char 0x2523 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2524">
/* TT glyph 1063, char 0x2524 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2525">
/* TT glyph 1098, char 0x2525 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2526">
/* TT glyph 1078, char 0x2526 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2527">
/* TT glyph 991, char 0x2527 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2528">
/* TT glyph 1095, char 0x2528 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2529">
/* TT glyph 997, char 0x2529 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni252A">
/* TT glyph 1084, char 0x252a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni252B">
/* TT glyph 1025, char 0x252b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni252C">
/* TT glyph 1045, char 0x252c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni252D">
/* TT glyph 1028, char 0x252d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni252E">
/* TT glyph 1066, char 0x252e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni252F">
/* TT glyph 995, char 0x252f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2530">
/* TT glyph 989, char 0x2530 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2531">
/* TT glyph 1069, char 0x2531 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2532">
/* TT glyph 1031, char 0x2532 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2533">
/* TT glyph 1007, char 0x2533 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2534">
/* TT glyph 1058, char 0x2534 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2535">
/* TT glyph 1029, char 0x2535 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2536">
/* TT glyph 1067, char 0x2536 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2537">
/* TT glyph 1083, char 0x2537 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2538">
/* TT glyph 1077, char 0x2538 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2539">
/* TT glyph 1070, char 0x2539 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni253A">
/* TT glyph 1032, char 0x253a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni253B">
/* TT glyph 1019, char 0x253b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni253C">
/* TT glyph 1062, char 0x253c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni253D">
/* TT glyph 1030, char 0x253d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni253E">
/* TT glyph 1068, char 0x253e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni253F">
/* TT glyph 1097, char 0x253f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2540">
/* TT glyph 1076, char 0x2540 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2541">
/* TT glyph 994, char 0x2541 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2542">
/* TT glyph 1094, char 0x2542 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2543">
/* TT glyph 1034, char 0x2543 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2544">
/* TT glyph 1072, char 0x2544 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2545">
/* TT glyph 1027, char 0x2545 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2546">
/* TT glyph 1065, char 0x2546 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2547">
/* TT glyph 1000, char 0x2547 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2548">
/* TT glyph 1082, char 0x2548 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2549">
/* TT glyph 1071, char 0x2549 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni254A">
/* TT glyph 1033, char 0x254a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni254B">
/* TT glyph 1024, char 0x254b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni254C">
/* TT glyph 1042, char 0x254c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni254D">
/* TT glyph 1004, char 0x254d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni254E">
/* TT glyph 1043, char 0x254e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni254F">
/* TT glyph 1005, char 0x254f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2550">
/* TT glyph 978, char 0x2550 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2551">
/* TT glyph 982, char 0x2551 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2552">
/* TT glyph 1003, char 0x2552 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2553">
/* TT glyph 988, char 0x2553 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2554">
/* TT glyph 977, char 0x2554 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2555">
/* TT glyph 1002, char 0x2555 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2556">
/* TT glyph 987, char 0x2556 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2557">
/* TT glyph 976, char 0x2557 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2558">
/* TT glyph 1090, char 0x2558 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2559">
/* TT glyph 1075, char 0x2559 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni255A">
/* TT glyph 981, char 0x255a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni255B">
/* TT glyph 1089, char 0x255b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni255C">
/* TT glyph 1074, char 0x255c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni255D">
/* TT glyph 980, char 0x255d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni255E">
/* TT glyph 1102, char 0x255e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni255F">
/* TT glyph 1093, char 0x255f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2560">
/* TT glyph 985, char 0x2560 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2561">
/* TT glyph 1101, char 0x2561 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2562">
/* TT glyph 1092, char 0x2562 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2563">
/* TT glyph 984, char 0x2563 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2564">
/* TT glyph 1001, char 0x2564 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2565">
/* TT glyph 986, char 0x2565 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2566">
/* TT glyph 975, char 0x2566 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2567">
/* TT glyph 1088, char 0x2567 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2568">
/* TT glyph 1073, char 0x2568 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2569">
/* TT glyph 979, char 0x2569 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni256A">
/* TT glyph 1100, char 0x256a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni256B">
/* TT glyph 1091, char 0x256b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni256C">
/* TT glyph 983, char 0x256c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni256D">
/* TT glyph 1036, char 0x256d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni256E">
/* TT glyph 1035, char 0x256e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni256F">
/* TT glyph 1037, char 0x256f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2570">
/* TT glyph 1038, char 0x2570 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2571">
/* TT glyph 1041, char 0x2571 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2572">
/* TT glyph 1040, char 0x2572 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2573">
/* TT glyph 1039, char 0x2573 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2574">
/* TT glyph 1049, char 0x2574 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2575">
/* TT glyph 1056, char 0x2575 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2576">
/* TT glyph 1053, char 0x2576 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2577">
/* TT glyph 1044, char 0x2577 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2578">
/* TT glyph 1011, char 0x2578 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2579">
/* TT glyph 1018, char 0x2579 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni257A">
/* TT glyph 1015, char 0x257a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni257B">
/* TT glyph 1006, char 0x257b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni257C">
/* TT glyph 1050, char 0x257c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni257D">
/* TT glyph 1057, char 0x257d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni257E">
/* TT glyph 1012, char 0x257e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni257F">
/* TT glyph 1021, char 0x257f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2581">
/* TT glyph 842, char 0x2581 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2582">
/* TT glyph 843, char 0x2582 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2583">
/* TT glyph 844, char 0x2583 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2585">
/* TT glyph 846, char 0x2585 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2586">
/* TT glyph 847, char 0x2586 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2587">
/* TT glyph 848, char 0x2587 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2589">
/* TT glyph 858, char 0x2589 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni258A">
/* TT glyph 857, char 0x258a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni258B">
/* TT glyph 856, char 0x258b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni258D">
/* TT glyph 854, char 0x258d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni258E">
/* TT glyph 853, char 0x258e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni258F">
/* TT glyph 852, char 0x258f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2594">
/* TT glyph 851, char 0x2594 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2595">
/* TT glyph 860, char 0x2595 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2596">
/* TT glyph 861, char 0x2596 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2597">
/* TT glyph 862, char 0x2597 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2598">
/* TT glyph 863, char 0x2598 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2599">
/* TT glyph 864, char 0x2599 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni259A">
/* TT glyph 865, char 0x259a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni259B">
/* TT glyph 866, char 0x259b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni259C">
/* TT glyph 867, char 0x259c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni259D">
/* TT glyph 868, char 0x259d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni259E">
/* TT glyph 869, char 0x259e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni259F">
/* TT glyph 870, char 0x259f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A1">
/* TT glyph 919, char 0x25a1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A2">
/* TT glyph 920, char 0x25a2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A3">
/* TT glyph 921, char 0x25a3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A4">
/* TT glyph 923, char 0x25a4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A5">
/* TT glyph 924, char 0x25a5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A6">
/* TT glyph 925, char 0x25a6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A7">
/* TT glyph 926, char 0x25a7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A8">
/* TT glyph 927, char 0x25a8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25A9">
/* TT glyph 928, char 0x25a9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25AA">
/* TT glyph 929, char 0x25aa */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25AB">
/* TT glyph 930, char 0x25ab */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25AD">
/* TT glyph 916, char 0x25ad */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25AE">
/* TT glyph 914, char 0x25ae */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25AF">
/* TT glyph 917, char 0x25af */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B0">
/* TT glyph 912, char 0x25b0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B1">
/* TT glyph 913, char 0x25b1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B3">
/* TT glyph 948, char 0x25b3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B4">
/* TT glyph 959, char 0x25b4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B5">
/* TT glyph 963, char 0x25b5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B6">
/* TT glyph 945, char 0x25b6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B7">
/* TT glyph 949, char 0x25b7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B8">
/* TT glyph 960, char 0x25b8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25B9">
/* TT glyph 964, char 0x25b9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25BB">
/* TT glyph 957, char 0x25bb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25BD">
/* TT glyph 950, char 0x25bd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25BE">
/* TT glyph 961, char 0x25be */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25BF">
/* TT glyph 965, char 0x25bf */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C0">
/* TT glyph 947, char 0x25c0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C1">
/* TT glyph 951, char 0x25c1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C2">
/* TT glyph 962, char 0x25c2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C3">
/* TT glyph 966, char 0x25c3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C5">
/* TT glyph 958, char 0x25c5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C6">
/* TT glyph 904, char 0x25c6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C7">
/* TT glyph 905, char 0x25c7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C8">
/* TT glyph 910, char 0x25c8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25C9">
/* TT glyph 891, char 0x25c9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25CC">
/* TT glyph 890, char 0x25cc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25CD">
/* TT glyph 889, char 0x25cd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25CE">
/* TT glyph 892, char 0x25ce */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25CF">
/* TT glyph 874, char 0x25cf */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25D0">
/* TT glyph 877, char 0x25d0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25D1">
/* TT glyph 878, char 0x25d1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25D2">
/* TT glyph 879, char 0x25d2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25D3">
/* TT glyph 880, char 0x25d3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25D4">
/* TT glyph 883, char 0x25d4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25D5">
/* TT glyph 884, char 0x25d5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25D6">
/* TT glyph 881, char 0x25d6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25D7">
/* TT glyph 882, char 0x25d7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25DA">
/* TT glyph 896, char 0x25da */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25DB">
/* TT glyph 897, char 0x25db */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25DC">
/* TT glyph 900, char 0x25dc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25DD">
/* TT glyph 901, char 0x25dd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25DE">
/* TT glyph 902, char 0x25de */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25DF">
/* TT glyph 903, char 0x25df */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E0">
/* TT glyph 898, char 0x25e0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E1">
/* TT glyph 899, char 0x25e1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E2">
/* TT glyph 968, char 0x25e2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E3">
/* TT glyph 969, char 0x25e3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E4">
/* TT glyph 970, char 0x25e4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E5">
/* TT glyph 967, char 0x25e5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E7">
/* TT glyph 931, char 0x25e7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E8">
/* TT glyph 932, char 0x25e8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25E9">
/* TT glyph 933, char 0x25e9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25EA">
/* TT glyph 934, char 0x25ea */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25EB">
/* TT glyph 935, char 0x25eb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25EC">
/* TT glyph 952, char 0x25ec */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25ED">
/* TT glyph 953, char 0x25ed */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25EE">
/* TT glyph 954, char 0x25ee */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25EF">
/* TT glyph 876, char 0x25ef */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F0">
/* TT glyph 936, char 0x25f0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F1">
/* TT glyph 937, char 0x25f1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F2">
/* TT glyph 938, char 0x25f2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F3">
/* TT glyph 939, char 0x25f3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F4">
/* TT glyph 885, char 0x25f4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F5">
/* TT glyph 886, char 0x25f5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F6">
/* TT glyph 887, char 0x25f6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F7">
/* TT glyph 888, char 0x25f7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F8">
/* TT glyph 974, char 0x25f8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25F9">
/* TT glyph 971, char 0x25f9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25FA">
/* TT glyph 973, char 0x25fa */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25FB">
/* TT glyph 940, char 0x25fb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25FC">
/* TT glyph 941, char 0x25fc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25FD">
/* TT glyph 942, char 0x25fd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25FE">
/* TT glyph 943, char 0x25fe */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni25FF">
/* TT glyph 972, char 0x25ff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2619">
/* TT glyph 1103, char 0x2619 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 15
SHP[1], 18
CALL[], 15, 22, 106
SHP[2], 19
CALL[], 15, 30, 105
SHP[2], 33
SLOOP[], 9
IP[], 54, 0, 29, 58, 47, 24, 13, 9, 10
CALL[], 13, 4, 106
CALL[], 30, 37, 106
SHP[2], 34
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2713">
/* TT glyph 1110, char 0x2713 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 6, 2, 114
SRP2[], 0
IP[], 2
MDAP[R], 2
IP[], 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni2767">
/* TT glyph 1111, char 0x2767 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
MDAP[R], 15
SHP[1], 12
CALL[], 15, 8, 106
SHP[2], 11
CALL[], 15, 30, 105
SHP[2], 62
SLOOP[], 10
IP[], 41, 42, 0, 1, 37, 48, 6, 17, 21, 20
CALL[], 17, 26, 106
CALL[], 30, 58, 106
SHP[2], 61
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni276C">
/* TT glyph 687, char 0x276c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 4, 2, 114
SRP2[], 0
SLOOP[], 4
IP[], 1, 6, 2, 5
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uni276D">
/* TT glyph 688, char 0x276d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 3, 2, 114
CALL[], 7, 18, 114
SRP1[], 3
SLOOP[], 4
IP[], 6, 1, 2, 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni276E">
/* TT glyph 1548, char 0x276e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 0, 8, 114
CALL[], 3, 2, 114
SRP2[], 0
SLOOP[], 4
IP[], 1, 6, 2, 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni276F">
/* TT glyph 1549, char 0x276f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 4, 2, 114
CALL[], 7, 8, 114
SRP1[], 4
SLOOP[], 4
IP[], 6, 1, 2, 5
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="uni2800">
/* TT glyph 1233, char 0x2800 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2801">
/* TT glyph 1234, char 0x2801 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2802">
/* TT glyph 1362, char 0x2802 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2803">
/* TT glyph 1235, char 0x2803 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2804">
/* TT glyph 1426, char 0x2804 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2805">
/* TT glyph 1299, char 0x2805 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2806">
/* TT glyph 1363, char 0x2806 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2807">
/* TT glyph 1236, char 0x2807 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2808">
/* TT glyph 1458, char 0x2808 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2809">
/* TT glyph 1331, char 0x2809 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni280A">
/* TT glyph 1395, char 0x280a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni280B">
/* TT glyph 1268, char 0x280b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni280C">
/* TT glyph 1427, char 0x280c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni280D">
/* TT glyph 1300, char 0x280d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni280E">
/* TT glyph 1364, char 0x280e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni280F">
/* TT glyph 1237, char 0x280f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2810">
/* TT glyph 1474, char 0x2810 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2811">
/* TT glyph 1347, char 0x2811 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2812">
/* TT glyph 1411, char 0x2812 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2813">
/* TT glyph 1284, char 0x2813 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2814">
/* TT glyph 1443, char 0x2814 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2815">
/* TT glyph 1316, char 0x2815 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2816">
/* TT glyph 1380, char 0x2816 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2817">
/* TT glyph 1253, char 0x2817 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2818">
/* TT glyph 1459, char 0x2818 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2819">
/* TT glyph 1332, char 0x2819 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni281A">
/* TT glyph 1396, char 0x281a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni281B">
/* TT glyph 1269, char 0x281b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni281C">
/* TT glyph 1428, char 0x281c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni281D">
/* TT glyph 1301, char 0x281d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni281E">
/* TT glyph 1365, char 0x281e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni281F">
/* TT glyph 1238, char 0x281f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2820">
/* TT glyph 1482, char 0x2820 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2821">
/* TT glyph 1355, char 0x2821 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2822">
/* TT glyph 1419, char 0x2822 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2823">
/* TT glyph 1292, char 0x2823 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2824">
/* TT glyph 1451, char 0x2824 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2825">
/* TT glyph 1324, char 0x2825 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2826">
/* TT glyph 1388, char 0x2826 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2827">
/* TT glyph 1261, char 0x2827 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2828">
/* TT glyph 1467, char 0x2828 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2829">
/* TT glyph 1340, char 0x2829 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni282A">
/* TT glyph 1404, char 0x282a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni282B">
/* TT glyph 1277, char 0x282b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni282C">
/* TT glyph 1436, char 0x282c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni282D">
/* TT glyph 1309, char 0x282d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni282E">
/* TT glyph 1373, char 0x282e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni282F">
/* TT glyph 1246, char 0x282f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2830">
/* TT glyph 1475, char 0x2830 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2831">
/* TT glyph 1348, char 0x2831 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2832">
/* TT glyph 1412, char 0x2832 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2833">
/* TT glyph 1285, char 0x2833 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2834">
/* TT glyph 1444, char 0x2834 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2835">
/* TT glyph 1317, char 0x2835 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2836">
/* TT glyph 1381, char 0x2836 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2837">
/* TT glyph 1254, char 0x2837 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2838">
/* TT glyph 1460, char 0x2838 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2839">
/* TT glyph 1333, char 0x2839 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni283A">
/* TT glyph 1397, char 0x283a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni283B">
/* TT glyph 1270, char 0x283b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni283C">
/* TT glyph 1429, char 0x283c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni283D">
/* TT glyph 1302, char 0x283d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni283E">
/* TT glyph 1366, char 0x283e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni283F">
/* TT glyph 1239, char 0x283f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2840">
/* TT glyph 1486, char 0x2840 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2841">
/* TT glyph 1359, char 0x2841 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2842">
/* TT glyph 1423, char 0x2842 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2843">
/* TT glyph 1296, char 0x2843 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2844">
/* TT glyph 1455, char 0x2844 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2845">
/* TT glyph 1328, char 0x2845 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2846">
/* TT glyph 1392, char 0x2846 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2847">
/* TT glyph 1265, char 0x2847 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2848">
/* TT glyph 1471, char 0x2848 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2849">
/* TT glyph 1344, char 0x2849 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni284A">
/* TT glyph 1408, char 0x284a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni284B">
/* TT glyph 1281, char 0x284b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni284C">
/* TT glyph 1440, char 0x284c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni284D">
/* TT glyph 1313, char 0x284d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni284E">
/* TT glyph 1377, char 0x284e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni284F">
/* TT glyph 1250, char 0x284f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2850">
/* TT glyph 1479, char 0x2850 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2851">
/* TT glyph 1352, char 0x2851 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2852">
/* TT glyph 1416, char 0x2852 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2853">
/* TT glyph 1289, char 0x2853 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2854">
/* TT glyph 1448, char 0x2854 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2855">
/* TT glyph 1321, char 0x2855 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2856">
/* TT glyph 1385, char 0x2856 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2857">
/* TT glyph 1258, char 0x2857 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2858">
/* TT glyph 1464, char 0x2858 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2859">
/* TT glyph 1337, char 0x2859 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni285A">
/* TT glyph 1401, char 0x285a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni285B">
/* TT glyph 1274, char 0x285b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni285C">
/* TT glyph 1433, char 0x285c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni285D">
/* TT glyph 1306, char 0x285d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni285E">
/* TT glyph 1370, char 0x285e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni285F">
/* TT glyph 1243, char 0x285f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2860">
/* TT glyph 1483, char 0x2860 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2861">
/* TT glyph 1356, char 0x2861 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2862">
/* TT glyph 1420, char 0x2862 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2863">
/* TT glyph 1293, char 0x2863 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2864">
/* TT glyph 1452, char 0x2864 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2865">
/* TT glyph 1325, char 0x2865 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2866">
/* TT glyph 1389, char 0x2866 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2867">
/* TT glyph 1262, char 0x2867 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2868">
/* TT glyph 1468, char 0x2868 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2869">
/* TT glyph 1341, char 0x2869 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni286A">
/* TT glyph 1405, char 0x286a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni286B">
/* TT glyph 1278, char 0x286b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni286C">
/* TT glyph 1437, char 0x286c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni286D">
/* TT glyph 1310, char 0x286d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni286E">
/* TT glyph 1374, char 0x286e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni286F">
/* TT glyph 1247, char 0x286f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2870">
/* TT glyph 1476, char 0x2870 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2871">
/* TT glyph 1349, char 0x2871 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2872">
/* TT glyph 1413, char 0x2872 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2873">
/* TT glyph 1286, char 0x2873 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2874">
/* TT glyph 1445, char 0x2874 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2875">
/* TT glyph 1318, char 0x2875 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2876">
/* TT glyph 1382, char 0x2876 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2877">
/* TT glyph 1255, char 0x2877 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2878">
/* TT glyph 1461, char 0x2878 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2879">
/* TT glyph 1334, char 0x2879 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni287A">
/* TT glyph 1398, char 0x287a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni287B">
/* TT glyph 1271, char 0x287b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni287C">
/* TT glyph 1430, char 0x287c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni287D">
/* TT glyph 1303, char 0x287d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni287E">
/* TT glyph 1367, char 0x287e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni287F">
/* TT glyph 1240, char 0x287f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2880">
/* TT glyph 1488, char 0x2880 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2881">
/* TT glyph 1361, char 0x2881 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2882">
/* TT glyph 1425, char 0x2882 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2883">
/* TT glyph 1298, char 0x2883 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2884">
/* TT glyph 1457, char 0x2884 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2885">
/* TT glyph 1330, char 0x2885 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2886">
/* TT glyph 1394, char 0x2886 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2887">
/* TT glyph 1267, char 0x2887 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2888">
/* TT glyph 1473, char 0x2888 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2889">
/* TT glyph 1346, char 0x2889 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni288A">
/* TT glyph 1410, char 0x288a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni288B">
/* TT glyph 1283, char 0x288b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni288C">
/* TT glyph 1442, char 0x288c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni288D">
/* TT glyph 1315, char 0x288d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni288E">
/* TT glyph 1379, char 0x288e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni288F">
/* TT glyph 1252, char 0x288f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2890">
/* TT glyph 1481, char 0x2890 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2891">
/* TT glyph 1354, char 0x2891 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2892">
/* TT glyph 1418, char 0x2892 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2893">
/* TT glyph 1291, char 0x2893 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2894">
/* TT glyph 1450, char 0x2894 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2895">
/* TT glyph 1323, char 0x2895 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2896">
/* TT glyph 1387, char 0x2896 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2897">
/* TT glyph 1260, char 0x2897 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2898">
/* TT glyph 1466, char 0x2898 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2899">
/* TT glyph 1339, char 0x2899 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni289A">
/* TT glyph 1403, char 0x289a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni289B">
/* TT glyph 1276, char 0x289b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni289C">
/* TT glyph 1435, char 0x289c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni289D">
/* TT glyph 1308, char 0x289d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni289E">
/* TT glyph 1372, char 0x289e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni289F">
/* TT glyph 1245, char 0x289f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A0">
/* TT glyph 1485, char 0x28a0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A1">
/* TT glyph 1358, char 0x28a1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A2">
/* TT glyph 1422, char 0x28a2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A3">
/* TT glyph 1295, char 0x28a3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A4">
/* TT glyph 1454, char 0x28a4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A5">
/* TT glyph 1327, char 0x28a5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A6">
/* TT glyph 1391, char 0x28a6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A7">
/* TT glyph 1264, char 0x28a7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A8">
/* TT glyph 1470, char 0x28a8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28A9">
/* TT glyph 1343, char 0x28a9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28AA">
/* TT glyph 1407, char 0x28aa */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28AB">
/* TT glyph 1280, char 0x28ab */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28AC">
/* TT glyph 1439, char 0x28ac */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28AD">
/* TT glyph 1312, char 0x28ad */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28AE">
/* TT glyph 1376, char 0x28ae */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28AF">
/* TT glyph 1249, char 0x28af */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B0">
/* TT glyph 1478, char 0x28b0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B1">
/* TT glyph 1351, char 0x28b1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B2">
/* TT glyph 1415, char 0x28b2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B3">
/* TT glyph 1288, char 0x28b3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B4">
/* TT glyph 1447, char 0x28b4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B5">
/* TT glyph 1320, char 0x28b5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B6">
/* TT glyph 1384, char 0x28b6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B7">
/* TT glyph 1257, char 0x28b7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B8">
/* TT glyph 1463, char 0x28b8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28B9">
/* TT glyph 1336, char 0x28b9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28BA">
/* TT glyph 1400, char 0x28ba */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28BB">
/* TT glyph 1273, char 0x28bb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28BC">
/* TT glyph 1432, char 0x28bc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28BD">
/* TT glyph 1305, char 0x28bd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28BE">
/* TT glyph 1369, char 0x28be */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28BF">
/* TT glyph 1242, char 0x28bf */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C0">
/* TT glyph 1487, char 0x28c0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C1">
/* TT glyph 1360, char 0x28c1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C2">
/* TT glyph 1424, char 0x28c2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C3">
/* TT glyph 1297, char 0x28c3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C4">
/* TT glyph 1456, char 0x28c4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C5">
/* TT glyph 1329, char 0x28c5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C6">
/* TT glyph 1393, char 0x28c6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C7">
/* TT glyph 1266, char 0x28c7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C8">
/* TT glyph 1472, char 0x28c8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28C9">
/* TT glyph 1345, char 0x28c9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28CA">
/* TT glyph 1409, char 0x28ca */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28CB">
/* TT glyph 1282, char 0x28cb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28CC">
/* TT glyph 1441, char 0x28cc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28CD">
/* TT glyph 1314, char 0x28cd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28CE">
/* TT glyph 1378, char 0x28ce */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28CF">
/* TT glyph 1251, char 0x28cf */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D0">
/* TT glyph 1480, char 0x28d0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D1">
/* TT glyph 1353, char 0x28d1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D2">
/* TT glyph 1417, char 0x28d2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D3">
/* TT glyph 1290, char 0x28d3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D4">
/* TT glyph 1449, char 0x28d4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D5">
/* TT glyph 1322, char 0x28d5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D6">
/* TT glyph 1386, char 0x28d6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D7">
/* TT glyph 1259, char 0x28d7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D8">
/* TT glyph 1465, char 0x28d8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28D9">
/* TT glyph 1338, char 0x28d9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28DA">
/* TT glyph 1402, char 0x28da */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28DB">
/* TT glyph 1275, char 0x28db */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28DC">
/* TT glyph 1434, char 0x28dc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28DD">
/* TT glyph 1307, char 0x28dd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28DE">
/* TT glyph 1371, char 0x28de */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28DF">
/* TT glyph 1244, char 0x28df */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E0">
/* TT glyph 1484, char 0x28e0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E1">
/* TT glyph 1357, char 0x28e1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E2">
/* TT glyph 1421, char 0x28e2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E3">
/* TT glyph 1294, char 0x28e3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E4">
/* TT glyph 1453, char 0x28e4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E5">
/* TT glyph 1326, char 0x28e5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E6">
/* TT glyph 1390, char 0x28e6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E7">
/* TT glyph 1263, char 0x28e7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E8">
/* TT glyph 1469, char 0x28e8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28E9">
/* TT glyph 1342, char 0x28e9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28EA">
/* TT glyph 1406, char 0x28ea */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28EB">
/* TT glyph 1279, char 0x28eb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28EC">
/* TT glyph 1438, char 0x28ec */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28ED">
/* TT glyph 1311, char 0x28ed */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28EE">
/* TT glyph 1375, char 0x28ee */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28EF">
/* TT glyph 1248, char 0x28ef */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F0">
/* TT glyph 1477, char 0x28f0 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F1">
/* TT glyph 1350, char 0x28f1 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F2">
/* TT glyph 1414, char 0x28f2 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F3">
/* TT glyph 1287, char 0x28f3 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F4">
/* TT glyph 1446, char 0x28f4 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F5">
/* TT glyph 1319, char 0x28f5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F6">
/* TT glyph 1383, char 0x28f6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F7">
/* TT glyph 1256, char 0x28f7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F8">
/* TT glyph 1462, char 0x28f8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28F9">
/* TT glyph 1335, char 0x28f9 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28FA">
/* TT glyph 1399, char 0x28fa */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28FB">
/* TT glyph 1272, char 0x28fb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28FC">
/* TT glyph 1431, char 0x28fc */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28FD">
/* TT glyph 1304, char 0x28fd */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28FE">
/* TT glyph 1368, char 0x28fe */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni28FF">
/* TT glyph 1241, char 0x28ff */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2A2F">
USEMYMETRICS[]
OFFSET[R], 809, 0, 0

    </glyphProgram>

    <glyphProgram name="uni2B12">
/* TT glyph 1148, char 0x2b12 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B13">
/* TT glyph 1151, char 0x2b13 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B14">
/* TT glyph 1149, char 0x2b14 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B15">
/* TT glyph 1152, char 0x2b15 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B16">
/* TT glyph 906, char 0x2b16 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2B17">
/* TT glyph 907, char 0x2b17 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2B18">
/* TT glyph 908, char 0x2b18 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2B19">
/* TT glyph 909, char 0x2b19 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2B1A">
/* TT glyph 922, char 0x2b1a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="uni2B1B">
/* TT glyph 1134, char 0x2b1b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B1C">
/* TT glyph 1155, char 0x2b1c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B1D">
/* TT glyph 1145, char 0x2b1d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B1E">
/* TT glyph 1161, char 0x2b1e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B1F">
/* TT glyph 1141, char 0x2b1f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B20">
/* TT glyph 1158, char 0x2b20 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B21">
/* TT glyph 1153, char 0x2b21 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B22">
/* TT glyph 1131, char 0x2b22 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B23">
/* TT glyph 1147, char 0x2b23 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B24">
/* TT glyph 1133, char 0x2b24 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B25">
/* TT glyph 1135, char 0x2b25 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B26">
/* TT glyph 1156, char 0x2b26 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B27">
/* TT glyph 1138, char 0x2b27 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B28">
/* TT glyph 1157, char 0x2b28 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B29">
/* TT glyph 1142, char 0x2b29 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B2A">
/* TT glyph 1143, char 0x2b2a */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B2B">
/* TT glyph 1159, char 0x2b2b */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B2C">
/* TT glyph 1132, char 0x2b2c */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B2D">
/* TT glyph 1154, char 0x2b2d */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B2E">
/* TT glyph 1144, char 0x2b2e */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2B2F">
/* TT glyph 1160, char 0x2b2f */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2BC5">
/* TT glyph 1140, char 0x2bc5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2BC6">
/* TT glyph 1136, char 0x2bc6 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2BC7">
/* TT glyph 1137, char 0x2bc7 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2BC8">
/* TT glyph 1139, char 0x2bc8 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2BCA">
/* TT glyph 1150, char 0x2bca */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uni2BCB">
/* TT glyph 1146, char 0x2bcb */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */

    </glyphProgram>

    <glyphProgram name="uniA774A774A774.liga">
/* TT glyph 379, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 16, 8, 114
SHP[2], 12
SRP1[], 12
SHP[1], 8
SRP1[], 8
SHP[1], 4
SRP1[], 4
SHP[1], 0
SRP1[], 0
SHP[1], 56
CALL[], 25, 2, 114
SRP1[], 16
IP[], 22
IP[], 19
MDAP[R], 22
MDAP[R], 19
CALL[], 22, 24, 106
SHP[2], 27
SRP1[], 27
SHP[1], 31
SRP1[], 31
SHP[1], 35
SRP1[], 35
SHP[1], 39
SRP1[], 39
SHP[1], 43
SRP1[], 43
SHP[1], 47
SRP1[], 22
SHP[1], 79
SRP1[], 79
SHP[1], 70
SRP1[], 70
SHP[1], 75
SRP1[], 75
SHP[1], 62
SRP1[], 62
SHP[1], 67
SRP1[], 67
SHP[1], 50
CALL[], 19, 17, 106
SHP[2], 14
SRP1[], 14
SHP[1], 10
SRP1[], 10
SHP[1], 6
SRP1[], 6
SHP[1], 2
SRP1[], 2
SHP[1], 58
SRP1[], 58
SHP[1], 54
SRP1[], 19
SHP[1], 76
SRP1[], 76
SHP[1], 71
SRP1[], 71
SHP[1], 72
SRP1[], 72
SHP[1], 63
SRP1[], 63
SHP[1], 64
SRP1[], 64
SHP[1], 51
SRP1[], 25
SHP[1], 29
SRP1[], 29
SHP[1], 33
SRP1[], 33
SHP[1], 37
SRP1[], 37
SHP[1], 41
SRP1[], 41
SHP[1], 45
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uniA774A774A774A774.liga">
/* TT glyph 380, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 24, 8, 114
SHP[2], 20
SRP1[], 20
SHP[1], 16
SRP1[], 16
SHP[1], 12
SRP1[], 12
SHP[1], 8
SRP1[], 8
SHP[1], 4
SRP1[], 4
SHP[1], 0
SRP1[], 0
SHP[1], 72
CALL[], 33, 2, 114
SRP2[], 24
IP[], 27
IP[], 30
MDAP[R], 27
MDAP[R], 30
CALL[], 27, 25, 106
SHP[2], 22
SRP1[], 22
SHP[1], 18
SRP1[], 18
SHP[1], 14
SRP1[], 14
SHP[1], 10
SRP1[], 10
SHP[1], 6
SRP1[], 6
SHP[1], 2
SRP1[], 2
SHP[1], 74
SRP1[], 74
SHP[1], 70
SRP1[], 27
SHP[1], 100
SRP1[], 100
SHP[1], 87
SRP1[], 87
SHP[1], 88
SRP1[], 88
SHP[1], 93
SRP1[], 93
SHP[1], 96
SRP1[], 96
SHP[1], 77
SRP1[], 77
SHP[1], 80
SRP1[], 80
SHP[1], 67
CALL[], 30, 32, 106
SHP[2], 35
SRP1[], 35
SHP[1], 39
SRP1[], 39
SHP[1], 43
SRP1[], 43
SHP[1], 47
SRP1[], 47
SHP[1], 51
SRP1[], 51
SHP[1], 55
SRP1[], 55
SHP[1], 59
SRP1[], 59
SHP[1], 63
SRP1[], 30
SHP[1], 103
SRP1[], 103
SHP[1], 86
SRP1[], 86
SHP[1], 91
SRP1[], 91
SHP[1], 92
SRP1[], 92
SHP[1], 99
SRP1[], 99
SHP[1], 76
SRP1[], 76
SHP[1], 83
SRP1[], 83
SHP[1], 66
SRP1[], 33
SHP[1], 37
SRP1[], 37
SHP[1], 41
SRP1[], 41
SHP[1], 45
SRP1[], 45
SHP[1], 49
SRP1[], 49
SHP[1], 53
SRP1[], 53
SHP[1], 57
SRP1[], 57
SHP[1], 61
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="uogonek">
/* TT glyph 348, char 0x173 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 9, 106
SHP[1], 37
CALL[], 4, 6, 114
SHP[2], 13
CALL[], 17, 10, 114
SHP[2], 36
CALL[], 17, 16, 106
SHP[2], 15
SRP0[], 17
MDRP[m&gt;RWh], 23
CALL[], 23, 28, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="upblock">
/* TT glyph 850, char 0x2580 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */


    </glyphProgram>

    <glyphProgram name="upsilon">
/* TT glyph 588, char 0x3c5 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 15, 106
CALL[], 8, 6, 114
CALL[], 8, 6, 106
SHP[1], 18
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="upsilondieresis">
/* VTTTalk Unicode 0x3cb */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 588, 0, 0
OFFSET[R], 1494, 2, 0
SVTCA[Y]
CALL[], 22, 18, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="upsilondieresistonos">
/* VTTTalk Unicode 0x3b0 */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 588, 0, 0
OFFSET[R], 1543, 22, 0
SVTCA[Y]
CALL[], 26, 8, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2
SHC[2], 3
    </glyphProgram>

    <glyphProgram name="upsilontonos">
/* VTTTalk Unicode 0x3cd */
/* ACT generated Mon Nov 18 23:17:19 2019 */

USEMYMETRICS[]
OFFSET[R], 588, 0, 0
OFFSET[R], 1541, 30, 0
SVTCA[Y]
CALL[], 22, 18, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="uring">
/* VTTTalk Unicode 0x16f */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1502, -10, 0
SVTCA[Y]
CALL[], 23, 13, 1, 1, 138, 86
SHC[2], 1
SHC[2], 2
    </glyphProgram>

    <glyphProgram name="utilde">
/* VTTTalk Unicode 0x169 */
/* ACT generated Mon Nov 18 21:54:11 2019 */

USEMYMETRICS[]
OFFSET[R], 332, 0, 0
OFFSET[R], 1503, 0, 0
SVTCA[Y]
CALL[], 23, 4, 1, 1, 166, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="v">
/* TT glyph 351, char 0x76 (v) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SHP[2], 6
SRP1[], 6
SRP2[], 0
IP[], 4
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="w">
/* TT glyph 352, char 0x77 (w) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 12
CALL[], 1, 6, 114
SHP[2], 6
SRP1[], 6
SHP[1], 10
SRP1[], 0
SRP2[], 10
SLOOP[], 3
IP[], 7, 4, 13
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="w_w_w.liga">
/* TT glyph 382, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
MIAP[R], 16, 10
SHP[1], 12
SRP1[], 12
SHP[1], 8
SRP1[], 8
SHP[1], 4
SRP1[], 4
SHP[1], 0
SHP[2], 44
CALL[], 17, 6, 114
SHP[2], 41
SRP2[], 16
SLOOP[], 3
IP[], 19, 14, 21
SRP1[], 19
SHP[1], 23
SRP1[], 23
SHP[1], 27
SRP1[], 27
SHP[1], 31
SRP1[], 31
SHP[1], 35
SRP1[], 35
SHP[1], 39
SRP1[], 14
SHP[1], 10
SRP1[], 10
SHP[1], 6
SRP1[], 6
SHP[1], 2
SRP1[], 2
SHP[1], 46
SRP1[], 21
SHP[1], 25
SRP1[], 25
SHP[1], 29
SRP1[], 29
SHP[1], 33
SRP1[], 33
SHP[1], 37
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="wacute">
/* VTTTalk Unicode 0x1e83 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 352, 0, 0
OFFSET[R], 1497, 20, 0
SVTCA[Y]
CALL[], 16, 5, 1, 1, 188, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="wcircumflex">
/* VTTTalk Unicode 0x175 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 352, 0, 0
OFFSET[R], 1499, -10, 0
SVTCA[Y]
CALL[], 20, 5, 1, 1, 188, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="wdieresis">
/* VTTTalk Unicode 0x1e85 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 352, 0, 0
OFFSET[R], 1494, -8, 0
SVTCA[Y]
CALL[], 16, 9, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2



    </glyphProgram>

    <glyphProgram name="wgrave">
/* VTTTalk Unicode 0x1e81 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 352, 0, 0
OFFSET[R], 1496, 35, 0
SVTCA[Y]
CALL[], 16, 5, 1, 1, 188, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="x">
/* TT glyph 357, char 0x78 (x) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
SHP[2], 9
CALL[], 2, 6, 114
SHP[2], 6
SRP2[], 9
SLOOP[], 4
IP[], 10, 1, 7, 4
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="x.multiply">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 809, 0, 0


    </glyphProgram>

    <glyphProgram name="xi">
/* TT glyph 581, char 0x3be */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 28, 106
CALL[], 15, 0, 114
CALL[], 15, 14, 106
SHP[2], 17
SRP2[], 0
IP[], 22
MDAP[R], 22
CALL[], 22, 23, 106
IP[], 5
IP[], 6
CALL[], 34, 15, 114
CALL[], 34, 35, 106
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="y">
/* TT glyph 358, char 0x79 (y) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 1, 6, 114
SHP[2], 6
SRP1[], 6
SRP2[], 0
IP[], 3
IP[], 7
CALL[], 12, 15, 114
CALL[], 12, 13, 106
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="yacute">
/* VTTTalk Unicode 0xfd */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0
OFFSET[R], 1497, 45, 0
SVTCA[Y]
CALL[], 18, 5, 1, 1, 188, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="ycircumflex">
/* VTTTalk Unicode 0x177 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0
OFFSET[R], 1499, 15, 0
SVTCA[Y]
CALL[], 22, 5, 1, 1, 188, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="ydieresis">
/* VTTTalk Unicode 0xff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0
OFFSET[R], 1494, 17, 0
SVTCA[Y]
CALL[], 18, 5, 1, 1, 178, 86
SHC[2], 1
SHC[2], 2



    </glyphProgram>

    <glyphProgram name="yen">
/* TT glyph 799, char 0xa5 */
/* VTT 6.33 compiler Fri May  1 10:06:43 2020 */
SVTCA[Y]
CALL[], 7, 4, 114
SHP[2], 11
CALL[], 22, 12, 114
CALL[], 22, 0, 105
SHP[2], 19
CALL[], 0, 1, 106
SHP[2], 18
CALL[], 1, 4, 105
SHP[2], 15
CALL[], 4, 5, 106
SHP[2], 14
SRP1[], 11
IP[], 9
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="ygrave">
/* VTTTalk Unicode 0x1ef3 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 358, 0, 0
OFFSET[R], 1496, 60, 0
SVTCA[Y]
CALL[], 18, 5, 1, 1, 188, 86
SHC[2], 1



    </glyphProgram>

    <glyphProgram name="z">
/* TT glyph 367, char 0x7a (z) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 10, 114
CALL[], 0, 7, 106
SHP[2], 1
CALL[], 4, 6, 114
CALL[], 4, 3, 106
SHP[2], 6
IUP[Y]
IUP[X]


    </glyphProgram>

    <glyphProgram name="zacute">
/* VTTTalk Unicode 0x17a */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 367, 0, 0
OFFSET[R], 1497, 30, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 188, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="zacute.loclPLK">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 367, 0, 0
OFFSET[R], 1539, 30, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="zcaron">
/* VTTTalk Unicode 0x17e */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 367, 0, 0
OFFSET[R], 1500, 0, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 188, 86
SHC[2], 1

    </glyphProgram>

    <glyphProgram name="zdotaccent">
/* VTTTalk Unicode 0x17c */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 367, 0, 0
OFFSET[R], 1495, -2, 0
SVTCA[Y]
CALL[], 10, 4, 1, 1, 178, 86
SHC[2], 1


    </glyphProgram>

    <glyphProgram name="zero">
/* TT glyph 605, char 0x30 (0) */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 11, 114
CALL[], 0, 8, 106
CALL[], 4, 3, 114
CALL[], 4, 12, 106
SRP2[], 0
IP[], 16
IP[], 22
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zero.dnom">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

USEMYMETRICS[]
OFFSET[R], 646, 0, -805

    </glyphProgram>

    <glyphProgram name="zero.numr">
/* VTTTalk Unicode 0xffff */
/* ACT generated Sun Nov 17 09:04:20 2019 */

USEMYMETRICS[]
OFFSET[R], 646, 0, 0




    </glyphProgram>

    <glyphProgram name="zero.zero">
/* TT glyph 615, char 0xffff */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 19, 114
CALL[], 0, 15, 106
CALL[], 4, 17, 114
CALL[], 4, 13, 106
SRP2[], 0
SLOOP[], 4
IP[], 20, 10, 19, 11
IUP[Y]
IUP[X]

    </glyphProgram>

    <glyphProgram name="zeta">
/* TT glyph 573, char 0x3b6 */
/* VTT 6.33 compiler Fri May  1 10:06:42 2020 */
SVTCA[Y]
CALL[], 0, 15, 114
CALL[], 0, 1, 106
CALL[], 6, 11, 114
CALL[], 6, 22, 106
CALL[], 14, 0, 114
CALL[], 14, 13, 106
SHP[2], 11
SHP[2], 16
IUP[Y]
IUP[X]


    </glyphProgram>

    <extraProgram name="cvt">
/* Control Program */
/* ACT generated Fri Nov 15 15:37:24 2019 */

CATEGORY Stroke
CATEGORY StrokeInheritance

InstructionsOn @8..2047

DropOutCtrlOff @144

CvtCutIn = 1, 0@144 /* 1 pixel cut-in for over- and undershoots */

ClearTypeCtrl = 1

ASM("WS[], 16, 0") /* &lt;== S[16] = threshold ppem that less than or equal is no RES */

LinearAdvanceWidths = 0

/***** Height CVTs *****/
UpperCase
  Grey
  Y
  SquareHeight
      2:  1420 /* cap height */
ASM("SVTCA[Y]")
ASM("CALL[], 2, 89")
      8:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 8, 89")
  RoundHeight
      3:    20 ~   2 @ 52 /* cap height overshoot */
      9:   -20 ~   8 @ 52 /* base line undershoot */

LowerCase
  SquareHeight
      0:  1500 /* lc ascender */
ASM("SVTCA[Y]")
ASM("CALL[], 0, 89")
      6:  1060 /* x height */
ASM("SVTCA[Y]")
ASM("CALL[], 6, 89")
     10:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 10, 89")
     14:  -460 /* lc descender */
ASM("SVTCA[Y]")
ASM("CALL[], 14, 89")
  RoundHeight
      1:    20 ~   0 @ 52 /* lc ascender overshoot */
      7:    20 ~   6 @ 52 /* x height overshoot */
     11:   -20 ~  10 @ 52 /* base line undershoot */
     15:   -18 ~  14 @ 57 /* lc descender undershoot */

Figure
  SquareHeight
      4:  1420 /* figure height */
ASM("SVTCA[Y]")
ASM("CALL[], 4, 89")
     12:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 12, 89")
  RoundHeight
      5:    20 ~   4 @ 52 /* figure height overshoot */
     13:   -20 ~  12 @ 52 /* base line undershoot */

Other
  SquareHeight
     16:  1420 /* other height */
ASM("SVTCA[Y]")
ASM("CALL[], 16, 89")
     18:     0 /* base line */
ASM("SVTCA[Y]")
ASM("CALL[], 18, 89")
  RoundHeight
     17:    20 ~  16 @ 52 /* other height overshoot */
     19:   -20 ~  18 @ 52 /* base line undershoot */

/***** Reserved CVTs *****/
AnyGroup
  AnyColor
  AnyDirection
  AnyCategory
     20:     0 /* DO NOT USE!!! */

/***** Grand-Parent CVT *****/
AnyGroup
  Black
  X
  StrokeInheritance
     21:   206 /* 44x */

/***** Parent CVTs *****/
UpperCase
  Black
  X
  StrokeInheritance
     22:   200 /* 22x */
LowerCase
  Black
  X
  StrokeInheritance
     25:   212 /* 22x */
ASM("SVTCA[X]")
ASM("CALL[], 21, 25, 68, 22, 87, 90")

UpperCase
  Black
  Y
  StrokeInheritance
     23:   190 /* 26x */
ASM("SVTCA[X]")
ASM("CALL[], 23, 60, 22, 98, 91")
LowerCase
  Black
  Y
  StrokeInheritance
     26:   175 /* 12x */
ASM("SVTCA[X]")
ASM("CALL[], 26, 52, 25, 25, 91")

UpperCase
  Black
  Diag
  StrokeInheritance
     24:   190 /* 26x */
ASM("SVTCA[X]")
ASM("CALL[], 24, 60, 22, 98, 91")
LowerCase
  Black
  Diag
  StrokeInheritance
     27:   175 /* 12x */
ASM("SVTCA[X]")
ASM("CALL[], 27, 52, 25, 25, 91")

/***** StrokeInheritance CVTs *****/
UpperCase
  Black
  X
  StrokeInheritance
     28:   200 =  22 @255 /* 35x */
     29:    10 ~  28 @103 /* 13x */
  Y
  StrokeInheritance
     30:   190 =  23 @255 /* 36x */
     31:    -6 ~  30 @171 /* 12x */
  Diag
  StrokeInheritance
     32:   142 =  24 @ 22 /* 8x */
     33:   200 =  22 @255 /* 32x */
     34:   207 =  33 @128 /* 10x */

LowerCase
  Black
  X
  StrokeInheritance
     35:   160 =  25 @ 20 /* 1x */
     36:   212 =  25 @255 /* 33x */
  Y
  StrokeInheritance
     37:   178 /* 26x */
ASM("SVTCA[Y]")
ASM("CALL[], 37, 5, 26, 25, 92")
     38:    -4 ~  37 @205 /* 12x */
     39:   190 /* 16x */
ASM("SVTCA[Y]")
ASM("CALL[], 39, 25, 26, 25, 92")
  Diag
  StrokeInheritance
     40:   117 =  27 @ 18 /* 4x */
     41:   192 /* 26x */
ASM("SVTCA[X]")
ASM("CALL[], 41, 29, 27, 25, 92")
     42:   185 =  41 @128 /* 5x */
     43:   212 =  41 @ 52 /* 7x */

Figure
  Black
  X
  StrokeInheritance
     44:   138 /* 1x */
     45:   214 /* 20x */
  Y
  StrokeInheritance
     46:   184 /* 19x */
  Diag
  StrokeInheritance
     47:   154 /* 2x */
     48:   205 /* 8x */
     49:   192 =  48 @ 79 /* 2x */

Other
  Black
  X
  StrokeInheritance
     50:   196 /* 21x */
     51:   181 =  50 @ 69 /* 8x */
     52:   168 =  51 @ 79 /* 3x */
     53:   220 /* 6x */
  Y
  StrokeInheritance
     54:   184 /* 32x */
     55:   164 =  54 @ 52 /* 7x */
     56:   189 =  54 @147 /* 15x */
     57:   380 /* 1x */
  Diag
  StrokeInheritance
     58:   179 /* 32x */
     59:   168 =  58 @114 /* 3x */
     60:   193 =  58 @ 74 /* 15x */
     61:   203 =  60 @103 /* 8x */
     62:   230 /* 2x */

/***** Stroke CVTs *****/
UpperCase
  Black
  X
  Stroke
     63:   192 =  28 @128 /* 5x */
     64:   200 =  28 @255 /* 17x */
     65:   211 =  29 @255 /* 13x */
  Y
  Stroke
     66:   176 =  31 @128 /* 1x */
     67:   183 =  31 @255 /* 11x */
     68:   190 =  30 @255 /* 24x */
  Diag
  Stroke
     69:   122 =  32 @ 52 /* 2x */
     70:   142 =  32 @255 /* 6x */
     71:   165 =  33 @ 30 /* 2x */
     72:   177 =  33 @ 45 /* 4x */
     73:   187 =  33 @ 79 /* 6x */
     74:   198 =  33 @255 /* 10x */
     75:   207 =  34 @255 /* 6x */
     76:   214 =  34 @147 /* 4x */

LowerCase
  Black
  X
  Stroke
     77:   160 =  35 @255 /* 1x */
     78:   180 =  36 @ 32 /* 1x */
     79:   192 =  36 @ 52 /* 1x */
     80:   200 =  36 @ 86 /* 1x */
     81:   212 =  36 @255 /* 25x */
     82:   220 =  36 @128 /* 5x */
  Y
  Stroke
     83:   161 =  37 @ 61 /* 2x */
     84:   173 =  38 @255 /* 12x */
     85:   180 =  37 @255 /* 12x */
     86:   190 =  39 @255 /* 15x */
     87:   195 =  39 @205 /* 1x */
  Diag
  Stroke
     88:   117 =  40 @255 /* 4x */
     89:   171 =  41 @ 47 /* 1x */
     90:   177 =  42 @128 /* 1x */
     91:   185 =  42 @255 /* 4x */
     92:   194 =  41 @255 /* 13x */
     93:   204 =  43 @114 /* 1x */
     94:   211 =  43 @255 /* 5x */
     95:   224 =  43 @ 86 /* 1x */

Figure
  Black
  X
  Stroke
     96:   138 =  44 @255 /* 1x */
     97:   180 =  45 @ 31 /* 1x */
     98:   202 =  45 @ 86 /* 1x */
     99:   206 =  45 @128 /* 1x */
    100:   214 =  45 @255 /* 14x */
    101:   222 =  45 @128 /* 3x */
  Y
  Stroke
    102:   176 =  46 @128 /* 1x */
    103:   184 =  46 @255 /* 16x */
    104:   191 =  46 @147 /* 2x */
  Diag
  Stroke
    105:   149 =  47 @205 /* 1x */
    106:   158 =  47 @255 /* 1x */
    107:   192 =  49 @255 /* 2x */
    108:   201 =  48 @205 /* 2x */
    109:   207 =  48 @255 /* 2x */
    110:   214 =  48 @114 /* 2x */

Other
  Black
  X
  Stroke
    111:   168 =  52 @255 /* 3x */
    112:   181 =  51 @255 /* 5x */
    113:   193 =  50 @255 /* 6x */
    114:   201 =  50 @128 /* 5x */
    115:   210 =  50 @ 61 /* 3x */
    116:   220 =  53 @255 /* 6x */
  Y
  Stroke
    117:   163 =  55 @255 /* 4x */
    118:   170 =  55 @171 /* 3x */
    119:   180 =  54 @255 /* 10x */
    120:   188 =  56 @255 /* 13x */
    121:   196 =  56 @147 /* 2x */
    122:   380 =  57 @255 /* 1x */
  Diag
  Stroke
    123:   159 =  58 @ 57 /* 1x */
    124:   167 =  59 @255 /* 3x */
    125:   177 =  58 @255 /* 10x */
    126:   183 =  58 @147 /* 3x */
    127:   193 =  60 @255 /* 7x */
    128:   203 =  61 @255 /* 7x */
    129:   213 =  61 @103 /* 1x */
    130:   230 =  62 @255 /* 2x */

/***** Specialty Height CVTs *****/

131:    802 /* hyphen top */
132:    1052    /* equals top */
133:    1730    /* bar top */
134:    1176    /* asterisk top */
135:    810 /* greater nose top */
136:    1610    /* slash top */
137:	 1634 /* bracket top */
138:	 1620 /* paren and brace top */

    </extraProgram>

    <extraProgram name="fpgm">
/* Font-program */
/* ACT generated Fri Nov 15 15:37:24 2019 */

FDEF[], 9

/* Set fv to X
       pv perpendicular to italic angle

   CALL[], 9 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSH, 11, 10
RS[]
SWAP[]
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 10

/* Set fv to italic angle
       pv to Y

   CALL[], 10 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSH, 10, 11
RS[]
SWAP[]
RS[]
SFVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 16

/* Set fv to X
       pv perpendicular to adjusted italic angle

   CALL[], 16 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSH, 6
RS[]
#PUSH, 7
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 31

/* fn 31 equalizes two cvts below a given ppem size

   CALL[], &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, 31 */

#BEGIN
#PUSHOFF

/* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
DUP[]
#PUSH, 64
LTEQ[]
IF[] /* #samples/pixel &lt;= 1 */

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    POP[] /* #samples/pixel not involved */
    MPPEM[]

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;act ppem size&gt; */

    GT[]
    IF[]
        RCVT[]
        WCVTP[]
    ELSE[]
        POP[]
        POP[]
    EIF[]

ELSE[] /* #samples/pixel &gt; 1 */

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    SWAP[]
    POP[] /* ppem Size not involved */
    #PUSH, 64

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;#samples/pixel&gt;, &lt;1&gt; */

    #PUSH, 4 /* child cvt */
    CINDEX[]
    RCVT[]
    #PUSH, 4 /* parent cvt */
    CINDEX[]
    RCVT[]
    SUB[]
    ABS[]

    /* STACK: &lt;child cvt&gt;, &lt;parent cvt&gt;, &lt;#samples/pixel&gt;, &lt;1&gt;, &lt;|[child cvt] - [parent cvt]|&gt; */

    ROLL[]
    MUL[]
    GT[]
    IF[] /* 1 &gt; #samples/pixel * delta cvt */
        RCVT[]
        WCVTP[]
    ELSE[]
        POP[]
        POP[]
    EIF[]

EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 40

/* Set fv to adjusted italic angle
       pv to Y

   CALL[], 40 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSH, 7
RS[]
#PUSH, 6
RS[]
SFVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 70

/* fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, 70 */

#BEGIN
#PUSHOFF
MPPEM[]
GTEQ[]
SWAP[]
MPPEM[]
LTEQ[]
AND[]
IF[]
    DUP[]
    RCVT[]
    ROLL[]
    ADD[]
    WCVTP[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 71

/* fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;ppem&gt;, 71 */

#BEGIN
#PUSHOFF
MPPEM[]
EQ[]
IF[]
    DUP[]
    RCVT[]
    ROLL[]
    ADD[]
    WCVTP[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 72

/* fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, 72 */

#BEGIN
#PUSHOFF
MPPEM[]
GTEQ[]
SWAP[]
MPPEM[]
LTEQ[]
AND[]
IF[]
    SHPIX[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 73

/* fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;ppem&gt;, 73 */

#BEGIN
#PUSHOFF
MPPEM[]
EQ[]
IF[]
    SHPIX[]
ELSE[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 74

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, &lt;flag&gt;, 74 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 70 */
    #PUSH, 70
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 75

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn changes &lt;cvt&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;amount&gt;, &lt;cvt&gt;, &lt;ppem&gt;, &lt;flag&gt;, 75 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 71 */
    #PUSH, 71
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 76

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem sizes &lt;low ppem&gt; to &lt;high ppem&gt; (inclusive)

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;low ppem&gt;, &lt;high ppem&gt;, &lt;flag&gt;, 76 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 72 */
    #PUSH, 72
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 77

/* if &lt;flag&gt; = anti-aliasing in s[2] (set by fn 84)
   fn moves &lt;point&gt; by &lt;amount&gt; (in ±1/64 pixel) at
   ppem size &lt;ppem&gt;

   CALL[], &lt;point&gt;, &lt;amount&gt;, &lt;ppem&gt;, &lt;flag&gt;, 77 */

#BEGIN
#PUSHOFF
#PUSH, 2
RS[]
EQ[]
IF[]           /* if &lt;flag&gt; = s[2] then fwd to fn 73 */
    #PUSH, 73
    CALL[]
ELSE[]         /* else cleanup stack and bail out */
    POP[]
    POP[]
    POP[]
EIF[]
#PUSHON
#END
ENDF[]

FDEF[], 78

/* apply minimum distance and round &lt;dist&gt; depending on s[2], &lt;code&gt;, and pv
   code = 0: position
   code = 1: distance
   code = 2: delta distance (for fractional inheritance)

   CALL[], &lt;dist&gt;, &lt;code&gt;, 78

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;dist&gt;, &lt;code&gt; */

SWAP[]
DUP[]
#PUSH, 0
LT[]
ROLL[]
ROLL[]
ABS[]

/* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

#PUSH, 0, 3 /* code */
CINDEX[]
EQ[]
IF[] /* position */

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

    #PUSH, 64

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt;, &lt;#samples/pixel&gt; */

ELSE[]

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt; */

    #PUSH, 1, 3 /* code */
    CINDEX[]
    EQ[]
    IF[] /* distance */
        #PUSH, 5 /* minimum distance */
        RS[]
        MAX[]
    EIF[]

    #PUSH, 79 /* #samples/pixel */
    CALL[]

    /* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;|dist|&gt;, &lt;#samples/pixel&gt; */

EIF[]

SWAP[]
#PUSH, 98 /* round to virtual grid */
CALL[]

/* STACK: &lt;negDist&gt;, &lt;code&gt;, &lt;[|dist|]&gt; */

SWAP[]
POP[]

/* STACK: &lt;negDist&gt;, &lt;[|dist|]&gt; */

SWAP[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[dist]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 79

/* depending on rendering environment and pv determine #samples/pixel for rounding etc.

   notice that for PVs other than X or Y, this method will default to X, reflecting the
   bias inherent in the asymmetrical nature of ClearType

   CALL[], 79

   returns the #samples/pixel in 26.6 */

#BEGIN
#PUSHOFF

#PUSH, 8, 0
GPV[]
POP[]
EQ[]
ADD[]
RS[]

#PUSHON
#END
ENDF[]

FDEF[], 80

/* depending on rendering environment and pv determine actual stroke optimization method

   CALL[], 80

   returns with method on stack (see fn 112 for definition of method) */

#BEGIN
#PUSHOFF

#PUSH, 12, 0
GPV[]
POP[]
EQ[]
ADD[]
RS[]

#PUSHON
#END
ENDF[]

FDEF[], 81

   /* adjust advance width to compensate for rasterizer's rounding errors 

   CALL[], &lt;rsb&gt;, 81 */

#BEGIN
#PUSHOFF

/* STACK: &lt;rsb&gt; */

SVTCA[X]
DUP[]
GC[O]

/* STACK: &lt;rsb&gt;, &lt;rsb.x&gt; */
#PUSH, 2
RS[]
DUP[]
#PUSH, 4096 /* fract AW value in 26.6 */
DIV[]
#PUSH, 4096 /* 64 in 26.6 */
MUL[]
EVEN[] /* fract AW bit not set */
SWAP[]
#PUSH, 256 /* comp AW value in 26.6 */
DIV[]
#PUSH, 4096 /* 64 in 26.6 */
MUL[]
EVEN[] /* comp AW bit not set */
AND[]
IF[]
    #PUSH, 32
    ADD[]
    FLOOR[]
EIF[]

SCFS[]

#PUSHON
#END
ENDF[]

FDEF[], 83

/* CALL[], &lt;radicand&gt;, 83

   returns with square root of radicand on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;radicand&gt; */

#PUSH, 0, 2
CINDEX[]

/* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

#WBeginLoop83:

    #PUSH, 2 /* low */
    CINDEX[]
    #PUSH, 2 /* high */
    CINDEX[]
    GTEQ[]
    #PUSH, WOffset83a
    SWAP[]
    JROT[], (WOffset83a=#WEndLoop83) /* while low &lt;= high */

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

    #PUSH, 2 /* low */
    CINDEX[]
    #PUSH, 2 /* high */
    CINDEX[]
    ADD[]
    #PUSH, 32
    MUL[]

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

    DUP[]
    DUP[]
    #PUSH, 6 /* radicand */
    CINDEX[]
    SWAP[]
    DIV[]

    /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt;, &lt;mid&gt;, &lt;radicand/mid&gt; */

    LT[]
    IF[]

        /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

        ROLL[]
        POP[]
        #PUSH, 1
        ADD[]
        SWAP[]

        /* STACK: &lt;radicand&gt;, &lt;mid+1&gt;, &lt;high&gt; */

    ELSE[]

        DUP[]
        DUP[]
        #PUSH, 6 /* radicand */
        CINDEX[]
        SWAP[]
        DIV[]

        GT[]
        IF[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

            SWAP[]
            POP[]
            #PUSH, 1
            SUB[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;mid-1&gt; */

        ELSE[]

            /* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt;, &lt;mid&gt; */

            ROLL[]
            POP[]
            SWAP[]
            POP[]
            DUP[]

            /* STACK: &lt;radicand&gt;, &lt;mid&gt;, &lt;mid&gt; */

        EIF[]

    EIF[]


    #PUSH, WOffset83b
    JMPR[], (WOffset83b=#WBeginLoop83)

#WEndLoop83:

/* STACK: &lt;radicand&gt;, &lt;low&gt;, &lt;high&gt; */

ADD[]
#PUSH, 32
MUL[]
SWAP[]
POP[]

/* STACK: &lt;mid&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 84

/* fn determines current rasterizing environment and stores it in s[2] as follows:
     bit 0 (value   1) = Grey-Scaling
     bit 1 (value   2) = ClearType(tm)
     bit 2 (value   4) = Compatible Width ClearType
     bit 3 (value   8) = Vertical Direction (horizontally striped) ClearType
     bit 4 (value  16) = BGR as opposed to RGB Devices
     bit 5 (value  32) = ClearType on Rapier CE Devices
     bit 6 (value  64) = ClearType with fractional advance widths
     bit 7 (value 128) = ClearType with non-ClearType direction anti-aliasing
     bit 8 (value 256) = ClearType with gray full-pixel

   s[2] is used e.g. in fns 74 through 77

   To test against any combination of these flags, add up the respective values.

   specific to the current rasterizing environment fn stores the following parameters
     s[5] = minimum distance
     s[8] = #samples/pixel in x-direction
     s[9] = #samples/pixel in y-direction
     s[12] = stroke optimization method in x-direction
     s[13] = stroke optimization method in y-direction

   CALL[], 84 */
   /* Version 2.1 20120101 */

#BEGIN
#PUSHOFF
#PUSH,2,0
WS[]            /* s[2] = grey scaling: off (by default) */
#PUSH,35,1      /* 35 = MS Rasterizer version 1.7 */
GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
LTEQ[]          /* 35 &lt;= version ? */
#PUSH,64,1      /* 64 = highest rasterizer version assigned to MS */
GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
GTEQ[]          /* 64 &gt;= version ? */
AND[]           /* 35 &lt;= version &amp;&amp; version &lt;= 64 ? */
IF[]            /* if so, we're running MS rasterizer version 1.7 or higher */
  #PUSH,4096,32 /* 4096 = flag returned by GETINFO if grey scaling bit is on */
  GETINFO[]     /* 32 = tell GETINFO to give us the grey scaling bit */
  EQ[]          /* 4096 == flag ? */
  IF[]          /* if so, we're running under grey scaling */
    #PUSH,2,1,2
    RS[]
    ADD[]
    WS[]        /* s[2] += grey scaling: on (by now) */
  EIF[]
  #PUSH,36,1      /* 36 = MS Rasterizer version 1.6+ (WinCE) or 1.8 (WinXP) */
  GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
  LTEQ[]          /* 36 &lt;= version ? (already tested version &lt;= 64) */
  IF[]            /* if so, we're running MS rasterizer version 1.6+ (WinCE) or 1.8 (WinXP) or higher */
    #PUSH,8192,64 /* 8192 = flag returned by GETINFO if ClearTypeTM bit is on */
    GETINFO[]     /* 64 = tell GETINFO to give us the ClearTypeTM bit */
    EQ[]          /* 8192 == flag ? */
    IF[]          /* if so, we're running under ClearTypeTM */
      #PUSH,2,2,2
      RS[]
      ADD[]
      WS[]        /* s[2] += ClearTypeTM: on (by now) */

      #PUSH,36,1    /* 36 = MS Rasterizer version 1.6+ (WinCE) */
      GETINFO[]
      EQ[]
      IF[] /***** we're running Rasterizer v1.6+ for WinCE with ClearType *****/

        #PUSH,2,32,2
        RS[]
        ADD[]
        WS[]        /* s[2] += Rapier CE: on (by now) */
        SVTCA[Y]
        MPPEM[]
        SVTCA[X]
        MPPEM[]
        GT[]
        IF[]
          #PUSH,2,8,2
          RS[]
          ADD[]
          WS[]
        EIF[]

      ELSE[] /***** we're running Rasterizer v1.8 (or higher) for WinXP with ClearType (or Win2k 2000 with ClearType patch) *****/

        #PUSH,16384,128 /* 16384 = flag returned by GETINFO if ClearTypeTM silly aw bit is on */
        GETINFO[]       /* 128 = tell GETINFO to give us the ClearTypeTM silly aw bit */
        EQ[]            /* 16384 == flag ? */
        IF[]            /* if so, we're running under ClearTypeTM silly aw */
          #PUSH,2,4,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM silly aw: on (by now) */
        EIF[]

        #PUSH,16384,128 /* 32768 = flag returned by GETINFO if ClearTypeTM in vertical direction bit is on */
        MUL[]           /* Assembler restriction: produce 32768 by multiplying 16384 by 2 (2 in F26.6 is 128) */
        #PUSH,256       /* 256 = tell GETINFO to give us the ClearTypeTM in vertical direction bit */
        GETINFO[]
        EQ[]            /* 32768 == flag ? */
        IF[]            /* if so, we're running ClearTypeTM in vertical direction */
        #PUSH,2,8,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM in vertical direction: on (by now) */
        EIF[]

        #PUSH,16384,256 /* 65536 = flag returned by GETINFO if ClearTypeTM in BGR order bit is on */
        MUL[]           /* Assembler restriction: produce 65536 by multiplying 16384 by 4 (4 in F26.6 is 256) */
        #PUSH,512       /* 512 = tell GETINFO to give us the ClearTypeTM in BGR order bit */
        GETINFO[]
        EQ[]            /* 65536 == flag ? */
        IF[]            /* if so, we're running under ClearTypeTM in BGR order */
          #PUSH,2,16,2
          RS[]
          ADD[]
          WS[]          /* s[2] += ClearTypeTM in BGR order: on (by now) */
        EIF[]

        #PUSH,38,1      /* 38 = MS Rasterizer version 1.9 */
        GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
        LTEQ[]          /* 38 &lt;= version ? (already tested version &lt;= 64) */
        IF[]            /* if so, we're running MS rasterizer version 1.9 (Windows Longhorn) or higher */

          #PUSH,16384,512  /* 131072 = flag returned by GETINFO if ClearTypeTM fractional advance widths bit is on */
          MUL[]            /* Assembler restriction: produce 131072 by multiplying 16384 by 8 (8 in F26.6 is 512) */
          #PUSH,1024       /* 1024 = tell GETINFO to give us the ClearTypeTM fractional advance widths bit */
          GETINFO[]
          EQ[]             /* 131072 == flag ? */
          IF[]             /* if so, we're running under ClearTypeTM fractional advance widths */
            #PUSH,2,64,2
            RS[]
            ADD[]
            WS[]           /* s[2] += ClearTypeTM fractional advance widths: on (by now) */
          EIF[]

          #PUSH,16384,1024 /* 262144 = flag returned by GETINFO if ClearTypeTM non-ClearType direction anti-aliasing bit is on */
          MUL[]            /* Assembler restriction: produce 262144 by multiplying 16384 by 16 (16 in F26.6 is 1024) */
          #PUSH,2048       /* 2048 = tell GETINFO to give us the ClearTypeTM non-ClearType direction anti-aliasing bit */
          GETINFO[]
          EQ[]             /* 262144 == flag ? */
          IF[]             /* if so, we're running under ClearTypeTM non-ClearType direction anti-aliasing */
            #PUSH,2,128,2
            RS[]
            ADD[]
            WS[]           /* s[2] += ClearTypeTM non-ClearType direction anti-aliasing: on (by now) */
          EIF[]

          #PUSH,40,1      /* 40 = Rasterizer v2.1 Windows 8, SubPixel */
          GETINFO[]       /* 1 = tell GETINFO to give us the rasterizer version */
          LTEQ[]          /* 40 &lt;= version ? (already tested version &lt;= 64) */
          IF[]            /* if so, we're running MS rasterizer version 2.1 (Windows 8) or higher */
            #PUSH,16384,2048 /* 524288 = flag returned by GETINFO if ClearTypeTM non-ClearType direction anti-aliasing bit is on */
            MUL[]            /* Assembler restriction: produce 524288 by multiplying 16384 by 32 (32 in F26.6 is 2048) */
            #PUSH,4096       /* 4096 = tell GETINFO to give us the ClearTypeTM gray full-pixel rendering bit */
            GETINFO[]
            EQ[]             /* 524288 == flag ? */
            IF[]             /* if so, we're running under ClearTypeTM gray full-pixel rendering */
            #PUSH,2,256,2
              RS[]
              ADD[]
              WS[]           /* s[2] += ClearTypeTM gray full-pixel rendering: on (by now) */
            EIF[]
          EIF[]

        EIF[] /* Vista or greater rasterizer */

      EIF[] /* Windows ClearType (Platt) */

    EIF[] /* ClearType Enabled */
  EIF[] /* ClearType enabled rasterizer */
EIF[] /* Microsoft Rasterizer */

/* store rasterizing environment specific parameters */

#PUSH, 0, 2
RS[]
EQ[]
IF[] /* for b&amp;w */
  #PUSH, 5, 64, 8, 64, 9, 64, 12, 2, 13, 2
ELSE[]
  #PUSH, 1, 2
  RS[]
  EQ[]
  IF[] /* for grey-scaling */
    #PUSH, 5, 64, 8, 256, 9, 256, 12, 1, 13, 1
  ELSE[]
    #PUSH, 128, 2
    RS[]
    GT[]
    IF[] /* for ClearType */
      #PUSH, 5, 64, 8, 384, 9, 64
    ELSE[] /* for y-anti-aliased ClearType */
      #PUSH, 256, 2
      RS[]
      GT[]
      IF[] /* Gray ClearType */
        #PUSH, 5, 64, 8, 384, 9, 320
      ELSE[] /* Gray ClearType */
        #PUSH, 384, 2
        RS[]
        GT[]
        IF[] /* Gray ClearType */
          #PUSH, 5, 64, 8, 512, 9, 64
        ELSE[] /* Gray ClearType y-anti-aliased */
          #PUSH, 5, 64, 8, 256, 9, 256
        EIF[]
      EIF[]
    EIF[]

    #PUSH,16384,128 /* b&amp;w aw? */
    GETINFO[]
    NEQ[]
    #PUSH,16384,512 /* fract aw? */
    MUL[]
    #PUSH,1024
    GETINFO[]
    NEQ[]
    AND[]
    IF[] /* natural widths */
      #PUSH, 12, 0, 13, 1
    ELSE[] /* compatible or fractional widths */
      #PUSH, 12, 0, 13, 1
    EIF[]

  EIF[]
EIF[]

WS[]
WS[]
WS[]
WS[]
WS[]

#PUSHON
#END
ENDF[]

FDEF[], 85

/* fn 85 equalizes double specified heights below a given ppem size

   CALL[], &lt;rel cvt&gt;, &lt;ppem size&gt;, &lt;abs cvt&gt;, 85 */
   /* Version 2.0 20141201 */

#BEGIN
#PUSHOFF

/* STACK: &lt;rel cvt&gt;, &lt;ppem size&gt;, &lt;abs cvt&gt; */

RCVT[] /* pick absolute (square) height */
#PUSH, 2, 78 /* 2 appears to work for heights and weights */
CALL[]
SWAP[]

/* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
DUP[]
#PUSH, 64
LTEQ[]
IF[] /* #samples/pixel = 1 (or less...) */

    /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    POP[]
    MPPEM[]
    LTEQ[] /* specified ppem size &lt;= actual ppem size ? */
    IF[]

        /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt; */

        #PUSH, 2
        CINDEX[]
        RCVT[] /* pick relative height (overshoot) */
        #PUSH, 1, 78
        CALL[]
        ADD[] /* add overshoot to square height */

        /* STACK: &lt;rel cvt&gt;, &lt;[rel cvt] + [abs cvt]&gt; */

    EIF[]

ELSE[] /* #samples/pixel &gt; 1 */

    /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;ppem size&gt;, &lt;#samples/pixel&gt; */

    SWAP[]
    MPPEM[]
    LTEQ[] /* specified ppem size &lt;= actual ppem size */
    IF[]

      /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;#samples/pixel&gt; */

      #PUSH, 3 /* rel cvt */
      CINDEX[]
      RCVT[]
      DUP[]
      ABS[]
      ROLL[]
      MUL[]
      #PUSH, 64

      /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt;, &lt;|[rel cvt]| * #samples/pixel&gt;, &lt;1&gt; */

      GTEQ[] /* #samples/pixel greater than or equal to 1 pixel */
      IF[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt; */

          #PUSH, 2, 78
          CALL[]
          ADD[] /* add overshoot to square height */

          /* STACK: &lt;rel cvt&gt;, &lt;[rel cvt] + [abs cvt]&gt; */

      ELSE[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt;, &lt;[rel cvt]&gt; */

          POP[]

          /* STACK: &lt;rel cvt&gt;, &lt;[abs cvt]&gt; */

      EIF[]
    ELSE[]
          /* STACK: &lt;rel cvt&gt;,&lt;abs cvt&gt;,&lt;#samples/pixel&gt;*/
          POP[]
          /* STACK: &lt;rel cvt&gt;,&lt;abs cvt&gt;*/
    EIF[]

EIF[]

/* STACK: &lt;rel cvt&gt;, &lt;[act cvt]&gt; */

WCVTP[] /* make this the round height */
#PUSHON
#END
ENDF[]

FDEF[], 86

/* function to naturally space an accent above or below a base character

   CALL[], &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;distance&gt;, 86

   convert distance (fUnits) to pixels, round, and space child from parent by result
   this essentially implements the functionality of an MDRP[m&gt;RWh] instrunction for
   composites which lack a suitable implementation of "original" coordinates.
   roundMethod 0, 1, 2, and 3 round down to, to, up to, and to half virtual grid
   function assumes cvt #20 is reserved and can be used temporarily in here... 
   storage 16 contains a threshold ppem size. if zero, ignore the threshold, otherwise
   if less than or equal to threshold, use 64 (26.6) #samples/pixel. */

#BEGIN
#PUSHOFF

/* extract the sign from distance */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;distance&gt; */

DUP[]
#PUSH, 0
LT[]
DUP[]
IF[]
    SWAP[]
    NEG[]
ELSE[]
    SWAP[]
EIF[]

/* scale distance using reserved cvt */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|&gt; */

#PUSH, 20, 20 /* reserved cvt */
ROLL[]
WCVTF[]
RCVT[]

/* determine if we are using a size threshold */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|'&gt; */

#PUSH, 16, 16 /* reserved storage for threshold */
RS[]
MPPEM[]
ROLL[]
RS[]
LTEQ[]
AND[] /* threshold must not be zero and &lt;= ppem */
IF[]
    #PUSH, 64 /* #samples/pixel = 1 */
ELSE[]
/* round per round method and #samples/pixel in current pv */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;roundMethod&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;|distance|'&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
EIF[]

SWAP[]
#PUSH, 97, 6 /* round to virtual grid, roundMethod */
MINDEX[]
ADD[]
CALL[] /* round to virtual grid */

/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;minDist?&gt;, &lt;negDist?&gt;, &lt;[|distance|']&gt; */

/* apply minimum distance, if applicable */
ROLL[]
IF[]
    #PUSH, 5 /* minimum distance */
    RS[]
    MAX[]
EIF[]

/* fold the sign back into distance */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;negDist?&gt; &lt;[|distance|']&gt; */

SWAP[]
IF[]
    NEG[]
EIF[]

/* move child by [distance'] */
/* STACK: &lt;child&gt;, &lt;parent&gt;, &lt;[distance']&gt; */

SWAP[]
SRP0[]
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 87

/* fn places an accent &lt;c0&gt; &lt;c1&gt; on top of a base character &lt;p0&gt; &lt;p1&gt;
   fn uses the same constraint model as fn 111 (interpolate median),
   except that for composites there is no concept of original coordinates,
   hence the respective values are provided by the caller as &lt;partialFactor&gt;

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;partialFactor&gt;, 87 */

#BEGIN
#PUSHOFF

/* partialFactor: ((c0 + c1)/2 - p0)/(p1 - p0)
   target median: ((c0 + c1)/2 - p0)*(p1' - p0')/(p1 - p0)&gt; + p0' = partialFactor*(p1' - p0')
   source median: (c0' + c1')/2
   primed coordinates are [N]ew, other coordinates are [O]riginal */

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;p0&gt;, &lt;partialFactor&gt;, &lt;p1&gt; */

#PUSH, 3 /* p0 */
CINDEX[]
MD[N]
MUL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;p0&gt;, &lt;((c0 + c1)/2 - p0)*(p1' - p0')/(p1 - p0)&gt; */

SWAP[] /* p0 */
GC[N]
ADD[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;targetMedian&gt; */

#PUSH, 79 /* #samples/pixel */
CALL[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;#samples/pixel&gt;, &lt;targetMedian&gt; */

#PUSH, 4 /* c0 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
MD[N]
#PUSH, 3 /* #samples/pixel */
CINDEX[]
MUL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;#samples/pixel&gt;, &lt;targetMedian&gt;, &lt;numVirtualPixels&gt; */

ODD[]
DUP[]
ADD[]
#PUSH, 98
ADD[]
CALL[] /* round to (half) virtual grid */

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;[targetMedian]&gt; */

#PUSH, 3 /* c0 */
CINDEX[]
DUP[]
SRP0[]
GC[N]
ROLL[] /* c1 */
GC[N]
ADD[]
#PUSH, 32
MUL[]

/* STACK: &lt;c0&gt;, &lt;targetMedian&gt;, &lt;sourceMedian&gt; */

SUB[]

/* STACK: &lt;c0&gt;, &lt;offset&gt; */

MSIRP[m]

#PUSHON
#END
ENDF[]

FDEF[], 88

/* set up storage locations with the x and y components
   of the italic and adjusted italic angles as follows:

     s[ 6] = adjusted italic angle y
     s[ 7] = adjusted italic angle x
     s[10] = italic angle y
     s[11] = italic angle x

   while rendering in b&amp;w, determines the optimal phase
   for positioning italic strokes

     s[ 4] = optimal phase

   CALL[], &lt;riseCvt&gt;, &lt;runCvt&gt;, 88 */

#BEGIN
#PUSHOFF

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 0 /* Use twilight points to calculate stroke angles */
SZPS[]

#PUSH, 2, 3 /* riseCvt */
CINDEX[]
#PUSH, 1, 4 /* runCvt */
CINDEX[]

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt;, &lt;2&gt;, &lt;riseCvt&gt;, &lt;1&gt;, &lt;runCvt&gt; */

SVTCA[X] /* Set twilight point 1 with italic run cvt in x */
MIAP[r]

SVTCA[Y] /* Set twilight point 2 with italic rise cvt in y */
MIAP[r]

#PUSH, 1, 2 /* and let the rasterizer do the math */
SPVTL[r]
GPV[]

#PUSH, 10 /* store the x and y components of the italic angle */
SWAP[]
NEG[]     /* notice that since we're essentially setting the pv to a line  */
WS[]      /* from (runCvt,0) to (0,riseCvt), the calculcated pv will be    */
#PUSH, 11 /* proportional to (runCvt,0) - (0,riseCvt) = (runCvt,-riseCvt). */
SWAP[]    /* Hence we have to mirror the result at the base line, which is */
WS[]      /* done by flipping (negating) the sign of the y component here. */

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 2, 3 /* riseCvt */
CINDEX[]
#PUSH, 1, 4 /* runCvt */
CINDEX[]

SVTCA[X] /* same for the adjusted italic angle */
MIAP[R]  /* except to round the twilight point in x... */

SVTCA[Y]
MIAP[R]  /* ...and in y */

#PUSH, 1, 2
SPVTL[r]
GPV[]

#PUSH, 6
SWAP[]
NEG[]    /* same neg as above */
WS[]
#PUSH, 7
SWAP[]
WS[]

#PUSH, 1 /* restore graphics state */
SZPS[]

/* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

#PUSH, 0, 2
RS[]
EQ[]
IF[] /* running b&amp;w? */

    /* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */
    /* determine adjusted run' = run*[rise]/rise */

    RCVT[]
    SWAP[]
    RCVT[]
    DUP[]
    RTG[]
    ROUND[Bl]
    ROLL[]
    MUL[]
    SWAP[]
    DIV[]

    /* STACK: &lt;run'&gt; */
    /* determine phase = (run' - [run'])/2 = half the rounding error */

    DUP[]
    DUP[]
    #PUSH, 64
    LT[]
    IF[]
        CEILING[] /* optimize for "minimum italic angle" */
    ELSE[]
        FLOOR[] /* optimize for minimal number of jaggies */
    EIF[]
    SUB[]
    #PUSH, 32
    MUL[]

    /* STACK: &lt;phase&gt; */
    /* for its use on bottom italic edge, determine complement to full pixel */

    #PUSH, 64
    SWAP[]
    SUB[]

    /* and store in s[4] */

    #PUSH, 4
    SWAP[]
    WS[]

    /* STACK: */

ELSE[]

    /* STACK: &lt;riseCvt&gt;, &lt;runCvt&gt; */

    #PUSH, 4, 0
    WS[]
    POP[]
    POP[]

    /* STACK: */

EIF[]

RTG[]
SVTCA[X]

#PUSHON
#END
ENDF[]

FDEF[], 89

/* function rounds &lt;cvt&gt; depending on rendering environment and pv

   CALL[], &lt;cvt&gt;, 89 */

#BEGIN
#PUSHOFF

DUP[]
RCVT[]
#PUSH, 0, 78 /* roundDist */
CALL[]
WCVTP[]

#PUSHON
#END
ENDF[]

FDEF[], 90

/* below &lt;ppem&gt;: make both children the same as the (averaged) parent cvt
   at and above: calculate child cvt &lt;ch0&gt; as &lt;fraction&gt; of child cvt &lt;ch1&gt;

   CALL[], &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt;, &lt;ppem&gt;, 90 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt;, &lt;ppem&gt; */

MPPEM[]
LTEQ[]
#PUSH, 64, 79 /* #samples/pixel */
CALL[]
LT[]
OR[]
IF[] /* at or above ppem limit or rounding to less than a pixel */ 

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt; */

    DUP[]
    RCVT[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]
    DUP[]
    ROLL[]
    ROLL[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;[ch1]&gt;, &lt;ch1&gt;, &lt;[ch1]&gt; */

    WCVTP[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;[ch1]&gt; */

    DUP[]
    #PUSH, 64, 4
    MINDEX[]
    SUB[]
    MUL[]
    SUB[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;[ch1] - [ch1]*(1-fraction)&gt; */

    WCVTP[]
    POP[] /* parent not involved */

    /* STACK: */

ELSE[]

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;fraction&gt;, &lt;ch1&gt; */

    SWAP[]
    POP[] /* fraction not involved */

    /* STACK: &lt;p&gt;, &lt;ch0&gt;, &lt;ch1&gt; */

    ROLL[]
    RCVT[]
    #PUSH, 1, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;ch0&gt;, &lt;ch1&gt;, &lt;[p]&gt; */

    DUP[]
    ROLL[]
    SWAP[]

    /* STACK: &lt;ch0&gt;, &lt;[p]&gt;, &lt;ch1&gt;, &lt;[p]&gt; */

    WCVTP[]
    WCVTP[]

    /* STACK: */

EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 91

/* below &lt;ppem&gt;: make child cvt &lt;ch&gt; the same as parent cvt &lt;p&gt;
   at and above: calculate child cvt &lt;ch&gt; as &lt;fraction&gt; of parent cvt &lt;p&gt;

   CALL[], &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt;, &lt;ppem&gt;, 91 */

#BEGIN
#PUSHOFF

/* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt;, &lt;ppem&gt; */

MPPEM[]
LTEQ[]
#PUSH, 64, 79 /* #samples/pixel */
CALL[]
LT[]
OR[]
IF[] /* at or above ppem limit or rounding to less than a pixel */ 

    /* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt; */

    RCVT[]
    DUP[]
    ROLL[]

    /* STACK: &lt;ch&gt;, &lt;[p]&gt;, &lt;[p]&gt;, &lt;fraction&gt; */

    #PUSH, 64
    SUB[]
    MUL[]
    ADD[]

    /* STACK: &lt;ch&gt;, &lt;[p] + [p]*(fraction - 1)&gt; */

ELSE[]

    /* STACK: &lt;ch&gt;, &lt;fraction&gt;, &lt;p&gt; */

    SWAP[]
    POP[] /* fraction not involved */

    RCVT[]

    /* STACK: &lt;ch&gt;, [p] */

EIF[]

#PUSH, 1, 78 /* roundDist */
CALL[]
WCVTP[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 92

/* function to calculate a child cvt &lt;ch&gt;
   as a &lt;blend&gt; of two parent cvts &lt;p0&gt;, &lt;p1&gt;

   CALL[], &lt;ch&gt;, &lt;blend&gt;, &lt;p0&gt;, &lt;p1&gt;, 92 */

#BEGIN
#PUSHOFF

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;p0&gt;, &lt;p1&gt; */

SWAP[]
RCVT[]
DUP[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;p1&gt;, &lt;[p0]&gt;, &lt;[p0]&gt; */

ROLL[]
RCVT[]

SWAP[]
SUB[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */

DUP[]
ABS[]
#PUSH, 64
LTEQ[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s)?&gt; */

#PUSH, 4
CINDEX[]
DUP[]
#PUSH, 0
GTEQ[]
SWAP[]
#PUSH, 64
LTEQ[]
AND[]

AND[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s) &amp;&amp; blend &gt;= 0 &amp;&amp; blend &lt;= 64?&gt; */

#PUSH, 64, 79 /* #samples/pixel */
CALL[]
EQ[]

AND[]

/* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;contrast &lt;= 1 pixel(s) &amp;&amp; blend &gt;= 0 &amp;&amp; blend &lt;= 64 &amp;&amp; rounding to full pixel?&gt; */

IF[]

    /* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */

    ROLL[]
    GPV[]
    ABS[]
    SWAP[]
    ABS[]
    SWAP[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt;, &lt;|pv.x|&gt;, &lt;|pv.y|&gt; */

    GTEQ[] /* pv closer to x? */
    IF[]

        /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */
        /* bias towards p1: blend' := 1 - (1 - blend)² */

        #PUSH, 64, 64
        ROLL[]
        SUB[]
        DUP[]
        MUL[]
        SUB[]

        /* &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;1 - (1 - blend)²&gt; */

    ELSE[]

        /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */
        /* bias towards p0: blend' := blend² */

        DUP[]
        MUL[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend²&gt; */

    EIF[]

ELSE[]

    /* STACK: &lt;ch&gt;, &lt;blend&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt; */
    /* use unbiased blend */

    ROLL[]

    /* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */

EIF[]

/* STACK: &lt;ch&gt;, &lt;[p0]&gt;, &lt;[p1] - [p0]&gt;, &lt;blend&gt; */

MUL[]
#PUSH, 2, 78 /* roundDist */
CALL[]
ADD[]

/* STACK: &lt;ch&gt;, &lt;[ch]&gt; */

WCVTP[]

#PUSHON
#END
ENDF[]

FDEF[], 93

/* fn sets vectors to X (used in calculated calls)

   CALL[], 93 */

#BEGIN
#PUSHOFF
SVTCA[X]
#PUSHON
#END
ENDF[]

FDEF[], 94

/* fn sets vectors to Y (used in calculated calls)

   CALL[], 94 */

#BEGIN
#PUSHOFF
SVTCA[Y]
#PUSHON
#END
ENDF[]

FDEF[], 95

/* Set fv to X, pv perpendicular to italic angle (used in calculated calls)

   CALL[], 95 */

#BEGIN
#PUSHOFF
SFVTCA[X]
#PUSH, 11, 10
RS[]
SWAP[]
RS[]
NEG[]
SPVFS[]
#PUSHON
#END
ENDF[]

FDEF[], 96

/* Set fv to italic angle, pv to Y (used in calculated calls)

   CALL[], 96 */

#BEGIN
#PUSHOFF
#PUSH, 10, 11
RS[]
SWAP[]
RS[]
SFVFS[]
SPVTCA[Y]
#PUSHON
#END
ENDF[]

FDEF[], 97

/* round down to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 97

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */
/* upscale argument by #samples/pixel */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

FLOOR[] /* round down to super grid */

/* Downscaling uses a DIV[] operation, which is implemented as floor(numerator/denominator).
   For round(numerator/denominator) instead, add ½ denominator to numerator before dividing.
   But since the division in 26.6 has to multiply the numerator by 2^6 (64) before dividing,
   we have to divide said ½ denominator by 64 before adding, hence the 8192 (= 128 in 26.6). */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 98

/* round to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 98

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

#PUSH, 32 /* round to super grid */
ADD[]
FLOOR[]

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 99

/* round up to virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 99

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

CEILING[] /* round up to super grid */

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 100

/* round to half virtual grid

   CALL[], &lt;#samples/pixel&gt;, &lt;argument&gt;, 100

   returns with rounded argument on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;#samples/pixel&gt;, &lt;argument&gt; */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
MUL[]

/* do the rounding in upscaled domain */

FLOOR[]
#PUSH, 32 /* round to half super grid */
ADD[]

/* see above for adjustments below */

#PUSH, 2 /* #samples/pixel */
CINDEX[]
#PUSH, 8192
DIV[]
ADD[]

/* downscale rounded and adjusted argument */

SWAP[] /* #samples/pixel */
DIV[]

/* STACK: &lt;[argument]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 101

/* determine actual distance to be used for emulating MDRP[&lt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 101

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
MD[O]

/* round without minDist */

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 102

/* determine actual distance to be used for emulating MDRP[&gt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 102

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
MD[O]

/* round with minDist */

#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 103

/* determine actual distance to be used for emulating MIRP[&lt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 103

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

SWAP[] /* c */
ROLL[] /* p */
MD[O]
SWAP[] /* cvt */

/* STACK: &lt;wNat&gt;, &lt;cvt&gt; */
/* do cvt cut-in test */

RCVT[]
ABS[]
#PUSH, 2
CINDEX[]
ABS[]
#PUSH, 2
CINDEX[]
SUB[]
ABS[]
#PUSH, 3 /* cvt cut-in */
RS[]

/* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt;, &lt;||wNat| - |wCvt||&gt;, &lt;cvt cut-in&gt; */

GT[]
IF[]

    /* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt; */
    /* cvt cut-in test failed */

    POP[]
    DUP[]
    ABS[]

    /* else cvt cut-in test succeeded */

EIF[]

/* STACK: &lt;wNat&gt;, &lt;|w|&gt; */
/* round without minDist */

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;wNat&gt;, &lt;[w]&gt; */
/* inherit sign from wNat */

SWAP[]
#PUSH, 0
LT[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 104

/* determine actual distance to be used for emulating MIRP[&gt;]
   instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 104

   returns with rounded distance on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

SWAP[] /* c */
ROLL[] /* p */
MD[O]
SWAP[] /* cvt */

/* STACK: &lt;wNat&gt;, &lt;cvt&gt; */
/* do cvt cut-in test */

RCVT[]
ABS[]
#PUSH, 2
CINDEX[]
ABS[]
#PUSH, 2
CINDEX[]
SUB[]
ABS[]
#PUSH, 3 /* cvt cut-in */
RS[]

/* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt;, &lt;||wNat| - |wCvt||&gt;, &lt;cvt cut-in&gt; */

GT[]
IF[]

    /* STACK: &lt;wNat&gt;, &lt;|wCvt|&gt; */
    /* cvt cut-in test failed */

    POP[]
    DUP[]
    ABS[]

    /* else cvt cut-in test succeeded */

EIF[]

/* STACK: &lt;wNat&gt;, &lt;|w|&gt; */
/* round with minDist */

#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;wNat&gt;, &lt;[w]&gt; */
/* inherit sign from wNat */

SWAP[]
#PUSH, 0
LT[]
IF[]
    NEG[]
EIF[]

/* STACK: &lt;[w]&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 105

/* emulate MDRP[&lt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 105 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

DUP[] /* c */
#PUSH, 3 /* p */
CINDEX[]
MD[O]
#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 106

/* emulate MDRP[&gt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, 106 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

DUP[] /* c */
#PUSH, 3 /* p */
CINDEX[]
MD[O]
#PUSH, 1, 78 /* roundDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 107

/* emulate MIRP[&lt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 107 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 3 /* p */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
ROLL[] /* cvt */
#PUSH, 103 /* resActDist, cvt, noMinDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 108

/* emulate MIRP[&gt;] instruction with rendering environment specific rounding

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 108 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 3 /* p */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
ROLL[] /* cvt */
#PUSH, 104 /* resActDist, cvt, minDist */
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;[dist]&gt; */

ROLL[]
SRP0[]
MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 109

/* fn symmetrically constrains a stroke &lt;p&gt;, &lt;c&gt; with &lt;cvt&gt;

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, 109 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt; */
/* determine old median */

#PUSH, 3 /* &lt;p&gt; */
CINDEX[]
GC[N]
#PUSH, 3 /* &lt;c&gt; */
CINDEX[]
GC[N]
ADD[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;2*median&gt; */
/* lock parent */

#PUSH, 4 /* p */
CINDEX[]
MDAP[r]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;2*median&gt; */
/* link child */

#PUSH, 4 /* p */
CINDEX[]
#PUSH, 4 /* c */
CINDEX[]
#PUSH, 4 /* cvt */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;2*median&gt; */
/* determine new median */

#PUSH, 3 /* &lt;p&gt; */
CINDEX[]
GC[N]
#PUSH, 3 /* &lt;c&gt; */
CINDEX[]
GC[N]
ADD[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;2*median&gt;, &lt;2*median'&gt; */

SUB[]
#PUSH, 128
DIV[] /* floor to 1/64 for now */

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;deltaMedian&gt; */

DUP[]
ROLL[]
DUP[]
SRP0[]
SWAP[]
MSIRP[m]
SWAP[]
DUP[]
SRP0[]
SWAP[]
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 110

/* calculate offset for emulation of interpolation of median of
   &lt;c0&gt; and &lt;c1&gt; between parents &lt;p0&gt; and &lt;p1&gt; using current pv and fv

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, 110

   returns with offset on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt; */

#PUSH, 3 /* c0 */
CINDEX[]
GC[O]
#PUSH, 3 /* c1 */
CINDEX[]
GC[O]
ADD[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;c0 + c1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
GC[O]
#PUSH, 128
MUL[]
SUB[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;c0 + c1 - 2*p0&gt; */

#PUSH, 2 /* p1 */
CINDEX[]
#PUSH, 6 /* p0 */
CINDEX[]
MD[N]
MUL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, &lt;(c0 + c1 - 2*p0)*(p1' - p0')&gt; */

SWAP[] /* p1 */
#PUSH, 5 /* p0 */
CINDEX[]
MD[O]
#PUSH, 128
MUL[]

/* prevent inadvertent divide-by-zero e.g. on non-spacing glyphs */
DUP[]
IF[]
    DIV[]
ELSE[]
    POP[]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;(c0 + c1 - 2*p0)*(p1' - p0')/(2*(p1 - p0))&gt; */

#PUSH, 4 /* p0 */
MINDEX[]
GC[N]
ADD[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;(c0'' + c1'')/2&gt; */

ROLL[] /* c0 */
GC[N]
ROLL[] /* c1 */
GC[N]
ADD[]
#PUSH, 32
MUL[]

/* STACK: &lt;(c0'' + c1'')/2&gt;, &lt;(c0' + c1')/2&gt; */

SUB[]

/* STACK: &lt;offset&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 111

/* emulate interpolation of median of &lt;c0&gt; and &lt;c1&gt;
   between parents &lt;p0&gt; and &lt;p1&gt; using current pv and fv

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt;, 111 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;p1&gt; */

#PUSH, 4 /* p0 */
MINDEX[]
#PUSH, 4 /* c0 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* p1 */
MINDEX[]
#PUSH, 110 /* calc offset for interpolation of median */
CALL[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;offset&gt; */

DUP[]

/* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;offset&gt;, &lt;offset&gt; */

ROLL[]
DUP[]
SRP0[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;offset&gt;, &lt;c1&gt;, &lt;offset&gt; */

MSIRP[m]

SWAP[]
DUP[]
SRP0[]
SWAP[]

/* STACK: &lt;c0&gt;, &lt;offset&gt; */

MSIRP[m]

#PUSHON
#END
ENDF[]

FDEF[], 112


/* adjust (unrounded) stroke phase to target phase according to &lt;method&gt;

   method 0: round to nearest virtual pixel
   method 1: apply method 2 below 2 pixel wide strokes else method 0
   method 2: optimize for max #black pixels
   method 3: optimize for one edge aligned

   right?: boolean indicating a left (false) or right (true) stroke)

   CALL[], &lt;phase&gt;, &lt;weight&gt;, &lt;method&gt;, &lt;right?&gt;, 112

   returns with (rounded) adjusted phase on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method&gt;, &lt;right?&gt; */

SWAP[]

DUP[]
#PUSH, 1
EQ[]
IF[]

    /* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;right?&gt;, &lt;method&gt; */
    /* replace method depending on stroke weight */

    POP[]
    #PUSH, 2 /* weight */
    CINDEX[]
    #PUSH, 2, 78 /* roundDist */
    CALL[]
    #PUSH, 128
    LT[]
    DUP[]
    ADD[]
EIF[]

DUP[]
ADD[]
ADD[]

/* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method' = 2*method + right&gt; */

DUP[]
#PUSH, 1
LTEQ[]
IF[] /* just round to nearest virtual pixel */

    POP[]
    POP[]

    /* STACK: &lt;phase&gt; */

ELSE[]
    DUP[]
    #PUSH, 5
    LTEQ[]
    IF[] /* optimize for max #black pixels */

        POP[]

        /* STACK: &lt;phase&gt;, &lt;weight&gt; */

        DUP[]
        FLOOR[]
        SUB[]

        /* STACK: &lt;phase&gt;, &lt;fractWeight&gt; */

        #PUSH, 64
        SWAP[]
        SUB[]

        /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

        #PUSH, 0, 3 /* phase */
        CINDEX[]
        LT[]
        #PUSH, 3 /* phase */
        CINDEX[]
        #PUSH, 3 /* 1-fractWeight */
        CINDEX[]
        LT[]
        AND[]
        IF[] /* if 0 &lt; phase &lt; 1-fractWeight then need to adjust phase */

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

            DUP[]
            #PUSH, 3
            CINDEX[]
            SUB[]

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt;, &lt;1-fractWeight-phase&gt; */

            ROLL[]
            GTEQ[]
            IF[] /* error from phase to 1-fractWeight &gt;= error from 0 to phase */
                POP[]
                #PUSH, 0 /* target 0 as phase */
            EIF[]
            /* else target 1-fractWeight as phase, which is what's left on stack */

        ELSE[]

            /* STACK: &lt;phase&gt;, &lt;1-fractWeight&gt; */

            POP[]

        EIF[]

    ELSE[] /* optimize for one edge aligned */

        /* STACK: &lt;phase&gt;, &lt;weight&gt;, &lt;method'&gt; */

        #PUSH, 7
        EQ[]
        IF[] /* right flush */

            /* STACK: &lt;phase&gt;, &lt;weight&gt; */

            DUP[]
            FLOOR[]
            SUB[]

            /* STACK: &lt;phase&gt;, &lt;fractWeight&gt; */

            NEG[]
            SWAP[]
            POP[]

        ELSE[] /* left flush (and default) */

            /* STACK: &lt;phase&gt;, &lt;weight&gt; */

            POP[]
            POP[]
            #PUSH, 0

        EIF[]

    EIF[]

EIF[]

#PUSH, 2, 78 /* roundDist */
CALL[]

/* STACK: phase */

#PUSHON
#END
ENDF[]

FDEF[], 113

/* fn calculates delta phase for optimal position of
   stroke bordered by &lt;p&gt; and &lt;c&gt; according to &lt;method&gt;
   (see fn 112 for definition of method)

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, 113

   returns with delta phase in interval ]-½,+½] on stack */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt; */

    /* use sequence of parameters &lt;p&gt; and &lt;c&gt; to determine if this is
       a "left" stroke (in which case we may add grey to the right), or
       a "right" stroke (in which case we may add grey to the left) */

#PUSH, 2 /* c */
CINDEX[]
#PUSH, 4 /* p */
CINDEX[]
MD[O]
#PUSH, 0
GTEQ[]
IF[]
    #PUSH, 0 /* "left" stroke */
ELSE[]
    ROLL[]
    ROLL[]
    SWAP[]
    ROLL[]
    #PUSH, 1 /* "right" stroke */
EIF[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, &lt;right?&gt; */

#PUSH, 4 /* p */
CINDEX[]
GC[N]
DUP[]
FLOOR[]
SUB[]
DUP[]

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;method&gt;, &lt;right?&gt;, &lt;source phase&gt;, &lt;source phase&gt; */

#PUSH, 5 /* c */
MINDEX[]
#PUSH, 6 /* p */
MINDEX[]
MD[N]

/* STACK: &lt;method&gt;, &lt;right?&gt;, &lt;source phase&gt;, &lt;source phase&gt;, &lt;weight&gt; */

#PUSH, 5 /* method */
MINDEX[]
#PUSH, 5 /* right? */
MINDEX[]
#PUSH, 112 /* adjust to target stroke phase */
CALL[]

/* STACK: &lt;source phase&gt;, &lt;target phase&gt; */

SWAP[]
SUB[]

/* STACK: &lt;delta phase&gt; */
/* minimze phase into interval ]-½,+½] */

NEG[]
#PUSH, 32
ADD[]
DUP[]
FLOOR[]
SUB[]
#PUSH, 32
SUB[]
NEG[]

#PUSHON
#END
ENDF[]

FDEF[], 114

/* emulate MIAP instruction with rendering environment specific rounding

   CALL[], &lt;c&gt;, &lt;cvt&gt;, 114 */

#BEGIN
#PUSHOFF

/* STACK: &lt;c&gt;, &lt;cvt&gt; */

#PUSH, 2 /* c */
CINDEX[]
GC[N]
DUP[]

/* STACK: &lt;c&gt;, &lt;cvt&gt;, &lt;wNat&gt;, &lt;wNat&gt; */

ROLL[]
DUP[]
#PUSH, 0
LT[]
IF[]

    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;wNat&gt;, &lt;cvt&gt; */

    POP[]

    /* cvt &lt; 0 (no cvt used) =&gt; w = wNat */
    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;w&gt; */

    #PUSH, 2, 78 /* roundDist */
    CALL[]

ELSE[]

    RCVT[]

    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;wNat&gt;, &lt;wCvt&gt; */
    /* no cvt cut-in test (for eventual support of automatic small caps, superiors, and inferiors), pop wNat to use wCvt */

    SWAP[]
    POP[]

    /* leave value as rounded by cpgm */
    /* STACK: &lt;c&gt;, &lt;wNat&gt;, &lt;w&gt; */

EIF[]

SUB[]
NEG[]

/* STACK: &lt;c&gt;, &lt;wDelta&gt; */

#PUSH, 2
CINDEX[]
SRP0[]

MSIRP[M]

#PUSHON
#END
ENDF[]

FDEF[], 115

/* interpolates a point &lt;p&gt; in &lt;dirFlag&gt; between points &lt;lsb&gt; and &lt;rsb&gt;
   dirFlag: postRoundFlag*8 + dir
   dir: X = 0, Y = 1, X/ = 2, Y/ = 3, ...

   depending on rendering environment and pv may optimise point position

   CALL[], &lt;dirFlag&gt;, &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, 115 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dirFlag&gt;, &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt; */
/* separate postRoundFlag from dir */

#PUSH, 4 /* dirFlag */
MINDEX[]
DUP[]
#PUSH, 512
DIV[]
DUP[]
#PUSH, 512
MUL[]
ROLL[]
SWAP[]
SUB[]

/* STACK:, &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt; */

DUP[]
#PUSH, 93 /* setV */
ADD[]
CALL[]

/* STACK: &lt;p0&gt;, &lt;p&gt;, &lt;p1&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
SRP1[]
ROLL[] /* p1 */
SRP2[]
ROLL[] /* p */
DUP[]
IP[]

/* STACK: &lt;p0&gt;, &lt;postRoundFlag&gt;, &lt;dir&gt;, &lt;p&gt; */

ROLL[] /* postRoundFlag */
IF[]

    /* STACK: &lt;p0&gt;, &lt;dir&gt;, &lt;p&gt; */

    #PUSH, 93, 4096, 4 /* setV, 64, dir */
    MINDEX[]
    MUL[]
    ODD[]
    ADD[]
    CALL[]

    /* STACK: &lt;p0&gt;, &lt;p&gt; */

    SWAP[]
    POP[]
    DUP[] /* p */
    SRP0[]
    DUP[]
    GC[N]
    DUP[]
    #PUSH, 2, 78 /* roundDist */
    CALL[]
    SWAP[]
    SUB[]

    /* STACK: &lt;p&gt;, &lt;[p.c]-p.c&gt; */

ELSE[]

    /* STACK: &lt;p0&gt;, &lt;dir&gt;, &lt;p&gt; */

    SWAP[]
    POP[]

    /* STACK: &lt;p0&gt;, &lt;p&gt; */

    DUP[]
    ROLL[]
    DUP[] /* p0 */
    SRP0[]
    MD[N]

    #PUSH, 2, 78 /* roundDist */
    CALL[]

    /* STACK: &lt;p&gt;, &lt;[p.dist]&gt; */

EIF[]

MSIRP[M]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 116

/* constrains a stroke in &lt;dir&gt;, defined by parent &lt;p&gt; and child &lt;c&gt;,
   and by cvt &lt;cvt&gt;, and interpolates it between points &lt;gp0&gt; and &lt;gp1&gt;
   dir: X = 0, Y = 1, X/ = 2
   sof: (stroke optimization flags ||, |&lt;, and &gt;| ) don't = 0, do = 1, leftBias = 2, rightBias = 3

   CALL[], &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;gp1&gt;, &lt;sof&gt;, 116 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;cvt&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 4096, 9 /* setV, 64, dir */
CINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* constrain stroke */

#PUSH, 5 /* p */
CINDEX[]
#PUSH, 5 /* c */
CINDEX[]
#PUSH, 5 /* cvt */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 7 /* setV, dir */
CINDEX[]
ADD[]
CALL[]

#PUSH, 5 /* gp0 */
CINDEX[]
#PUSH, 5 /* p */
CINDEX[]
#PUSH, 5 /* c */
CINDEX[]
#PUSH, 5 /* gp1 */
CINDEX[]
#PUSH, 111 /* interpolate median */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

#PUSH, 93, 4096, 8 /* setV, 64, dir */
MINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

DUP[]
#PUSH, 0
GT[]
IF[] /* optimize stroke position */

    #PUSH, 80
    CALL[]

    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;som&gt; */

    #PUSH, 5 /* p */
    CINDEX[]
    #PUSH, 5 /* c */
    CINDEX[]
    #PUSH, 7 /* p */
    CINDEX[]
    #PUSH, 7 /* c */
    CINDEX[]
    #PUSH, 5 /* som */
    CINDEX[]
    #PUSH, 113 /* get delta phase for optimal stroke position */
    CALL[]
    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;som&gt; */

    #PUSH, 0
    GT[]
    #PUSH, 2 /* sof */
    CINDEX[]
    #PUSH, 1
    GT[]
    AND[]
    IF[]

        /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
        /* determine total side-bearing space to see if we need to bias the black body */

        #PUSH, 4 /* p */
        CINDEX[]
        #PUSH, 6 /* gp0 */
        CINDEX[]
        MD[N]
        #PUSH, 3 /* gp1 */
        CINDEX[]
        #PUSH, 5 /* c */
        CINDEX[]
        MD[N]
        ADD[]
        DUP[]
        #PUSH, 64
        GT[]
        IF[]

            /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;totSBS&gt; */
            /* enough total side-bearing space left, leave it alone */
            POP[]

        ELSE[]

            /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt;, &lt;totSBS&gt; */
            /* 1 pixel or less total side-bearing space left */

            #PUSH, 0
            GT[]
            IF[]

                /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                /* any total side-bearing space left at all */

                DUP[]
                #PUSH, 2
                EQ[]
                IF[]

                    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                    /* move stroke flush left */

                    #PUSH, 4 /* p */
                    CINDEX[]
                    #PUSH, 4 /* c */
                    CINDEX[]
                    #PUSH, 7 /* gp0 */
                    CINDEX[]
                    #PUSH, 7 /* p */
                    CINDEX[]
                    MD[N]
                    #PUSH, 2
                    SLOOP[]
                    SHPIX[]

                ELSE[]

                    /* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */
                    /* move stroke flush left */

                    #PUSH, 4 /* p */
                    CINDEX[]
                    #PUSH, 4 /* c */
                    CINDEX[]
                    #PUSH, 4 /* gp1 */
                    CINDEX[]
                    #PUSH, 6 /* c */
                    CINDEX[]
                    MD[N]
                    #PUSH, 2
                    SLOOP[]
                    SHPIX[]

                EIF[]

            EIF[]

        EIF[]

    EIF[]

EIF[]

/* STACK: &lt;gp0&gt;, &lt;p&gt;, &lt;c&gt;, &lt;gp1&gt;, &lt;sof&gt; */

POP[]
POP[]
POP[]
POP[]
POP[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 117

/* fn tries to place and constrain two strokes &lt;p0,c0,cvt0&gt; and &lt;p1,c1,cvt1&gt;
   between grandparents &lt;gp0&gt; and &lt;gp1&gt; in direction &lt;dir&gt;
   dir: X = 0, Y = 1, X/ = 2
   X/ (italic) is not yet implemented; to do so properly will need to factor
   the italic phase optimization part out of fn 131 and make it available to
   this fn.   

   CALL[], &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, 117 */

#BEGIN
#PUSHOFF

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */

#PUSH, 93, 4096, 11 /* setV, dir */
CINDEX[]
MUL[]
ODD[]
ADD[]
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* interpolate black body */

#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 7 /* c0 */
CINDEX[]
#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 12 /* gp0 */
CINDEX[]
#PUSH, 12 /* p0 */
CINDEX[]
#PUSH, 9 /* c1 */
CINDEX[]
#PUSH, 8 /* gp1 */
CINDEX[]
#PUSH, 110 /* calc offset for interpolation of median */
CALL[]
#PUSH, 4
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* constrain stroke0 */

#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 7 /* c0 */
CINDEX[]
#PUSH, 7 /* cvt0 */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt; */
/* constrain stroke1 */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* cvt1 */
MINDEX[]
#PUSH, 109 /* symDist */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt; */

#PUSH, 80
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
/* determine phase0 for optimal position of stroke0 */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* c0 */
CINDEX[]
#PUSH, 3 /* som */
CINDEX[]
#PUSH, 113 /* get delta phase for optimal stroke position */
CALL[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt; */
/* forward to stroke1 position */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 3 /* phase0 */
CINDEX[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt; */
/* determine phase1 for optimal position of stroke1 */

DUP[]
#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 5 /* som */
CINDEX[]
#PUSH, 113 /* get delta phase for optimal stroke position */
CALL[]
ADD[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* undo forwarding to stroke1 position */

#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 4 /* phase0 */
CINDEX[]
NEG[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* determine double average phase error */

#PUSH, 2 /* phase0 */
CINDEX[]
#PUSH, 2 /* phase1 */
CINDEX[]
ADD[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */

DUP[]
#PUSH, 64
GTEQ[]
IF[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */
    /* double average phase error &gt;= 1 pixel, correct to the left */

    POP[]
    #PUSH, 64
    SUB[]
    SWAP[]
    #PUSH, 64
    SUB[]
    SWAP[]

ELSE[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */

    #PUSH, -64
    LT[]
    IF[]

        /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt;, &lt;2*phaseError&gt; */
        /* double average phase error &lt; -1 pixel, correct to the right */

        #PUSH, 64
        ADD[]
        SWAP[]
        #PUSH, 64
        ADD[]
        SWAP[]

    EIF[]

EIF[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase0&gt;, &lt;phase1&gt; */
/* apply corrected optimal phase0 to stroke0 */

#PUSH, 8 /* p0 */
CINDEX[]
#PUSH, 8 /* c0 */
CINDEX[]
#PUSH, 4 /* phase0 */
MINDEX[]
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt;, &lt;phase1&gt; */
/* apply corrected optimal phase1 to stroke1 */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
ROLL[] /* phase1 */
#PUSH, 2
SLOOP[]
SHPIX[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */

DUP[]
#PUSH, 0
GT[]
IF[]

    /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
    /* determine total side-bearing space to see if we need to bias the black body */

    #PUSH, 6 /* p0 */
    CINDEX[]
    #PUSH, 8 /* gp0 */
    CINDEX[]
    MD[N]
    #PUSH, 3 /* gp1 */
    CINDEX[]
    #PUSH, 5 /* c1 */
    CINDEX[]
    MD[N]
    ADD[]
    DUP[]
    #PUSH, 64
    GT[]
    IF[]

        /* enough total side-bearing space left, leave it alone */
        POP[]

    ELSE[]

        /* 1 pixel or less total side-bearing space left */
        #PUSH, 0
        GT[]
        IF[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* any total side-bearing space left at all, move black-body flush left and start over */

            #PUSH, 6 /* p0 */
            CINDEX[]
            #PUSH, 6 /* c0 */
            CINDEX[]
            #PUSH, 6 /* p1 */
            CINDEX[]
            #PUSH, 6 /* c1 */
            CINDEX[]
            #PUSH, 11 /* gp0 */
            CINDEX[]
            #PUSH, 11 /* p0 */
            CINDEX[]
            MD[N]
            #PUSH, 4
            SLOOP[]
            SHPIX[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* optimize position of stroke0 forwarding phase0 to stroke1 */

            #PUSH, 6 /* p0 */
            CINDEX[]
            #PUSH, 6 /* c0 */
            CINDEX[]
            #PUSH, 6 /* p1 */
            CINDEX[]
            #PUSH, 6 /* c1 */
            CINDEX[]
            #PUSH, 10 /* p0 */
            CINDEX[]
            #PUSH, 10 /* c0 */
            CINDEX[]
            #PUSH, 7 /* som */
            CINDEX[]
            #PUSH, 113 /* get delta phase for optimal stroke position */
            CALL[]
            #PUSH, 4 /* apply to both strokes */
            SLOOP[]
            SHPIX[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* optimize position of stroke1 */

            #PUSH, 4 /* p1 */
            CINDEX[]
            #PUSH, 4 /* c1 */
            CINDEX[]
            #PUSH, 5 /* c1 */
            CINDEX[]
            #PUSH, 7 /* p1 */
            CINDEX[]
            #PUSH, 5 /* som */
            CINDEX[]
            #PUSH, 113 /* get delta phase for optimal stroke position */
            CALL[]
            #PUSH, 2 /* apply to second stroke only */
            SLOOP[]
            SHPIX[]

        ELSE[]

            /* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */
            /* no total side-bearing space left, move stroke1 left by 1 pixel */

            #PUSH, 4 /* p1 */
            CINDEX[]
            #PUSH, 4 /* c1 */
            CINDEX[]
            #PUSH, -64, 2
            SLOOP[]
            SHPIX[]

        EIF[]

    EIF[]

EIF[]

/* STACK: &lt;dir&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;gp1&gt;, &lt;som&gt; */

POP[]
POP[]
POP[]
POP[]
POP[]
POP[]
POP[]
POP[]

#PUSHON
#END
ENDF[]

FDEF[], 118

/* fn to set pv perpendicular to p1 and c0' such that distance
   c0'&lt;---p0 measures cvt or natural distance if cvt = -1.
   used as support to ResX|YDDist and ResX|YDLink

   CALL[], &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt&gt;, 118 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 3 /* c0 */
CINDEX[]
SDPVTL[R]
#PUSH, 3 /* p0 */
CINDEX[]
#PUSH, 3 /* c0 */
CINDEX[]
ROLL[] /* cvt */
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 101 /* resActDist, noCvt, noMinDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]
ABS[]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* p0 */
CINDEX[]
SPVTL[r]
#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 4 /* p0 */
CINDEX[]
MD[N]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
/* test if solution exists at all */

DUP[]
DUP[]
MUL[]
#PUSH, 3 /* w */
CINDEX[]
DUP[]
MUL[]
LTEQ[]
#PUSH, 0, 3 /* d */
CINDEX[]
EQ[]
OR[]

/* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt;, &lt;d² &lt;= w² or d = 0?&gt; */

IF[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
    /* solution doesn't exist, hence prepare to bail out */

    POP[]
    POP[]
    SWAP[]
    POP[]
    SPVTL[R]

ELSE[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d&gt; */
    /* solution exists, hence continue computation */

    DUP[]
    MUL[]
    #PUSH, 2 /* w */
    CINDEX[]
    DUP[]
    MUL[]
    SUB[]
    DUP[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d² - w²&gt;, &lt;d² - w²&gt; */

    #PUSH, 83 /* sqrt */
    CALL[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;w&gt;, &lt;d² - w²&gt;, &lt;sqrt(d² - w²)&gt; */

    ROLL[] /* w */
    MUL[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;d² - w² =: dx&gt;, &lt;w·sqrt(d² - w²) =: dy&gt; */

    #PUSH, 5 /* p1 */
    CINDEX[]
    #PUSH, 5 /* p0 */
    CINDEX[]
    SDPVTL[R]
    #PUSH, 4 /* p0 */
    CINDEX[]
    #PUSH, 4 /* c0 */
    MINDEX[]
    MD[O]

    #PUSH, 0
    LT[]
    IF[]
        NEG[] /* dy */
    EIF[]

    /* STACK: &lt;p1&gt;, &lt;p0&gt;, &lt;dx&gt;, &lt;dy&gt; */

    #PUSH, 4 /* p1 */
    MINDEX[]
    DUP[]
    SVTCA[X]
    GC[N]
    SWAP[]
    SVTCA[Y]
    GC[N]

    /* STACK: &lt;p0&gt;, &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt; */

    #PUSH, 5 /* p0 */
    MINDEX[]
    DUP[]
    SVTCA[X]
    GC[N]
    SWAP[]
    SVTCA[Y]
    GC[N]

    /* STACK: &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt;, &lt;p0.x&gt;, &lt;p0.y&gt; */

    #PUSH, 0 /* enter twilight zone */
    SZPS[]

    SVTCA[Y]
    #PUSH, 0
    SWAP[]
    SCFS[]
    SVTCA[X]
    #PUSH, 0
    SWAP[]
    SCFS[]

    /* STACK: &lt;dx&gt;, &lt;dy&gt;, &lt;p1.x&gt;, &lt;p1.y&gt; */

    SVTCA[Y]
    DUP[]
    #PUSH, 1
    SWAP[]
    SCFS[]
    #PUSH, 2
    SWAP[]
    SCFS[]
    SVTCA[X]
    DUP[]
    #PUSH, 1
    SWAP[]
    SCFS[]
    #PUSH, 2
    SWAP[]
    SCFS[]

    /* STACK: &lt;dx&gt;, &lt;dy&gt; */

    SWAP[]

    /* STACK: &lt;dy&gt;, &lt;dx&gt; */

    #PUSH, 2, 0, 1
    SFVTL[r]
    SWAP[]
    SHPIX[]

    /* STACK: &lt;dy&gt; */

    #PUSH, 2, 0, 1
    SFVTL[R]
    SWAP[]
    SHPIX[]

    /* STACK: */

    #PUSH, 2, 1
    SPVTL[R]

    #PUSH, 1 /* leave twilight zone */
    SZPS[]

EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 119

/* align c with p unless fv is perpendicular to pv
   fv and pv assumed to be set prior to calling fn 119
   used as support to ResX|YDDist and ResX|YDLink

   CALL[], &lt;p&gt;, &lt;c&gt;, 119 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt; */

SWAP[]
SRP0[]

/* STACK: &lt;c&gt; */

GFV[]
GPV[]

/* STACK: &lt;c&gt;, &lt;fv.x&gt;, &lt;fv.y&gt;, &lt;pv.x&gt;, &lt;pv.y&gt; */

ROLL[]
MUL[]
SWAP[]
ROLL[]
MUL[]
ADD[]
ABS[]

/* STACK: &lt;c&gt;, &lt;|pv.y*fv.y + pv.x*fv.x|&gt; */

#PUSH, 16384, 1024
MUL[]

/* the above dot product multiplies two 2.14 numbers in 26.6 arithmetic yielding a 2.22 number (2^14 * 2^14 / 2^6 = 2^22)
   like the rasterizer, we're comparing this number to 1/16: |fv1·pv| &lt; 1/16 means fv1 is within ±arcsin(1/16) or ±3.5833° perpendicular to pv
   in 2.22 format 1/16 is 2^18, but since the assembler won't allow us to push 2^18 = 262144, we make up this number as a multiplication
   the multiplication, in turn, is again done in 26.6 format, hence we multiply 16384 with 1024 (2^14 * 2^10 / 2^6 = 2^18) */

LT[]
IF[]

    /* fv is approximately perpendicular to pv which by itself is perpendicular
       to a line from p to c' (with c' the twilight point 2 computed in fn 118),
       i.e. fv is approximately parallel to line from p to c'. Given the usage
       of fn 119 this means that fv is approximately coincident with said line,
       or c is approximately aligned already, hence simply touch the point, but
       without involving the pv */

    /* STACK: &lt;c&gt; */

    #PUSH, 0
    SHPIX[]

ELSE[]

    /* STACK: &lt;c&gt; */

    ALIGNRP[]

EIF[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 120

/* support to ResX|YDDist and ResX|YDLink where fv0 and fv1 are x or y

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt;, 120 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

#PUSH, 6 /* p1 */
CINDEX[]
#PUSH, 9 /* p0 */
CINDEX[]
#PUSH, 9 /* c0 */
CINDEX[]
#PUSH, 7 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

SWAP[]
#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 6 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 5 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1&gt; */

#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 121

/* support to ResX|YDDist and ResX|YDLink where fv0 is x or y while fv1 is to-line

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt;, 121 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 7 /* p1 */
CINDEX[]
#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 8 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

ROLL[]
#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 7 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* p1 */
MINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 6 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 122

/* support to ResX|YDDist and ResX|YDLink where fv0 is to-line while fv1 is x or y

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt;, 122 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt; */

#PUSH, 7 /* p1 */
CINDEX[]
#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 8 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1&gt; */

ROLL[]
ROLL[]
SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 4 /* p1 */
CINDEX[]
#PUSH, 6 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1&gt; */

#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
#PUSH, 5 /* c1 */
CINDEX[]
#PUSH, 5 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1&gt; */

#PUSH, 0 /* x? */
EQ[]
IF[]
  SFVTCA[X]
ELSE[]
  SFVTCA[Y]
EIF[]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 123

/* support to ResX|YDDist and ResX|YDLink where both fv0 and fv1 are to-line

   CALL[], &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt;, 123 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 8 /* p1 */
CINDEX[]
#PUSH, 11 /* p0 */
CINDEX[]
#PUSH, 11 /* c0 */
CINDEX[]
#PUSH, 9 /* cvt0 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.p0&gt;, &lt;fv0.p1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 4 /* fv0.p0 */
MINDEX[]
#PUSH, 4 /* fv0.p1 */
MINDEX[]
SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 7 /* c0 */
MINDEX[]
#PUSH, 119
CALL[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 6 /* p1 */
MINDEX[]
#PUSH, 6 /* c1 */
CINDEX[]
#PUSH, 6 /* cvt1 */
MINDEX[]
#PUSH, 118
CALL[]

/* STACK: &lt;p0&gt;, &lt;c1&gt;, &lt;fv1.p0&gt;, &lt;fv1.p1&gt; */

SFVTL[r]

/* STACK: &lt;p0&gt;, &lt;c1&gt; */

#PUSH, 119
CALL[]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 124

/* determine on which side of edge p0-&gt;p1 is c
   by calculating vector product (c - p0) ^ (p1 - p0)

   CALL[], &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, 124

   returns with vector product on stack
   if vector product &lt; 0 then c is on the left of p0-&gt;p1
   if vector product &gt; 0 then c is on the right of p0-&gt;p1
   else c is exactly on p0-&gt;p1 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt; */

SPVTCA[X]
#PUSH, 3 /* p0 */
CINDEX[]
#PUSH, 3 /* c */
CINDEX[]
MD[O]
#PUSH, 4 /* p0 */
CINDEX[]
#PUSH, 3 /* p1 */
CINDEX[]
MD[O]

/* STACK: &lt;p0&gt;, &lt;c&gt;, &lt;p1&gt;, &lt;a.x&gt;, &lt;b.x&gt; */

SPVTCA[Y]
#PUSH, 5 /* p0 */
CINDEX[]
#PUSH, 5 /* c */
MINDEX[]
MD[O]
#PUSH, 5 /* p0 */
MINDEX[]
#PUSH, 5 /* p1 */
MINDEX[]
MD[O]

/* STACK: &lt;a.x&gt;, &lt;b.x&gt;, &lt;a.y&gt;, &lt;b.y&gt; */

#PUSH, 4 /* a.x */
MINDEX[]
MUL[]

ROLL[] /* b.x */
ROLL[] /* a.y */
MUL[]

SUB[]

/* STACK: &lt;b.y*a.x - b.x*a.y&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 125

/* fn interpolates a pair of diagonal links between grand-parents gp0 and gp1 along pv
   pv: X = 0, Y = 1, X/ = 2; fv0 and fv1: x and y components in 2.14

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, 125 */

#BEGIN
#PUSHOFF

/* interpolate parents between grand-parents along pv */
/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 93, 14 /* pv */
CINDEX[]
ADD[]
CALL[]

#PUSH, 12 /* gp0 */
MINDEX[]
SRP1[]
#PUSH, 5 /* gp1 */
MINDEX[]
SRP2[]

#PUSH, 10 /* p0 */
CINDEX[]
IP[]
#PUSH, 7 /* p1 */
CINDEX[]
IP[]

/* determine if this is a crisscrossed stroke */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 10 /* p0 */
CINDEX[]
#PUSH, 10 /* c0 */
CINDEX[]
#PUSH, 9 /* p1 */
CINDEX[]
#PUSH, 124 /* c0 on which side of edge p0-&gt;p1? */
CALL[]
#PUSH, 0
LT[]

#PUSH, 11 /* p0 */
CINDEX[]
#PUSH, 8 /* c1 */
CINDEX[]
#PUSH, 10 /* p1 */
CINDEX[]
#PUSH, 124 /* c1 on which side of edge p0-&gt;p1? */
CALL[]
#PUSH, 0
LT[]

EQ[]
IF[]

    /* both childern on same side of parent edge p0&gt;-&gt;p1
       hence re-align children with parents perp to dpv. */
    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 11 /* p0 */
    CINDEX[]
    SDPVTL[R]

    #PUSH, 4 /* fv0.x */
    CINDEX[]
    #PUSH, 4 /* fv0.y */
    CINDEX[]
    SFVFS[]

    #PUSH, 10 /* p0 */
    CINDEX[]
    SRP0[]
    #PUSH, 9 /* c0 */
    CINDEX[]
    MDRP[m&lt;rBl]

    #PUSH, 2 /* fv1.x */
    CINDEX[]
    #PUSH, 2 /* fv1.y */
    CINDEX[]
    SFVFS[]

    #PUSH, 7 /* p1 */
    CINDEX[]
    SRP0[]
    #PUSH, 6 /* c1 */
    CINDEX[]
    MDRP[m&lt;rBl]

ELSE[]

    /* childern on opposite sides of "parent edge" p0&gt;-&gt;p1
       hence re-align children with parents per method for crisscrossed strokes */
    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 11 /* p0 */
    CINDEX[]
    #PUSH, 11 /* c0 */
    CINDEX[]
    #PUSH, -1, 118 /* no cvt0, no minDist */
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 4 /* fv0.x */
    CINDEX[]
    #PUSH, 4 /* fv0.y */
    CINDEX[]
    SFVFS[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 7 /* p1 */
    CINDEX[]
    #PUSH, 10 /* c0 */
    CINDEX[]
    #PUSH, 119
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 10 /* p0 */
    CINDEX[]
    #PUSH, 8 /* p1 */
    CINDEX[]
    #PUSH, 8 /* c1 */
    CINDEX[]
    #PUSH, -1, 118 /* no cvt1, no minDist */
    CALL[]

    /* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

    #PUSH, 2 /* fv1.x */
    CINDEX[]
    #PUSH, 2 /* fv1.y */
    CINDEX[]
    SFVFS[]

    /* STACK: &lt;p0&gt;, &lt;c1&gt; */

    #PUSH, 10 /* p0 */
    CINDEX[]
    #PUSH, 7 /* c1 */
    CINDEX[]
    #PUSH, 119
    CALL[]

EIF[]

/* determine pre-link medians, measuring perpendicularly to p0-&gt;p1 */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt; */

#PUSH, 10 /* p0 */
CINDEX[]
GC[N]
#PUSH, 10 /* c0 */
CINDEX[]
GC[N]
ADD[]

#PUSH, 8 /* p1 */
CINDEX[]
GC[N]
#PUSH, 8 /* c1 */
CINDEX[]
GC[N]
ADD[]

/* links */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

#PUSH, 6 /* fv0.x */
CINDEX[]
#PUSH, 6 /* fv0.y */
CINDEX[]
SFVFS[]

#PUSH, 12 /* p0 */
CINDEX[]
#PUSH, 12 /* c0 */
CINDEX[]
#PUSH, 12 /* cvt0 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

#PUSH, 4 /* fv1.x */
CINDEX[]
#PUSH, 4 /* fv1.y */
CINDEX[]
SFVFS[]

#PUSH, 9 /* p1 */
CINDEX[]
#PUSH, 9 /* c1 */
CINDEX[]
#PUSH, 9 /* cvt1 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

/* subtract post-link medians from pre-link ones */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;median0&gt;, &lt;median1&gt; */

SWAP[]

#PUSH, 10 /* p0 */
CINDEX[]
GC[N]
#PUSH, 10 /* c0 */
CINDEX[]
GC[N]
ADD[]

SUB[]
#PUSH, 32
MUL[]

SWAP[]

#PUSH, 8 /* p1 */
CINDEX[]
GC[N]
#PUSH, 8 /* c1 */
CINDEX[]
GC[N]
ADD[]

SUB[]
#PUSH, 32
MUL[]

/* finally move points by respective deltas */
/* STACK: &lt;pv&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv0.x&gt;, &lt;fv0.y&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;delta0&gt;, &lt;delta1&gt; */

#PUSH, 1, 12 /* pv */
CINDEX[]
EQ[]
IF[]
    SFVTCA[Y]
ELSE[]
    SFVTCA[X]
EIF[]

#PUSH, 10 /* p0 */
MINDEX[]
DUP[]
SRP0[]
#PUSH, 3 /* delta0 */
CINDEX[]
MSIRP[m]

#PUSH, 6 /* fv0.x */
MINDEX[]
#PUSH, 6 /* fv0.y */
MINDEX[]
SFVFS[]

#PUSH, 7 /* c0 */
MINDEX[]
DUP[]
SRP0[]
ROLL[] /* delta0 */
MSIRP[m]

/* STACK: &lt;pv&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;fv1.x&gt;, fv1.y&gt;, &lt;delta1&gt; */

#PUSH, 1, 7 /* pv */
MINDEX[]
EQ[]
IF[]
    SFVTCA[Y]
ELSE[]
    SFVTCA[X]
EIF[]

#PUSH, 5 /* p1 */
MINDEX[]
DUP[]
SRP0[]
#PUSH, 2 /* delta1 */
CINDEX[]
MSIRP[m]

ROLL[] /* fv0.x */
ROLL[] /* fv0.y */
SFVFS[]

SWAP[] /* c1 */
DUP[]
SRP0[]
SWAP[] /* delta1 */
MSIRP[m]

/* STACK: */

#PUSHON
#END
ENDF[]

FDEF[], 126

/* glue code to fn 125 where both fv0 and fv1 are x or y

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1&gt;, 126 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1&gt; */

SWAP[] /* fv0 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

ROLL[] /* fv1 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 127

/* glue code to fn 125 where fv0 is to line and fv1 is x or y

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1&gt;, 127 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1&gt; */

ROLL[] /* fv0.0 */
ROLL[] /* fv0.1 */
SFVTL[r]
GFV[]

ROLL[] /* fv1 */
#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 128

/* glue code to fn 125 where fv0 is x or y and fv1 is to line

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt;, 128 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt; */

SFVTL[r]

#PUSH, 1
EQ[]
IF[]
    #PUSH, 0, 16384
ELSE[]
    #PUSH, 16384, 0
EIF[]

GFV[]

#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 129

/* glue code to fn 125 where both fv0 and fv1 are to line

   CALL[], &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt;, 129 */

#BEGIN
#PUSHOFF

/* STACK: &lt;pv&gt;, &lt;gp0&gt;, &lt;p0&gt;, &lt;c0&gt;, &lt;cvt0&gt;, &lt;p1&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;gp1&gt;, &lt;fv0.0&gt;, &lt;fv0.1&gt;, &lt;fv1.0&gt;, &lt;fv1.1&gt; */

#PUSH, 4 /* fv0.0 */
MINDEX[]
#PUSH, 4 /* fv0.1 */
MINDEX[]
SFVTL[r]
GFV[]
#PUSH, 4 /* fv1.0 */
MINDEX[]
#PUSH, 4 /* fv1.1 */
MINDEX[]
SFVTL[r]
GFV[]
#PUSH, 125 /* resIPDDLink */
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 130

/* extrapolate x-coordinate of &lt;p&gt; to base line along italic angle
   returns with extrapolated x-coordinate on stack

   CALL[], &lt;p&gt;, 130 */

#BEGIN
#PUSHOFF

DUP[]
SVTCA[X]
GC[N]
SWAP[]
SVTCA[Y]
GC[N]

/* STACK: &lt;p.x&gt;, &lt;p.y&gt; */

#PUSH, 10 /* rise */
RS[]
#PUSH, 11 /* run */
RS[]

/* STACK: &lt;p.x&gt;, &lt;p.y&gt;, &lt;rise&gt;, &lt;run&gt; */

ROLL[]
MUL[]
SWAP[]
DIV[]
SUB[]

/* STACK: &lt;p.x - p.y*run/rise&gt; */

#PUSHON
#END
ENDF[]

FDEF[], 131

/* constrains an italic stroke, defined by parents &lt;p0&gt; and &lt;p1&gt;, by
   children &lt;c0&gt; and &lt;c1&gt;, and by cvts &lt;cvt0&gt; and &lt;cvt1&gt;, and inter-
   polates it between points &lt;lsb&gt; and &lt;rsb&gt;

   for b&amp;w stroke additionally optimizes the resulting pixel pattern

   CALL[], &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt;, 131 */

#BEGIN
#PUSHOFF

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */

#PUSH, 9 /* pv perp italic, fv X */
CALL[]

/* lock parent edge */

#PUSH, 6 /* p0 */
CINDEX[]
MDAP[r]

#PUSH, 5 /* p1 */
CINDEX[]
RDTG[]
MDRP[m&lt;RBl]

/* link child edge */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 5 /* c0 */
CINDEX[]
#PUSH, 4 /* cvt0 */
CINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 3 /* cvt1 */
CINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 106 /* resMIRP, noCvt, minDist */
ELSE[]
    #PUSH, 108 /* resMIRP, cvt, minDist */
EIF[]
CALL[]

RTG[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */
/* interpolate median of p0 and c0 between lsb and rsb */

#PUSH, 8 /* lsb */
CINDEX[]
#PUSH, 7 /* p0 */
CINDEX[]
#PUSH, 6 /* c0 */
CINDEX[]
#PUSH, 10 /* rsb */
CINDEX[]
#PUSH, 111 /* interpolate median */
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt0&gt;, &lt;cvt1&gt; */
/* if the two actual parent-&gt;child distances round to the same stroke weight */

#PUSH, 6 /* p0 */
CINDEX[]
#PUSH, 5 /* c0 */
CINDEX[]
#PUSH, 4 /* cvt0 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 102 /* resActDist, noCvt, minDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;cvt1&gt;, &lt;[dist0]&gt; */

#PUSH, 5 /* p1 */
CINDEX[]
#PUSH, 4 /* c1 */
CINDEX[]
#PUSH, 4 /* cvt1 */
MINDEX[]
DUP[]
#PUSH, 0
LT[]
IF[]
    POP[]
    #PUSH, 102 /* resActDist, noCvt, minDist */
ELSE[]
    #PUSH, 104 /* resActDist, cvt, minDist */
EIF[]
CALL[]

/* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;[dist0]&gt;, &lt;[dist1]&gt; */

EQ[]
IF[]

    /* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* adjust median of p1 and c1 in parallel */

    RDTG[]
    #PUSH, 4 /* p0 */
    CINDEX[]
    SRP0[]
    #PUSH, 3 /* p1 */
    CINDEX[]
    MDRP[m&lt;RBl]

    #PUSH, 2 /* c0 */
    CINDEX[]
    SRP0[]
    #PUSH, 1 /* c1 */
    CINDEX[]
    MDRP[m&lt;RBl]

    #PUSH, 5 /* rsb */
    MINDEX[]
    POP[]
    #PUSH, 5 /* lsb */
    MINDEX[]
    POP[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

ELSE[]

    /* STACK: &lt;lsb&gt;, &lt;rsb&gt;, &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* interpolate median of p1 and c1 between lsb and rsb independently */

    #PUSH, 6 /* lsb */
    MINDEX[]
    #PUSH, 4 /* p1 */
    CINDEX[]
    #PUSH, 3 /* c1 */
    CINDEX[]
    #PUSH, 8 /* rsb */
    MINDEX[]
    #PUSH, 111 /* interpolate median */
    CALL[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

EIF[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
/* for b&amp;w only optimize pixel pattern */

#PUSH, 0, 2
RS[]
EQ[]
IF[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */
    /* extrapolate c0 to base line */

    RDTG[]
    #PUSH, 2 /* c0 */
    CINDEX[]
    #PUSH, 130
    CALL[]

    /* extrapolate p0 to base line */

    #PUSH, 5 /* p0 */
    CINDEX[]
    #PUSH, 130
    CALL[]

    /* get parentPhase from extrapolated x-coordinate */

    DUP[]
    DUP[]
    ROUND[Bl]
    SUB[]

    #PUSH, 4 /* targetPhase */
    RS[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;parentPhase&gt;, &lt;targetPhase&gt; */
    /* shifting parent edge by deltaPhase optimizes stepping pattern on parent edge */

    SVTCA[X]
    SWAP[]
    SUB[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* minimize the positioning error by mapping deltaPhase from [-63,63] to [-32,31] */

    #PUSH, 96
    ADD[]
    DUP[]
    ROUND[Bl]
    SUB[]
    #PUSH, 32
    SUB[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* save minimized deltaPhase for child edge and shift parent edge */

    DUP[]
    #PUSH, 8 /* p0 */
    MINDEX[]
    #PUSH, 8 /* p1 */
    MINDEX[]
    ROLL[]
    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;c0.x'&gt;, &lt;p0.x'&gt;, &lt;deltaPhase&gt; */
    /* since child edge is linked perpendicular to italic angle,
       the resulting stroke would include unnecessary pixels,
       hence determine phase of distance between extrapolated
       x-coordinates (deltaDeltaPhase) */

    ROLL[]
    ROLL[]
    SUB[]
    DUP[]
    ROUND[Bl]
    SUB[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;deltaPhase&gt;, &lt;deltaDeltaPhase&gt; */
    /* subtract from deltaPhase (don't shift quite as far...) */

    SUB[]

    /* STACK: &lt;c0&gt;, &lt;c1&gt;, &lt;deltaPhase'&gt; */
    /* shift parent edge */

    #PUSH, 2
    SLOOP[]
    SHPIX[]

    /* STACK: */

ELSE[]

    /* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;c0&gt;, &lt;c1&gt; */

    POP[]
    POP[]
    POP[]
    POP[]

    /* STACK: */

EIF[]

RTG[]

#PUSHON
#END
ENDF[]

FDEF[], 132

/* for monochrome only: stack points &lt;p&gt; through &lt;c&gt; on top of &lt;p&gt; below &lt;ppem&gt;

   CALL[], &lt;p&gt;, &lt;c&gt;, &lt;ppem&gt;, 132 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p&gt;, &lt;c&gt;, &lt;ppem&gt; */

MPPEM[]
GT[]
#PUSH, 1, 2
RS[]
GTEQ[]
AND[]
IF[]

    /* STACK: &lt;p&gt;, &lt;c&gt; */

    SWAP[]
    SRP0[]
    DUP[]
    SVTCA[X]
    ALIGNRP[]
    SVTCA[Y]
    ALIGNRP[]

ELSE[]

    /* STACK: &lt;p&gt;, &lt;c&gt; */

    POP[]
    POP[]
EIF[]

#PUSHON
#END
ENDF[]

FDEF[], 133

/* support fn for fns 134 and 135

   CALL[], &lt;align?&gt;, &lt;from&gt;, &lt;to&gt;, 133 */

#BEGIN
#PUSHOFF

SWAP[]

/* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

#WBeginLoop133:

#PUSH, 2 /* to */
CINDEX[]
#PUSH, 2 /* from */
CINDEX[]
GTEQ[]
IF[]

    /* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

    DUP[]
    #PUSH, 4 /* align? */
    CINDEX[]
    IF[]
        ALIGNRP[]
    ELSE[]
        IP[]
    EIF[]

    #PUSH, 1
    ADD[]

    #PUSH, WOffset133
    JMPR[], (WOffset133=#WBeginLoop133)

EIF[]

/* STACK: &lt;align?&gt;, &lt;to&gt;, &lt;from&gt; */

POP[]
POP[]
POP[]

#PUSHON
#END
ENDF[]

FDEF[], 134

/* support fn for italic IUP[?]
   assume pv and fv are set externally

   CALL[], &lt;p0&gt;, &lt;p1&gt;, 134 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;p1&gt; */

#PUSH, 2 /* p0 */
CINDEX[]
GC[O]
#PUSH, 2 /* p1 */
CINDEX[]
GC[O]
EQ[]

/* STACK: &lt;p0&gt;, &lt;p1&gt;, &lt;eq?&gt; */

ROLL[] /* p0 */
DUP[]
DUP[]
SRP0[]
SRP1[]
#PUSH, 1
ADD[]
ROLL[] /* p1 */
DUP[]
SRP2[]
#PUSH, 1
SUB[]

/* STACK: &lt;eq?&gt;, &lt;from&gt;, &lt;to&gt; */

#PUSH, 133
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 135

/* support fn for italic IUP[?]
   assume pv and fv are set externally

   CALL[], &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt;, 135 */

#BEGIN
#PUSHOFF

/* STACK: &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt; */

#PUSH, 4 /* p0 */
CINDEX[]
GC[O]
#PUSH, 2 /* p1 */
CINDEX[]
GC[O]
EQ[]

/* STACK: &lt;p0&gt;, &lt;end&gt;, &lt;start&gt;, &lt;p1&gt;, &lt;eq?&gt; */

SWAP[]
DUP[]
SRP2[]
#PUSH, 1
SUB[]
SWAP[]
DUP[]

#PUSH, 6 /* p0 */
MINDEX[]
DUP[]
DUP[]
SRP0[]
SRP1[]
#PUSH, 1
ADD[]
#PUSH, 6 /* end */
MINDEX[]

/* STACK: &lt;start&gt;, &lt;to&gt;, &lt;eq?&gt;, &lt;eq?&gt;, &lt;from&gt;, &lt;end&gt; */

#PUSH, 133
CALL[]

ROLL[]
ROLL[]
#PUSH, 133
CALL[]

#PUSHON
#END
ENDF[]

FDEF[], 150
/* Function 150 takes 5 arguments */
/* VERSION 1.0 20120420 */

/* This function moves a point between a PPEM range */
/* for the given rasterizer mode (in Store 2) ClearType */
/* CALL[],&lt;point&gt;,&lt;amount&gt;,&lt;low PPEM&gt;,&lt;high PPEM&gt;, &lt;rasterizer mode&gt;, 150 */
/* &lt;low ppem&gt; Lowest PPEM range to be modified (inclusive) */
/* &lt;high ppem&gt; Highest PPEM range to be modified (inclusive) */
/* &lt;Point&gt; point to be modified */
/* &lt;amount&gt; Amount to move point, in ± 64ths */
/* &lt;rasterizer mode&gt; value in store 2 */
/* 150 Function number */
#BEGIN
#PUSHOFF
#PUSH, 2
RS[] /* read store 2 */
EQ[] /* is it = to the last arg? */
IF[] /* if so . . . */
    GPV[] /* Save current PV on stack to restore */
    SPVTCA[Y] /* We should only MPPEM with Y PV */
    ROLL[]
    MPPEM[] /* check cur. size against high ppem */
    GTEQ[]
    #PUSH, 4
    MINDEX[]
    MPPEM[] /* and low ppem */
    LTEQ[]
    AND[]
    IF[] /* if it's between, then */
        SPVFS[] /* Restore orig PV */
        SHPIX[] /* move the point by the amount */
    ELSE[]
       SPVFS[] /* Restore orig PV */
       POP[] /* otherwise remove the remaining arguments */
       POP[]
    EIF[]

ELSE[]
    POP[] /* remove the remaining arguments if the first test fails */
    POP[]
    POP[]
    POP[]
EIF[]
#END
#PUSHON
ENDF[]

FDEF[], 151
/* Function 151 takes 5 arguments */
/* VERSION 1.0 20120420 */

/* This function moves a point between a PPEM range */
/* for the given set of rasterizer flags (in Store 2) */
/* CALL[],&lt;point&gt;,&lt;amount&gt;,&lt;low PPEM&gt;,&lt;high PPEM&gt;, &lt;rasterizer mode&gt;, 151 */
/* &lt;low ppem&gt; Lowest PPEM range to be modified (inclusive) */
/* &lt;high ppem&gt; Highest PPEM range to be modified (inclusive) */
/* &lt;Point&gt; point to be modified */
/* &lt;amount&gt; Amount to move point, in ± 64ths */
/* &lt;rasterizer flag&gt; bit of a value in store 2 */
/* Function 151 differs from Function 150 in that instead of requiring an */
/* exact match with the value in store 2, a given set of flags (or bit values) */
/* can be referenced. For example, if the function should execute */
/* in any situation where ClearType with fractional AWs is enabled, */
/* (c.f. Function 84) irrespective of other flags (e.g. BGR as opposed */
/* to RGB Devices or non-ClearType direction anti-aliasing) then one */
/* would use a &lt;rasterizer flag&gt; value of 64. (c.f. Function 84.) */
/* The rasterizer values for &lt;rasterizer mode&gt; are defined in the function */
/* 84 header. */
/* EXAMPLE: */
/* If one wanted the move to occur if either subpixel positioned or full gray pixel */
/* then one would take the 64 (from subpixel positioned) and the 256 (from */
/* gray full-pixel) and add them to get 320. With a value of 320, the point will */
/* get moved if either subpixel positioned or full gray pixel is enabled. */
/* If one wanted to move to occur always if ClearType was on, independent of */
/* any subtype or spacing flag, one would set the rasterizer mode to 2. */

/* 151 Function number */
#BEGIN
#PUSHOFF
#PUSH, 152 /* Call function 152 with the rasterizer mode on the top of stack */
CALL[]
IF[] /* if so . . . */
    GPV[] /* Save current PV on stack to restore */
    SPVTCA[Y] /* We should only MPPEM with Y PV */
    ROLL[]
    MPPEM[] /* check cur. size against high ppem */
    GTEQ[]
    #PUSH, 4
    MINDEX[]
    MPPEM[] /* and low ppem */
    LTEQ[]
    AND[]
    IF[] /* if it's between, then */
        SPVFS[] /* Restore orig PV */
        SHPIX[] /* move the point by the amount */
    ELSE[]
        SPVFS[] /* Restore orig PV */
        POP[] /* otherwise remove the remaining arguments */
        POP[]
    EIF[]

ELSE[]
    POP[] /* remove the remaining arguments if the first test fails */
    POP[]
    POP[]
    POP[]
EIF[]
#END
#PUSHON
ENDF[]

FDEF[], 152
/* Function 152 takes 1 argument, a "bitfield" flag. */
/* VERSION 1.0 20111117 */
/*
Function 152 is intended to take a set of one or more bits as input and do an AND (e.g. mask) of those
bits with the set of flags returned by Function 84. Then determine if there is at least one
of these resultant bits that are set.

Function 152 returns TRUE if the match is successful, and FALSE if it is not successful.

If the parameter is zero, indicating no flags, then the function returns FALSE.

This function takes a maxiumum of 32 bit flags.

USES: Storage 2 (FN 84)
RETURNS: 0 or 1
*/

#BEGIN
#PUSHOFF
/* Input parameter is a set of one or more flags */

DUP[]
#PUSH, 2     /* Read FN 84 flags */
RS[]
EQ[]         /* If a simple match, return TRUE */
#PUSH, 1
SWAP[]

#PUSH, BEcln
SWAP[]
JROT[], (BEcln=#LEndClear)  /* Jump to end and clean up stack. */
POP[]
#PUSH, 0, 2
RS[]         /* Read FN 84 flags */
#PUSH, BEclr /* If no FN 84 flags, return FALSE */
SWAP[]

JROF[], (BEclr=#LEndClear)

POP[]
#PUSH, 2
RS[]
SWAP[]
#PUSH, 32   /* Maximum number of bits to loop through */
/* TopLoop: */
#LTopLoop:
   /* STACK
   Loop Iteration Count
   Updated (shifted) Input Value
   Updated (shifted) FN 84 Flag
   */
  DUP[]
  NOT[]
  IF[]    /* Exit the loop when done */
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BDEnd /* 73  End */

    JMPR[], (BDEnd=#LEndFn)

  EIF[]
  ROLL[]
  ROLL[]
  DUP[]
  ROLL[]
  DUP[]
  ROLL[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Updated (shifted) FN 84 Flag
  Updated (Shifted) Input Value
  Loop Interation Count
  */

  /* Check to see if the lower-order bit is set in the FN 84 Flag */
  #PUSH, 4096 /* Convert to 26.6 by multiply by 64 x 64 */
  MUL[]
  ODD[]
  IF[]
    /* Check to see if the lower-order bit is set in the Input Value */
    #PUSH, 4096
    MUL[]
    ODD[]
    IF[]
      /* We can early out here once we find our first match */
      POP[]
      POP[]
      POP[]
      #PUSH, 1, BTEnd  /* 1 is the TRUE return code */
      JMPR[], (BTEnd=#LEndFn)
    EIF[]
  ELSE[]
    POP[]
  EIF[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Loop Interation Count
  */
  /* Shift both the Input Value and the FN 84 Flag each one bit right */
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BPEnd /* 0 is end condition of FALSE */

    JMPR[], (BPEnd=#LEndFn)

  EIF[]
  SWAP[]
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    POP[]
    #PUSH, 0, BZEnd /* End */

    JMPR[], (BZEnd=#LEndFn) 

  EIF[]
  ROLL[]
  #PUSH, 1
  SUB[]
  #PUSH, WReLoop  /* -77 TopLoop */

JMPR[], (WReLoop=#LTopLoop)

/* EndClear: */
#LEndClear:
SWAP[]
POP[]
#LEndFn:
/* End: */
#END
#PUSHON
ENDF[]

FDEF[], 153
/* Function 153 takes 1 argument, a "bitfield" flag. */
/* VERSION 1.0 20111117 */
/*
Function 153 is intended to take a set of one or more bits as input and do an AND (e.g. mask) of those
bits with the set of flags returned by Function 84. Then determine if ALL
of these resultant bits from the mask are set.

Function 153 returns TRUE if the match is successful, and FALSE if it is not successful.

If the parameter is zero, indicating no flags, then the function returns FALSE.

This function takes a maxiumum of 32 flags.

USES: Storage 2 (FN 84)
RETURNS: 0 or 1
*/

#BEGIN
#PUSHOFF
/* Input parameter is a set of one or more flags */

DUP[]
#PUSH, 2     /* Read FN 84 flags */
RS[]
EQ[]         /* If a simple match, return TRUE */
#PUSH, 1
SWAP[]

#PUSH, BEcln
SWAP[]
JROT[], (BEcln=#LEndClear)  /* Jump to end and clean up stack. */
POP[]
#PUSH, 0, 2
RS[]         /* Read FN 84 flags */
#PUSH, BEclr /* If no FN 84 flags, return FALSE */
SWAP[]

JROF[], (BEclr=#LEndClear)

POP[]
#PUSH, 0, 2   /* 0 is the boolean tracking success, start off with FALSE */
RS[]
ROLL[]
#PUSH, 32   /* Maximum number of bits to loop through */
/* TopLoop: */
#LTopLoop:
   /* STACK
   Loop Iteration Count
   Updated (shifted) Input Value
   Updated (shifted) FN 84 Flag
   Conditional boolean tracking success
   */
  DUP[]
  NOT[]
  IF[]    /* Exit the loop when done */
    POP[]
    POP[]
    POP[]
    #PUSH, BDEnd /* 73  End */

    JMPR[], (BDEnd=#LEndFn)

  EIF[]
  ROLL[]
  ROLL[]
  DUP[]
  ROLL[]
  DUP[]
  ROLL[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Updated (shifted) Input Value
  Updated (shifted) FN 84 Flag
  Updated (Shifted) Input Value
  Loop Interation Count
  Conditional boolean tracking success
  */

  /* Check to see if the lower-order bit is set in the FN 84 Flag */
  #PUSH, 4096 /* Convert to 26.6 by multiply by 64 x 64 */
  MUL[]
  ODD[]
  IF[]
    /* Check to see if the lower-order bit is set in the Input Value */
    #PUSH, 4096
    MUL[]
    ODD[]
    IF[]
      #PUSH, 4
      MINDEX[]
      #PUSH, 1  /* Set TRUE return code */
      OR[]      /* We OR this because we will immediately exit if we fail this test */
      #PUSH, 4
      MINDEX[]
      #PUSH, 4
      MINDEX[]
      #PUSH, 4
      MINDEX[]
    ELSE[]
      POP[]
      POP[]
      POP[]
      POP[]
      #PUSH, BTEnd , 0  /* 0 is the FALSE return code */
      SWAP[]
      JMPR[], (BTEnd=#LEndFn)

    EIF[]
  ELSE[]
    POP[]
  EIF[]
  #PUSH, 4 /* Can this be cleaned up and integrated with the code below? */
  MINDEX[]
  SWAP[]
  /* STACK
  Updated (shifted) FN 84 Flag
  Conditional boolean tracking success
  Updated (shifted) Input Value
  Loop Interation Count
  */
  /* Shift both the Input Value and the FN 84 Flag each one bit right */
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    ROLL[]
    NOT[]
    ROLL[]
    AND[]
    SWAP[]
    POP[]
    SWAP[]
    POP[]
    #PUSH, BPEnd /* 29  End */

    JMPR[], (BPEnd=#LEndFn)

  EIF[]
  ROLL[]
  #PUSH, 128  /* 2 in 26.6 */
  DIV[]
  DUP[]
  NOT[]
  IF[]
    POP[]
    POP[]
    SWAP[]
    POP[]
    #PUSH, BZEnd /* End */

    JMPR[], (BZEnd=#LEndFn)

  EIF[]
  #PUSH, 4
  MINDEX[]
  #PUSH, 1
  SUB[]
  #PUSH, WReLoop  /* -77 TopLoop */

JMPR[], (WReLoop=#LTopLoop)

/* EndClear: */
#LEndClear:
SWAP[]
POP[]
#LEndFn:
/* End: */
#END
#PUSHON
ENDF[]



    </extraProgram>

    <extraProgram name="ppgm">
/* auto-generated pre-program */
/* VTT 6.33 compiler Fri May  1 10:07:53 2020 */

/* Grey scaling? */
CALL[], 84

/* InstructionsOn */
#PUSHOFF
MPPEM[]
#PUSH, 2047
GT[]
MPPEM[]
#PUSH, 8
LT[]
OR[]
#PUSH, 1
GETINFO[]
#PUSH, 37
GTEQ[]
#PUSH, 1
GETINFO[]
#PUSH, 64
LTEQ[]
AND[]
#PUSH, 6
GETINFO[]
#PUSH, 0
NEQ[]
AND[]
OR[]
IF[]
    #PUSH, 1, 1
    INSTCTRL[]
EIF[]
#PUSHON

/* DropOutCtrlOff */
SCANCTRL[], 400

SCANTYPE[], 1
SCANTYPE[], 5

/* CvtCutIn */
SVTCA[Y]
SCVTCI[], 64
WS[], 3, 64
#PUSHOFF
MPPEM[]
#PUSH, 144
GTEQ[]
IF[]
#PUSH, 3, 0, 0
SCVTCI[]
WS[]
EIF[]
#PUSHON

/* ClearTypeCtrl */
#PUSHOFF
#PUSH, 2, 2
RS[]
LTEQ[]
IF[]
    #PUSH, 4, 3
    INSTCTRL[]
EIF[]
#PUSHON

WS[], 16, 0
/* LinearAdvanceWidths */
SVTCA[Y]
CALL[], 2, 89
SVTCA[Y]
CALL[], 8, 89
CALL[], 3, 52, 2, 85
CALL[], 9, 52, 8, 85
SVTCA[Y]
CALL[], 0, 89
SVTCA[Y]
CALL[], 6, 89
SVTCA[Y]
CALL[], 10, 89
SVTCA[Y]
CALL[], 14, 89
CALL[], 1, 52, 0, 85
CALL[], 7, 52, 6, 85
CALL[], 11, 52, 10, 85
CALL[], 15, 57, 14, 85
SVTCA[Y]
CALL[], 4, 89
SVTCA[Y]
CALL[], 12, 89
CALL[], 5, 52, 4, 85
CALL[], 13, 52, 12, 85
SVTCA[Y]
CALL[], 16, 89
SVTCA[Y]
CALL[], 18, 89
CALL[], 17, 52, 16, 85
CALL[], 19, 52, 18, 85
SVTCA[X]
CALL[], 21, 25, 68, 22, 87, 90
SVTCA[X]
CALL[], 23, 60, 22, 98, 91
SVTCA[X]
CALL[], 26, 52, 25, 25, 91
SVTCA[X]
CALL[], 24, 60, 22, 98, 91
SVTCA[X]
CALL[], 27, 52, 25, 25, 91
SVTCA[X]
CALL[], 28, 22, 255, 31
CALL[], 29, 103, 28, 85
SVTCA[Y]
CALL[], 30, 23, 255, 31
CALL[], 31, 171, 30, 85
CALL[], 32, 24, 22, 31
CALL[], 33, 22, 255, 31
CALL[], 34, 33, 128, 31
SVTCA[X]
CALL[], 35, 25, 20, 31
CALL[], 36, 25, 255, 31
SVTCA[Y]
CALL[], 37, 5, 26, 25, 92
SVTCA[Y]
CALL[], 38, 205, 37, 85
SVTCA[Y]
CALL[], 39, 25, 26, 25, 92
CALL[], 40, 27, 18, 31
SVTCA[X]
CALL[], 41, 29, 27, 25, 92
CALL[], 42, 41, 128, 31
CALL[], 43, 41, 52, 31
CALL[], 49, 48, 79, 31
SVTCA[X]
CALL[], 51, 50, 69, 31
CALL[], 52, 51, 79, 31
SVTCA[Y]
CALL[], 55, 54, 52, 31
CALL[], 56, 54, 147, 31
CALL[], 59, 58, 114, 31
CALL[], 60, 58, 74, 31
CALL[], 61, 60, 103, 31
SVTCA[X]
CALL[], 63, 28, 128, 31
CALL[], 64, 28, 255, 31
CALL[], 65, 29, 255, 31
SVTCA[Y]
CALL[], 66, 31, 128, 31
CALL[], 67, 31, 255, 31
CALL[], 68, 30, 255, 31
CALL[], 69, 32, 52, 31
CALL[], 70, 32, 255, 31
CALL[], 71, 33, 30, 31
CALL[], 72, 33, 45, 31
CALL[], 73, 33, 79, 31
CALL[], 74, 33, 255, 31
CALL[], 75, 34, 255, 31
CALL[], 76, 34, 147, 31
SVTCA[X]
CALL[], 77, 35, 255, 31
CALL[], 78, 36, 32, 31
CALL[], 79, 36, 52, 31
CALL[], 80, 36, 86, 31
CALL[], 81, 36, 255, 31
CALL[], 82, 36, 128, 31
SVTCA[Y]
CALL[], 83, 37, 61, 31
CALL[], 84, 38, 255, 31
CALL[], 85, 37, 255, 31
CALL[], 86, 39, 255, 31
CALL[], 87, 39, 205, 31
CALL[], 88, 40, 255, 31
CALL[], 89, 41, 47, 31
CALL[], 90, 42, 128, 31
CALL[], 91, 42, 255, 31
CALL[], 92, 41, 255, 31
CALL[], 93, 43, 114, 31
CALL[], 94, 43, 255, 31
CALL[], 95, 43, 86, 31
SVTCA[X]
CALL[], 96, 44, 255, 31
CALL[], 97, 45, 31, 31
CALL[], 98, 45, 86, 31
CALL[], 99, 45, 128, 31
CALL[], 100, 45, 255, 31
CALL[], 101, 45, 128, 31
SVTCA[Y]
CALL[], 102, 46, 128, 31
CALL[], 103, 46, 255, 31
CALL[], 104, 46, 147, 31
CALL[], 105, 47, 205, 31
CALL[], 106, 47, 255, 31
CALL[], 107, 49, 255, 31
CALL[], 108, 48, 205, 31
CALL[], 109, 48, 255, 31
CALL[], 110, 48, 114, 31
SVTCA[X]
CALL[], 111, 52, 255, 31
CALL[], 112, 51, 255, 31
CALL[], 113, 50, 255, 31
CALL[], 114, 50, 128, 31
CALL[], 115, 50, 61, 31
CALL[], 116, 53, 255, 31
SVTCA[Y]
CALL[], 117, 55, 255, 31
CALL[], 118, 55, 171, 31
CALL[], 119, 54, 255, 31
CALL[], 120, 56, 255, 31
CALL[], 121, 56, 147, 31
CALL[], 122, 57, 255, 31
CALL[], 123, 58, 57, 31
CALL[], 124, 59, 255, 31
CALL[], 125, 58, 255, 31
CALL[], 126, 58, 147, 31
CALL[], 127, 60, 255, 31
CALL[], 128, 61, 255, 31
CALL[], 129, 61, 103, 31
CALL[], 130, 62, 255, 31
RTG[]

    </extraProgram>

  </TSI1>

  <TSI2>
    <!-- This table will be calculated by the compiler -->
  </TSI2>

  <TSI3>

    <glyphProgram name=".notdef">
/* VTTTalk glyph 0, char 0xffff */
/* GUI generated Fri Nov 15 16:29:05 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,4)
ResYAnchor(1,2)
ResYDist(1,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="A">
/* VTTTalk glyph 1, char 0x41 (A) */
/* GUI generated Fri Nov 15 16:19:22 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,4)
ResYAnchor(1,2)
YIPAnchor(1,6,0)
ResYDist(6,9)
YInterpolate(4,8,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="AE">
/* VTTTalk glyph 24, char 0xc6 */
/* GUI generated Fri Nov 15 16:33:35 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,12)
ResYDist(12,9)
ResYAnchor(1,2)
ResYDist(1,4)
YInterpolate(1,16,4)
YIPAnchor(1,5,14,0)
ResYDist(5,8)
ResYDist(14,17)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Alphatonos">
/* VTTTalk glyph 558, char 0x386 */
/* GUI generated Sat Nov 16 08:54:16 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,4)
ResYAnchor(9,2)
ResYDist(9,11)
YShift(9,2)
YInterpolate(4,12,2)
YIPAnchor(9,13,0)
ResYDist(13,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Aogonek">
/* VTTTalk glyph 20, char 0x104 */
/* GUI generated Mon Nov 18 15:15:28 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,20)
YShift(20,3)
ResYDist(20,9)
ResYDist(9,14)
ResYAnchor(1,2)
YInterpolate(1,22,0)
ResYDist(22,25)
YInterpolate(20,24,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="B">
/* VTTTalk glyph 26, char 0x42 (B) */
/* GUI generated Fri Nov 15 16:34:35 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,27)
ResYAnchor(1,2)
ResYDist(1,17)
YIPAnchor(1,18,0)
ResYDist(18,26)
YInterpolate(26,9,8,18)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="C">
/* VTTTalk glyph 27, char 0x43 (C) */
/* GUI generated Mon Nov 18 15:16:27 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,17)
ResYAnchor(5,3)
YShift(5,8)
ResYDist(5,12)
YShift(12,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="D">
/* VTTTalk Unicode 0x44 (D) */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,8) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,9) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="E">
/* VTTTalk glyph 37, char 0x45 (E) */
/* GUI generated Fri Nov 15 16:36:13 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,9)
ResYAnchor(1,2)
ResYDist(1,4)
YIPAnchor(0,5,1)
ResYDist(5,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Eng">
/* VTTTalk glyph 93, char 0x14a */
/* GUI generated Fri Nov 15 16:46:37 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,17)
ResYDist(17,12)
ResYDist(12,11)
ResYAnchor(2,2)
YShift(2,6)
YInterpolate(17,3,19,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Eogonek">
/* VTTTalk glyph 53, char 0x118 */
/* GUI generated Fri Nov 15 16:38:16 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,9)
YShift(0,11)
YShift(11,27)
ResYDist(11,16)
ResYDist(16,21)
ResYAnchor(1,2)
ResYDist(1,4)
YIPAnchor(0,5,1)
ResYDist(5,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Epsilontonos">
/* VTTTalk glyph 559, char 0x388 */
/* GUI generated Sat Nov 16 08:54:37 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,9)
ResYAnchor(13,2)
ResYDist(13,15)
YShift(13,1)
ResYDist(1,4)
YIPAnchor(13,5,0)
ResYDist(5,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Etatonos">
/* VTTTalk glyph 560, char 0x389 */
/* GUI generated Sat Nov 16 08:55:14 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,8)
ResYAnchor(13,2)
ResYDist(13,15)
YShift(13,2)
YShift(2,6)
YIPAnchor(13,3,0)
ResYDist(3,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Eth">
/* VTTTalk glyph 34, char 0xd0 */
/* GUI generated Fri Nov 15 16:35:45 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,13)
ResYAnchor(5,2)
ResYDist(5,19)
YIPAnchor(0,20,5)
YShift(20,3)
ResYDist(20,12)
YShift(12,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Euro">
/* VTTTalk glyph 777, char 0x20ac */
/* GUI generated Sun Nov 17 23:08:49 2019 */

/* Y direction */
ResYAnchor(12,3)
YShift(12,15)
ResYDist(12,19)
YShift(19,16)
ResYAnchor(39,9)
ResYDist(39,34)
YIPAnchor(39,41,9,12)
YInterpolate(41,1,7,9)
YShift(41,31)
YShift(1,30)
YShift(7,24)
YShift(9,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="F">
/* VTTTalk glyph 55, char 0x46 (F) */
/* GUI generated Fri Nov 15 16:38:36 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
ResYDist(1,4)
YIPAnchor(0,5,1)
ResYDist(5,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="G">
/* VTTTalk glyph 56, char 0x47 (G) */
/* GUI generated Mon Nov 18 15:17:28 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,17)
ResYAnchor(5,3)
YShift(5,8)
ResYDist(5,12)
YShift(12,9)
YIPAnchor(0,23,5)
ResYDist(23,22)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="H">
/* VTTTalk glyph 62, char 0x48 (H) */
/* GUI generated Fri Nov 15 16:29:24 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,8)
ResYAnchor(1,2)
YShift(1,6)
YIPAnchor(1,3,0)
ResYDist(3,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Hbar">
/* VTTTalk glyph 63, char 0x126 */
/* GUI generated Fri Nov 15 16:39:57 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,16)
ResYAnchor(5,2)
YShift(5,10)
YIPAnchor(5,20,0)
ResYDist(20,18)
ResYDist(20,23)
YShift(23,2)
YShift(23,14)
ResYDist(23,7)
YShift(7,3)
YShift(7,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="I">
/* VTTTalk Unicode 0x49 (I) */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 5 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(5,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(5,4) /*perpendicular to the stroke*/
YShift(4,8) /*along bottom edge*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,9) /*along top edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="IJ">
/* VTTTalk glyph 66, char 0x132 */
/* GUI generated Mon Nov 18 15:18:45 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,5)
ResYAnchor(11,2)
YShift(11,20)
YIPAnchor(0,2,11)
ResYDist(2,14)
ResYDist(14,15)
YShift(15,23)
ResYDist(11,8)
YShift(8,22)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Iogonek">
/* VTTTalk glyph 76, char 0x12e */
/* GUI generated Fri Nov 15 16:42:30 2019 */

/* Y direction */
ResYAnchor(5,2)
ResYDist(5,4)
YShift(4,8)
ResYAnchor(12,8)
YShift(12,0)
YShift(12,28)
ResYDist(12,9)
YShift(9,1)
ResYDist(12,17)
ResYDist(17,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Iotatonos">
/* VTTTalk glyph 561, char 0x38a */
/* GUI generated Sat Nov 16 08:55:19 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,1)
YShift(1,9)
ResYAnchor(13,2)
ResYDist(13,15)
YShift(13,5)
ResYDist(5,4)
YShift(4,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="J">
/* VTTTalk glyph 78, char 0x4a (J) */
/* GUI generated Mon Nov 18 15:19:47 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,7)
ResYAnchor(14,2)
ResYDist(14,11)
YIPAnchor(0,4,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="K">
/* VTTTalk glyph 80, char 0x4b (K) */
/* GUI generated Fri Nov 15 16:43:29 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,14)
ResYAnchor(1,2)
YShift(1,9)
YInterpolate(0,3,1)
ResYDist(3,18)
YInterpolate(18,15,12,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="L">
/* VTTTalk Unicode 0x4c (L) */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="LIG">
/* VTTTalk Unicode 0xffff */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="Lcaron">
/* VTTTalk glyph 84, char 0x13d */
/* GUI generated Fri Nov 15 16:44:06 2019 */

/* Y direction */
ResYAnchor(4,8)
ResYDist(4,7)
ResYAnchor(5,2)
YIPAnchor(4,0,5)
ResYDist(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Lslash">
/* VTTTalk glyph 87, char 0x141 */
/* GUI generated Fri Nov 15 16:45:00 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,11)
ResYAnchor(5,2)
YInterpolate(0,3,5)
ResYDist(3,2)
YShift(2,9)
YShift(3,8)
YInterpolate(2,1,10,4,7,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="M">
/* VTTTalk glyph 88, char 0x4d (M) */
/* GUI generated Fri Nov 15 16:45:29 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,8)
ResYAnchor(2,2)
YShift(2,6)
YInterpolate(0,4,2)
ResYDist(4,11)
ResYDist(4,13)
YShift(13,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="N">
/* VTTTalk glyph 89, char 0x4e (N) */
/* GUI generated Fri Nov 15 16:45:52 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,8)
ResYAnchor(2,2)
YShift(2,6)
YInterpolate(8,3,9,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="O">
/* VTTTalk Unicode 0x4f (O) */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 9 */
/* CVT 4 3 */
/* Min and Max */
ResYAnchor(0,9)	/* min, CVT */
ResYAnchor(4,3)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(4,12) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,8) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="OE">
/* VTTTalk glyph 121, char 0x152 */
/* GUI generated Mon Nov 18 15:30:40 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,23)
ResYAnchor(6,3)
ResYDist(6,28)
ResYAnchor(9,2)
ResYDist(9,12)
YShift(12,26)
ResYAnchor(20,8)
YIPAnchor(20,13,9)
ResYDist(13,16)
ResYDist(20,17)
YShift(17,25)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Omegatonos">
/* VTTTalk glyph 564, char 0x38f */
/* GUI generated Sat Nov 16 09:03:03 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,14)
ResYDist(0,1)
YShift(1,3)
YShift(3,11)
YShift(1,24)
YShift(24,16)
YShift(16,13)
ResYAnchor(7,3)
ResYDist(7,20)
ResYAnchor(27,2)
ResYDist(27,29)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Omicrontonos">
/* VTTTalk glyph 562, char 0x38c */
/* GUI generated Sat Nov 16 08:55:27 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,12)
ResYAnchor(4,3)
ResYDist(4,16)
ResYAnchor(9,2)
ResYDist(9,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Oslash">
/* VTTTalk glyph 118, char 0xd8 */
/* GUI generated Fri Nov 15 16:52:21 2019 */

/* Y direction */
ResYAnchor(6,3)
ResYDist(6,23)
YDist(6,9,&gt;=3/2)
YShift(9,10)
ResYAnchor(15,9)
ResYDist(15,25)
YDist(15,0,&gt;=3/2)
YShift(0,1)
YInterpolate(15,17,2,30,20,29,21,11,8,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="P">
/* VTTTalk glyph 122, char 0x50 (P) */
/* GUI generated Fri Nov 15 16:54:58 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
ResYDist(1,12)
YIPAnchor(0,13,1)
ResYDist(13,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Psi">
/* VTTTalk glyph 556, char 0x3a8 */
/* GUI generated Mon Nov 18 19:17:22 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(4,2)
YInterpolate(4,1,0)
YShift(1,18)
ResYDist(1,8)
YShift(8,11)
YShift(4,10)
YShift(10,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Q">
/* VTTTalk glyph 124, char 0x51 (Q) */
/* GUI generated Mon Nov 18 15:34:02 2019 */

/* Y direction */
ResYAnchor(3,9)
YShift(3,11)
ResYDist(3,17)
ResYDist(3,14)
ResYDist(14,0)
ResYAnchor(7,3)
ResYDist(7,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="R">
/* VTTTalk glyph 125, char 0x52 (R) */
/* GUI generated Fri Nov 15 21:22:13 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,10)
ResYAnchor(1,2)
ResYDist(1,17)
YIPAnchor(0,18,1)
ResYDist (18,14)
YInterpolate(14,11,8,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="S">
/* VTTTalk glyph 129, char 0x53 (S) */
/* GUI generated Mon Nov 18 15:34:46 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,6)
ResYAnchor(17,3)
YShift(17,20)
YInterpolate(0,8,34,10,11,31,30,14,27,17)
ResYDist(17,24)
YShift(24,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Sigma">
/* VTTTalk glyph 551, char 0x3a3 */
/* GUI generated Sat Nov 16 08:48:28 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,9)
YShift(9,1)
ResYAnchor(4,2)
YInterpolate(0,8,2,4)
ResYDist(4,7)
YShift(7,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="T">
/* VTTTalk Unicode 0x54 (T) */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 3 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(3,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

Smooth()

    </glyphProgram>

    <glyphProgram name="Tbar">
/* VTTTalk glyph 138, char 0x166 */
/* GUI generated Fri Nov 15 21:25:46 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(7,2)
YIPAnchor(0,3,7)
YShift(3,11)
ResYDist(3,2)
YShift(2,14)
ResYDist(7,6)
YShift(6,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Theta">
/* VTTTalk glyph 541, char 0x398 */
/* GUI generated Sat Nov 16 08:47:32 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,13)
ResYAnchor(4,3)
ResYDist(4,8)
YIPAnchor(0,10,4)
ResYDist(10,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Thorn">
/* VTTTalk glyph 123, char 0xde */
/* GUI generated Fri Nov 15 21:16:12 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
YIPAnchor(1,3,15,0)
ResYDist(3,14)
ResYDist(15,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="U">
/* VTTTalk glyph 142, char 0x55 (U) */
/* GUI generated Mon Nov 18 15:37:53 2019 */

/* Y direction */
YAnchor(0,9)
ResYDist(0,8)
YAnchor(4,2)
YShift(4,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Uhorn">
/* VTTTalk glyph 150, char 0x1af */
/* GUI generated Mon Nov 18 15:39:04 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,8)
ResYAnchor(3,2)
YShift(3,11)
ResYDist(11,14)
ResYDist(11,17)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="Uogonek">
/* VTTTalk glyph 158, char 0x172 */
/* GUI generated Mon Nov 18 15:40:03 2019 */

/* Y direction */
ResYAnchor(6,9)
ResYDist(6,14)
YShift(6,21)
ResYDist(6,28)
ResYDist(28,0)
ResYAnchor(9,2)
YShift(9,17)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="Upsilontonos">
/* VTTTalk glyph 563, char 0x38e */
/* GUI generated Sat Nov 16 09:00:13 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(11,2)
ResYDist(11,13)
YShift(11,3)
YShift(3,7)
YInterpolate(0,8,1,4,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="V">
/* VTTTalk glyph 161, char 0x56 (V) */
/* GUI generated Fri Nov 15 21:29:01 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
YShift(1,6)
YInterpolate(0,4,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="W">
/* VTTTalk glyph 162, char 0x57 (W) */
/* GUI generated Fri Nov 15 21:30:08 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,12)
ResYAnchor(1,2)
YShift(1,10)
YAnchor(5,6)
YInterpolate(12,4,7,13,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="X">
/* VTTTalk glyph 167, char 0x58 (X) */
/* GUI generated Fri Nov 15 21:32:17 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,9)
ResYAnchor(2,2)
YShift(2,6)
YInterpolate(9,10,7,1,4,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="Xi">
/* VTTTalk glyph 547, char 0x39e */
/* GUI generated Sat Nov 16 08:47:49 2019 */

/* Y direction */
ResYAnchor(1,2)
ResYDist(1,0)
ResYAnchor(8,8)
ResYDist(8,9)
YIPAnchor(8,5,1)
ResYDist(5,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="Y">
/* VTTTalk glyph 168, char 0x59 (Y) */
/* GUI generated Fri Nov 15 21:32:34 2019 */

/* Y direction */
ResYAnchor(2,2)
YShift(2,7)
ResYAnchor(9,8)
YInterpolate(9,1,8,5,2)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="Z">
/* VTTTalk glyph 177, char 0x5a (Z) */
/* GUI generated Fri Nov 15 21:33:10 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,7)
YShift(7,1)
ResYAnchor(4,2)
ResYDist(4,3)
YShift(3,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="a">
/* VTTTalk glyph 187, char 0x61 (a) */
/* GUI generated Mon Nov 18 15:44:05 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,24)
ResYDist(0,27)
ResYAnchor(14,6)
ResYDist(14,13)
YInterpolate(0,6,14)
YShift(6,8)
ResYDist(6,35)
YShift(35,32)
ResYAnchor(21,10)
YShift(21,22)
ResYDist(21,20)
YShift(20,19)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="acutecomb">
/* VTTTalk glyph 1497, char 0x301 */
/* GUI generated Mon Nov 18 13:10:25 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="acutecomb.case">
/* VTTTalk glyph 1528, char 0xffff */
/* GUI generated Mon Nov 18 13:21:19 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="acutecomb.case.loclPLK">
/* VTTTalk glyph 1540, char 0xffff */
/* GUI generated Mon Nov 18 13:25:22 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="acutecomb.loclPLK">
/* VTTTalk glyph 1539, char 0xffff */
/* GUI generated Mon Nov 18 13:25:18 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="ae">
/* VTTTalk glyph 210, char 0xe6 */
/* GUI generated Mon Nov 18 15:50:44 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,35)
ResYDist(35,29)
ResYDist(0,49)
YShift(49,52)
ResYAnchor(19,7)
ResYDist(19,42)
YShift(19,14)
ResYDist(14,13)
YIPAnchor(14,6,35)
ResYDist(6,55)
YIPAnchor(19,26,0)
YInterpolate(19,17,26)
YInterpolate(26,39,0)
ResYDist(26,45)
YShift(45,22)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="alpha">
/* VTTTalk glyph 568, char 0x3b1 */
/* GUI generated Mon Nov 18 19:18:43 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,16)
ResYDist(0,22)
ResYAnchor(6,7)
YShift(6,9)
ResYDist(6,27)
ResYAnchor(10,6)
ResYAnchor(14,10)
ResYDist(14,13)
YShift(13,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="ampersand">
/* VTTTalk glyph 1113, char 0x26 (&amp;) */
/* GUI generated Mon Nov 18 20:43:22 2019 */

/* Y direction */
ResYAnchor(0,19)
ResYDist(0,38)
ResYAnchor(11,17)
ResYDist(11,18)
YIPAnchor(0,27,15,11)
YInterpolate(0,33,40,30,25,6,27)
ResYDist(6,43)
ResYAnchor(32,18)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="ampersand_ampersand.liga">
/* VTTTalk glyph 1162, char 0xffff */
/* GUI generated Mon Nov 18 20:56:00 2019 */

/* Y direction */
ResYAnchor(0,18)
YShift(0,64)
ResYAnchor(3,19)
YShift(3,34)
ResYDist(3,69)
YShift(69,76)
ResYAnchor(13,17)
YShift(13,44)
YIPAnchor(3,29,17,13)
YInterpolate(3,1,71,32,27,7,29)
YShift(1,65)
YShift(71,78)
YShift(32,62)
YShift(27,57)
YShift(7,38)
ResYDist(7,72)
YShift(72,79)
YShift(29,59)
YShift(17,47)
ResYDist(13,20)
YShift(20,50)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="aogonek">
/* VTTTalk glyph 206, char 0x105 */
/* GUI generated Mon Nov 18 15:46:01 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,41)
YDist(0,27,&gt;=)
ResYDist(27,32)
ResYDist(0,45)
YShift(45,49)
ResYAnchor(14,6)
ResYDist(14,13)
YInterpolate(0,6,14)
YShift(6,8)
ResYDist(6,53)
YAnchor(21,10)
ResYDist(21,20)
YShift(21,40)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="arrowboth">
/* VTTTalk glyph 839, char 0x2194 */
/* GUI generated Mon Nov 18 00:35:52 2019 */

/* Y direction */
YAnchor(6)
YDist(6,4,&gt;=1.5)
YShift(4,9)
ResYDist(4,3)
YShift(3,10)
ResYDist(6,17)
YInterpolate(17,12,1,2,11,6)
YDist(17,19,&gt;=1.5)
YShift(19,14)
ResYDist(19,0)
YShift(0,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="arrowdown">
/* VTTTalk glyph 837, char 0x2193 */
/* GUI generated Mon Nov 18 20:29:55 2019 */

/* Y direction */
YAnchor(0)
ResYAnchor(5,17)
YIPAnchor(0,1,5)
YInterpolate(0,4,1)
YShift(4,7)
YShift(1,10)
ResYAnchor(11,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="arrowleft">
/* VTTTalk glyph 838, char 0x2190 */
/* GUI generated Mon Nov 18 00:34:45 2019 */

/* Y direction */
YAnchor(7)
YDist(7,4,&gt;=1.5)
ResYDist(4,3)
ResYDist(7,8)
YInterpolate(8,1,2,7)
YDist(8,11,&gt;=1.5)
ResYDist(11,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="arrowright">
/* VTTTalk glyph 836, char 0x2192 */
/* GUI generated Mon Nov 18 00:32:52 2019 */

/* Y direction */
YAnchor(5)
ResYDist(5,4)
YDist(4,1,&gt;=1.5)
ResYDist(1,0)
YInterpolate(4,11,10,5)
YDist(5,8,&gt;=1.5)
ResYDist(8,9)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="arrowup">
/* VTTTalk glyph 835, char 0x2191 */
/* GUI generated Mon Nov 18 00:34:02 2019 */

/* Y direction */
ResYAnchor(5,17)
ResYAnchor(11,18)
YIPAnchor(11,3,8,5)
YInterpolate(8,10,1,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="arrowupdn">
/* VTTTalk glyph 840, char 0x2195 */
/* GUI generated Mon Nov 18 20:30:47 2019 */

/* Y direction */
YAnchor(0,8)
YAnchor(9,2)
YIPAnchor(0,2,17,12,7,9)
YInterpolate(0,4,15,2)
YInterpolate(7,5,14,9)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="arrowupdnbse">
/* VTTTalk glyph 841, char 0x21a8 */
/* GUI generated Mon Nov 18 20:31:08 2019 */

/* Y direction */
ResYAnchor(1,8)
ResYDist(1,0)
YShift(1,21)
ResYAnchor(11,2)
YIPAnchor(1,4,19,14,9,11)
YInterpolate(1,17,6,4)
YInterpolate(9,7,16,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asciicircum">
/* VTTTalk glyph 821, char 0x5e (^) */
/* GUI generated Mon Nov 18 00:15:48 2019 */

/* Y direction */
ResYAnchor(1,2)
ResYDist(1,0)
YShift(0,4)
YInterpolate(0,6,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="asciicircum_equal.liga">
/* VTTTalk glyph 1230, char 0xffff */
/* GUI generated Mon Nov 18 10:43:34 2019 */

/* Y direction */
ResYAnchor(5,16)
ResYDist(5,3)
YInterpolate(3,2,5)
ResYAnchor(7,132)
ResYDist(7,0)
ResYDist(7,11)
ResYDist(11,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asciitilde">
/* VTTTalk glyph 819, char 0x7e (~) */
/* GUI generated Wed Apr 29 11:57:55 2020 */

/* Y direction */
YAnchor(13)
ResYDist(13,4)
ResYDist(4,24)
ResYDist(24,27)
ResYDist(13,10)
ResYDist(10,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="asciitilde_asciitilde.liga">
/* VTTTalk glyph 1229, char 0xffff */
/* GUI generated Wed Apr 29 12:29:42 2020 */

/* Y direction */
YAnchor(1)
ResYDist(1,34)
ResYDist(34,26)
ResYDist(26,29)
ResYDist(1,40)
ResYDist(40,20)
ResYDist(1,46)
ResYDist(46,12)
ResYDist(1,52)
ResYDist(52,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asciitilde_asciitilde_greater.liga">
/* VTTTalk glyph 1538, char 0xffff */
/* GUI generated Wed Apr 29 12:32:33 2020 */

/* Y direction */
ResYAnchor(68,131)
ResYDist(68,47)
ResYDist(68,53)
ResYDist(68,59)
ResYDist(68,64)
ResYDist(68,7)
ResYDist(7,1)
ResYDist(68,41)
ResYDist(41,34)
ResYDist(34,37)
ResYDist(68,74)
ResYDist(74,75)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asciitilde_at.liga">
/* VTTTalk glyph 1226, char 0xffff */
/* GUI generated Wed Apr 29 12:25:36 2020 */

/* Y direction */
ResYAnchor(46,17)
ResYDist(46,13)
ResYDist(13,6)
YShift(6,9)
ResYDist(6,62)
ResYDist(6,0)
YShift(0,51)
YShift(0,52)
ResYDist(0,56)
ResYDist(0,73)
ResYDist(73,78)
YIPAnchor(78,39,46)
YInterpolate(78,68,70,39)
YInterpolate(39,24,46)
ResYDist(39,18)
ResYDist(24,28)
ResYDist(24,33)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="asciitilde_equal.liga">
/* VTTTalk glyph 1227, char 0xffff */
/* GUI generated Wed Apr 29 12:26:59 2020 */

/* Y direction */
YAnchor(12,16)
ResYDist(12,3)
ResYDist(3,20)
ResYDist(20,23)
YDist(23,25)
ResYDist(25,24)
ResYDist(12,8)
ResYDist(8,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asciitilde_greater.liga">
/* VTTTalk glyph 1228, char 0xffff */
/* GUI generated Wed Apr 29 12:32:56 2020 */

/* Y direction */
ResYAnchor(42,131)
ResYDist(42,7)
ResYDist(7,1)
ResYDist(1,0)
YInterpolate(7,51,50,42)
ResYDist(42,28)
ResYDist(28,21)
ResYDist(21,24)
ResYDist(42,34)
ResYDist(34,15)
ResYDist(42,39)
ResYDist(39,10)
ResYDist(42,48)
ResYDist(48,49)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="asciitilde_hyphen.liga">
/* VTTTalk glyph 1225, char 0xffff */
/* GUI generated Wed Apr 29 12:09:23 2020 */

/* Y direction */
ResYAnchor(13,131)
ResYDist(13,16)
ResYDist(13,28)
ResYDist(13,4)
ResYDist(4,24)
ResYDist(13,10)
ResYDist(10,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="asterisk">
/* VTTTalk glyph 675, char 0x2a (*) */
/* GUI generated Sun Nov 17 09:26:50 2019 */

/* Y direction */
ResYAnchor(6,134)
ResYDist(6,0)
YShift(0,13)
YInterpolate(0,1,12,14,2,11,10,3,8,5,4,9,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="asterisk_parenright.liga">
/* VTTTalk glyph 1579, char 0xffff */
/* GUI generated Wed Apr 29 12:50:57 2020 */

/* Y direction */
ResYAnchor(17,138)
ResYDist(17,10)
ResYDist(17,23)
ResYDist(23,4)
YIPAnchor(23,34,17)
ResYDist(34,28)
YInterpolate(28,26,40,29,27,39,30,38,31,33,36,32,37,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="at">
/* VTTTalk glyph 1112, char 0x40 (@) */
/* GUI generated Wed Apr 29 15:12:34 2020 */

/* Y direction */
ResYAnchor(28,17)
ResYDist(28,13)
ResYDist(13,6)
YShift(6,9)
ResYDist(6,43)
ResYDist(28,23)
ResYDist(23,18)
ResYDist(18,0)
YShift(0,32)
YShift(0,33)
ResYDist(0,37)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="b">
/* VTTTalk glyph 212, char 0x62 (b) */
/* GUI generated Fri Nov 15 21:43:53 2019 */

/* Y direction */
ResYAnchor(1,0)
ResYAnchor(6,7)
YShift(6,4)
ResYDist(6,25)
YShift(25,15)
ResYAnchor(12,11)
YShift(12,0)
ResYDist(12,19)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="backslash">
/* VTTTalk glyph 680, char 0x5c (\) */
/* GUI generated Sun Nov 17 09:31:04 2019 */

/* Y direction */
ResYAnchor(1,136)
ResYDist(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="bar">
/* VTTTalk glyph 1124, char 0x7c (|) */
/* GUI generated Mon Nov 18 01:12:41 2019 */

/* Y direction */
ResYAnchor(1,133)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bar_bar_bar_greater.liga">
/* VTTTalk glyph 1167, char 0xffff */
/* GUI generated Mon Nov 18 08:19:28 2019 */

/* Y direction */
ResYAnchor(1,133)
YShift(1,5)
ResYDist(1,3)
YShift(3,7)
ResYAnchor(10,135)
ResYDist(10,9)
ResYDist(10,11)
ResYDist(11,8)
YInterpolate(8,14,15,12,13,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="bar_bar_equal.liga">
/* VTTTalk glyph 1168, char 0xffff */
/* GUI generated Mon Nov 18 08:23:01 2019 */

/* Y direction */
ResYAnchor(4,132)
ResYDist(4,7)
YDist(4,8,&gt;=)
ResYDist(8,11)
ResYAnchor(13,133)
YShift(13,2)
ResYDist(13,15)
YShift(15,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bar_bar_greater.liga">
/* VTTTalk glyph 1169, char 0xffff */
/* GUI generated Mon Nov 18 08:37:04 2019 */

/* Y direction */
ResYAnchor(2,133)
ResYDist(2,0)
ResYAnchor(6,135)
ResYDist(6,5)
ResYDist(6,7)
ResYDist(7,4)
YInterpolate(4,10,11,8,9,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bar_braceright.liga">
/* VTTTalk glyph 1164, char 0xffff */
/* GUI generated Mon Nov 18 20:57:25 2019 */

/* Y direction */
ResYAnchor(2,133)
ResYDist(2,0)
ResYAnchor(37,138)
ResYDist(37,30)
ResYDist(37,4)
ResYDist(4,11)
YIPAnchor(4,47,37)
ResYDist(47,48)
YInterpolate(48,20,21,47)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bar_bracketright.liga">
/* VTTTalk glyph 1165, char 0xffff */
/* GUI generated Mon Nov 18 08:16:34 2019 */

/* Y direction */
ResYAnchor(1,133)
ResYDist(1,3)
ResYAnchor(10,137)
ResYDist(10,7)
ResYDist(10,11)
ResYDist(11,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="bar_equal.liga">
/* VTTTalk glyph 1170, char 0xffff */
/* GUI generated Mon Nov 18 08:37:57 2019 */

/* Y direction */
ResYAnchor(2,133)
ResYDist(2,0)
ResYAnchor(4,132)
ResYDist(4,7)
YDist(4,8,&gt;=)
ResYDist(8,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="bar_greater.liga">
/* VTTTalk glyph 1171, char 0xffff */
/* GUI generated Mon Nov 18 08:38:50 2019 */

/* Y direction */
ResYAnchor(2,135)
ResYDist(2,1)
ResYDist(2,3)
ResYDist(3,0)
YInterpolate(0,6,7,4,5,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bar_hyphen.liga">
/* VTTTalk glyph 1163, char 0xffff */
/* GUI generated Mon Nov 18 08:12:53 2019 */

/* Y direction */
ResYAnchor(2,133)
ResYDist(2,0)
ResYAnchor(4,131)
ResYDist(4,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="beta">
/* VTTTalk glyph 569, char 0x3b2 */
/* GUI generated Sat Nov 16 09:10:01 2019 */

/* Y direction */
ResYAnchor(0,14)
YAnchor(3,2)
ResYDist(3,22)
YIPAnchor(3,35,16 )
ResYDist(35,34)
YInterpolate(34,10,9,35)
ResYAnchor(16,11)
ResYDist(16,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="braceleft">
/* VTTTalk glyph 683, char 0x7b ({) */
/* GUI generated Mon Nov 18 19:56:27 2019 */

/* Y direction */
ResYAnchor(21,138)
ResYDist(21,28)
ResYDist(21,0)
ResYDist(0,47)
YIPAnchor(0,11,21)
ResYDist(11,10)
YInterpolate(10,38,37,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="braceleft_bar.liga">
/* VTTTalk glyph 718, char 0xffff */
/* GUI generated Mon Nov 18 20:05:22 2019 */

/* Y direction */
ResYAnchor(1,133)
ResYDist(1,3)
ResYAnchor(25,138)
ResYDist(25,32)
ResYDist(25,4)
ResYDist(4,51)
YIPAnchor(4,15,25)
ResYDist(15,14)
YInterpolate(14,42,41,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="braceright">
/* VTTTalk glyph 684, char 0x7d (}) */
/* GUI generated Mon Nov 18 19:57:59 2019 */

/* Y direction */
ResYAnchor(33,138)
ResYDist(33,26)
ResYDist(33,0)
ResYDist(0,7)
YIPAnchor(0,43,33)
ResYDist(43,44)
YInterpolate(44,16,17,43)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="braceright_numbersign.liga">
/* VTTTalk glyph 719, char 0xffff */
/* GUI generated Mon Nov 18 20:09:45 2019 */

/* Y direction */
ResYAnchor(41,138)
ResYDist(41,34)
ResYDist(41,8)
ResYDist(8,15)
ResYAnchor(54,16)
YShift(54,50)
ResYAnchor(63,18)
YShift(63,67)
YIPAnchor(63,59,58,54)
YInterpolate(59,80,24,25,79,58)
ResYDist(59,62)
YShift(62,66)
YShift(66,1)
YShift(59,71)
YShift(71,73)
ResYDist(58,55)
YShift(55,51)
YShift(51,48)
YShift(58,70)
YShift(70,74)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bracketleft">
/* VTTTalk glyph 685, char 0x5b ([) */
/* GUI generated Sun Nov 17 09:33:43 2019 */

/* Y direction */
ResYAnchor(1,137)
ResYDist(1,4)
ResYDist(1,0)
ResYDist(0,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="bracketleft_bar.liga">
/* VTTTalk glyph 720, char 0xffff */
/* GUI generated Sun Nov 17 21:48:47 2019 */

/* Y direction */
ResYAnchor(1,133)
ResYDist(1,3)
ResYAnchor(5,137)
ResYDist(5,8)
ResYDist(5,4)
ResYDist(4,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="bracketright">
/* VTTTalk glyph 686, char 0x5d (]) */
/* GUI generated Sun Nov 17 09:34:08 2019 */

/* Y direction */
ResYAnchor(5,137)
ResYDist(5,4)
ResYDist(5,0)
ResYDist(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="bracketright_numbersign.liga">
/* VTTTalk glyph 721, char 0xffff */
/* GUI generated Sun Nov 17 21:50:34 2019 */

/* Y direction */
ResYAnchor(10,138)
ResYDist(10,7)
ResYDist(10,3)
ResYDist(3,6)
ResYAnchor(13,16)
YShift(13,17)
ResYAnchor(27,18)
YShift(27,31)
YIPAnchor(27,37,39,13)
YShift(37,23)
YShift(37,33)
ResYDist(37,26)
YShift(26,30)
YShift(30,1)
YShift(39,22)
YShift(39,34)
ResYDist(39,12)
YShift(12,15)
YShift(15,19)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="brevecombcy">
/* VTTTalk glyph 1544, char 0xffff */
/* GUI generated Mon Nov 18 21:45:04 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,7)
ResYDist(0,10)
YShift(10,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="brevecombcy.case">
/* VTTTalk glyph 1545, char 0xffff */
/* GUI generated Mon Nov 18 21:45:56 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,7)
ResYDist(0,10)
YShift(10,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="brokenbar">
/* VTTTalk glyph 1125, char 0xa6 */
/* GUI generated Mon Nov 18 01:13:01 2019 */

/* Y direction */
ResYAnchor(1,133)
ResYDist(1,3)
ResYDist(3,5)
ResYDist(5,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="bullet">
/* VTTTalk glyph 674, char 0x2022 */
/* GUI generated Sun Nov 17 09:25:15 2019 */

/* Y direction */
YAnchor(8)
ResYDist(8,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="c">
/* VTTTalk glyph 213, char 0x63 (c) */
/* GUI generated Mon Nov 18 15:51:11 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,19)
ResYAnchor(6,7)
YShift(6,9)
ResYDist(6,13)
YShift(13,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="cent">
/* VTTTalk glyph 772, char 0xa2 */
/* GUI generated Sun Nov 17 22:40:19 2019 */

/* Y direction */
ResYAnchor(1,11)
YDist(1,0,&gt;=1.5)
YShift(1,24)
ResYDist(1,29)
YShift(29,17)
ResYAnchor(7,7)
YDist(7,8,&gt;=1.5)
YShift(7,10)
YShift(10,13)
ResYDist(7,30)
YShift(30,16)
YShift(16,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="chi">
/* VTTTalk glyph 590, char 0x3c7 */
/* GUI generated Sat Nov 16 09:40:17 2019 */

/* Y direction */
ResYAnchor(10,7)
ResYDist(10,5)
ResYAnchor(16,6)
ResYAnchor(26,15)
ResYDist(26,21)
YInterpolate(26,30,1,17,14,10)
YAnchor(31,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="club">
/* VTTTalk glyph 1107, char 0x2663 */
/* GUI generated Mon Nov 18 20:36:53 2019 */

/* Y direction */
YAnchor(0)
YShift(0,30)
YDist(0,36,&gt;=3/2)
ResYDist(0,15)
YInterpolate(15,21,9,24,6,22,8,0)
ResYDist(0,38)
YShift(38,33)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="colon">
/* VTTTalk glyph 666, char 0x3a (:) */
/* GUI generated Sun Nov 17 09:19:25 2019 */

/* Y direction */
ResYAnchor(6,7)
ResYDist(6,0)
ResYAnchor(12,19)
ResYDist(12,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="colon_colon_equal.liga">
/* VTTTalk glyph 731, char 0xffff */
/* GUI generated Sun Nov 17 22:09:45 2019 */

/* Y direction */
ResYAnchor(25,132)
ResYDist(25,24)
ResYDist(25,18)
YShift(18,6)
ResYDist(18,12)
YShift(12,0)
YDist(25,29,&gt;=)
ResYDist(29,28)
ResYDist(28,44)
YShift(44,32)
ResYDist(44,50)
YShift(50,38)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="colon_equal.liga">
/* VTTTalk glyph 732, char 0xffff */
/* GUI generated Sun Nov 17 22:04:31 2019 */

/* Y direction */
ResYAnchor(13,132)
ResYDist(13,12)
ResYDist(13,6)
ResYDist(6,0)
YDist(13,17,&gt;=)
ResYDist(17,16)
ResYDist(16,20)
ResYDist(20,26)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="colon_greater.liga">
/* VTTTalk glyph 733, char 0xffff */
/* GUI generated Sun Nov 17 22:05:47 2019 */

/* Y direction */
ResYAnchor(18,135)
ResYDist(18,16)
ResYDist(16,17)
ResYDist(17,6)
ResYDist(6,0)
ResYDist(18,19)
ResYDist(19,13)
ResYDist(13,12)
ResYDist(12,20)
ResYDist(20,26)
YInterpolate(19,14,15,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="colon_less.liga">
/* VTTTalk glyph 734, char 0xffff */
/* GUI generated Sun Nov 17 22:06:21 2019 */

/* Y direction */
ResYAnchor(14,135)
ResYDist(14,13)
YInterpolate(13,18,17,14)
ResYDist(13,19)
ResYDist(19,12)
ResYDist(12,20)
ResYDist(20,26)
ResYDist(14,16)
ResYDist(16,15)
ResYDist(15,6)
ResYDist(6,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="colonmonetary">
/* VTTTalk glyph 773, char 0x20a1 */
/* GUI generated Sun Nov 17 22:42:41 2019 */

/* Y direction */
ResYAnchor(12,3)
YShift(12,7)
YDist(12,8,&gt;=3/2)
YShift(8,15)
YShift(8,9)
YShift(9,16)
YShift(12,17)
YShift(17,19)
ResYDist(12,38)
YShift(38,49)
YShift(38,22)
YShift(22,20)
ResYAnchor(32,9)
ResYDist(32,23)
YShift(23,43)
YShift(43,48)
YDist(32,33,&gt;=3/2)
YShift(33,0)
YShift(33,34)
YShift(34,1)
YShift(32,35)
YShift(35,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="comma">
/* VTTTalk glyph 665, char 0x2c (,) */
/* GUI generated Sun Nov 17 09:19:05 2019 */

/* Y direction */
YAnchor(1)
ResYDist(1,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="copyright">
/* VTTTalk glyph 1116, char 0xa9 */
/* GUI generated Mon Nov 18 20:47:49 2019 */

/* Y direction */
ResYAnchor(0,18)
ResYDist(0,12)
ResYAnchor(6,16)
ResYDist(6,18)
YInterpolate(6,30,36,42,24,0)
YShift(30,33)
YShift(36,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="currency">
/* VTTTalk glyph 774, char 0xa4 */
/* GUI generated Sun Nov 17 22:44:26 2019 */

/* Y direction */
YAnchor(11)
ResYDist(11,14)
YShift(14,8)
YShift(14,15)
YShift(15,7)
ResYDist(11,34)
ResYDist(34,28)
ResYDist(28,25)
ResYDist(25,0)
YShift(0,22)
YShift(0,1)
YShift(1,21)
YInterpolate(25,23,27,20,2,6,16,9,13,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="d">
/* VTTTalk glyph 219, char 0x64 (d) */
/* GUI generated Mon Nov 18 15:51:57 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,15)
ResYDist(0,20)
YShift(20,22)
ResYAnchor(6,7)
YShift(6,8)
ResYDist(6,25)
YShift(25,23)
YAnchor(10,0)
YAnchor(12,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="dagger">
/* VTTTalk glyph 1126, char 0x2020 */
/* GUI generated Mon Nov 18 01:13:16 2019 */

/* Y direction */
ResYAnchor(5,17)
ResYDist(5,0)
YIPAnchor(5,3,0)
YShift(3,7)
ResYDist(3,2)
YShift(2,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="daggerdbl">
/* VTTTalk glyph 1128, char 0x2021 */
/* GUI generated Mon Nov 18 01:13:30 2019 */

/* Y direction */
ResYAnchor(9,17)
ResYDist(9,0)
YIPAnchor(9,7,2,0)
YShift(7,11)
ResYDist(7,6)
YShift(6,14)
YShift(2,18)
ResYDist(2,3)
YShift(3,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="dcaron">
/* VTTTalk glyph 221, char 0x10f */
/* GUI generated Mon Nov 18 15:54:49 2019 */

/* Y direction */
ResYAnchor(4,11)
YShift(4,16)
ResYDist(4,22)
ResYAnchor(8,7)
YShift(8,11)
ResYDist(8,27)
ResYAnchor(12,0)
ResYAnchor(14,10)
YIPAnchor(8,0,12)
ResYDist(0,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="dcaron.alt">
/* VTTTalk glyph 371, char 0xffff */
/* GUI generated Mon Nov 18 16:25:10 2019 */

/* Y direction */
ResYAnchor(4,19)
YShift(4,16)
ResYDist(4,22)
ResYAnchor(8,7)
YShift(8,11)
ResYDist(8,27)
ResYAnchor(12,0)
YIPAnchor(12,0,8)
ResYDist(0,1)
ResYAnchor(14,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="dcroat">
/* VTTTalk glyph 222, char 0x111 */
/* GUI generated Mon Nov 18 15:56:40 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,22)
ResYDist(0,28)
ResYAnchor(6,7)
YShift(6,9)
ResYDist(6,33)
ResYAnchor(14,0)
YInterpolate(6,11,12,14)
YShift(11,18)
YShift(12,17)
YAnchor(20,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="degree">
/* VTTTalk glyph 1121, char 0xb0 */
/* GUI generated Mon Nov 18 01:12:17 2019 */

/* Y direction */
ResYAnchor(6,17)
ResYDist(6,18)
ResYDist(6,0)
ResYDist(0,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="delta">
/* VTTTalk glyph 571, char 0x3b4 */
/* GUI generated Mon Nov 18 19:21:00 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,33)
ResYAnchor(14,1)
YShift(14,16)
ResYDist(14,19)
YShift(19,17)
YInterpolate(0,25,14)
ResYDist(25,39)
YInterpolate(39,7,8,25)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="diamond">
/* VTTTalk glyph 1109, char 0x2666 */
/* GUI generated Mon Nov 18 00:59:45 2019 */

/* Y direction */
YAnchor(2)
ResYDist(2,0)
YInterpolate(0,3,1,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="dieresistonos">
/* VTTTalk glyph 1543, char 0x385 */
/* GUI generated Mon Nov 18 13:25:50 2019 */

/* Y direction */
YAnchor(4)
YShift(4,16)
YAnchor(3)
ResYDist(3,1)
ResYDist(4,10)
YShift(10,22)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="divide">
/* VTTTalk glyph 810, char 0xf7 */
/* GUI generated Sun Nov 17 23:59:27 2019 */

/* Y direction */
ResYAnchor(13,131)
YDist(13,0,&gt;=)
ResYDist(0,6)
ResYDist(13,12)
YDist(12,22,&gt;=)
ResYDist(22,16)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="dollar">
/* VTTTalk glyph 775, char 0x24 ($) */
/* GUI generated Sun Nov 17 22:46:26 2019 */

/* Y direction */
ResYAnchor(1,9)
ResYDist(1,0)
YShift(1,31)
ResYDist(1,7)
YShift(7,42)
ResYAnchor(18,3)
YShift(18,15)
ResYDist(18,17)
YShift(18,21)
YInterpolate(1,44,29,40,41,8,9,26,25,34,33,12,37,18)
ResYDist(18,24)
YShift(24,22)
YShift(24,35)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="dollar_greater.liga">
/* VTTTalk glyph 1172, char 0xffff */
/* GUI generated Mon Nov 18 08:43:41 2019 */

/* Y direction */
ResYAnchor(14,9)
YShift(14,11)
YDist(14,13,&gt;=3/2)
ResYDist(14,19)
YShift(19,42)
ResYAnchor(27,3)
YDist(27,28,&gt;=3/2)
YShift(27,30)
YInterpolate(14,44,9,40,41,20,21,6,5,34,33,24,37,27)
ResYDist(27,35)
YShift(35,4)
ResYAnchor(31,135)
ResYDist(31,32)
YDist(32,1)
ResYDist(1,0)
YInterpolate(32,2,3,31)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="dong">
/* VTTTalk glyph 776, char 0x20ab */
/* GUI generated Mon Nov 18 20:21:01 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,22)
ResYDist(0,28)
ResYAnchor(6,7)
YShift(6,9)
ResYDist(6,33)
ResYAnchor(15,0)
YInterpolate(15,11,6)
YShift(11,18)
ResYDist(11,12)
YShift(12,17)
ResYAnchor(20,10)
ResYDist(20,38)
ResYDist(38,39)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="dotbelowcomb">
/* VTTTalk glyph 1508, char 0x323 */
/* GUI generated Mon Nov 18 13:19:01 2019 */

/* Y direction */
YAnchor(6)
ResYDist(6,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="dotlessi">
/* VTTTalk Unicode 0x131 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 5 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(5,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(5,4) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,1) /*perpendicular to the stroke*/
YShift(1,7) /*along top edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="e">
/* VTTTalk glyph 223, char 0x65 (e) */
/* GUI generated Mon Nov 18 15:59:00 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,15)
ResYAnchor(6,7)
ResYDist(6,22)
YIPAnchor(0,12,6)
ResYDist(12,25)
YShift(25,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="eight">
/* VTTTalk glyph 613, char 0x38 (8) */
/* GUI generated Sat Nov 16 09:50:11 2019 */

/* Y direction */
ResYAnchor(0,13)
ResYDist(0,38)
ResYAnchor(13,5)
ResYDist(13,32)
YInterpolate(0,26,13)
ResYDist(26,44)
YInterpolate(44,6,20,19,7,26)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="emdash">
/* VTTTalk glyph 692, char 0x2014 */
/* GUI generated Sun Nov 17 09:36:12 2019 */

/* Y direction */
ResYAnchor(1,131)
ResYDist(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="endash">
/* VTTTalk glyph 691, char 0x2013 */
/* GUI generated Sun Nov 17 09:35:40 2019 */

/* Y direction */
ResYAnchor(1,131)
ResYDist(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="eng">
/* VTTTalk glyph 283, char 0x14b */
/* GUI generated Fri Nov 15 22:10:53 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
ResYAnchor(6,7)
YShift(6,4)
ResYDist(6,23)
YShift(23,25)
ResYAnchor(14,15)
ResYDist(14,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="eogonek">
/* VTTTalk glyph 239, char 0x119 */
/* GUI generated Mon Nov 18 16:00:25 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,15)
YDist(0,26,&gt;=)
ResYDist(26,31)
ResYAnchor(6,7)
ResYDist(6,39)
YIPAnchor(0,12,6)
ResYDist(12,42)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="epsilon">
/* VTTTalk glyph 572, char 0x3b5 */
/* GUI generated Mon Nov 18 19:22:07 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,24)
ResYAnchor(9,7)
ResYDist(9,14)
YIPAnchor(0,18,9)
ResYDist(18,19)
YInterpolate(19,4,5,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="equal">
/* VTTTalk glyph 811, char 0x3d (=) */
/* GUI generated Mon Nov 18 00:04:47 2019 */

/* Y direction */
ResYAnchor(1,132)
ResYDist(1,0)
YDist(1,5,&gt;=)
ResYDist(5,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="equal_equal.liga">
/* VTTTalk glyph 1178, char 0xffff */
/* GUI generated Mon Nov 18 08:45:07 2019 */

/* Y direction */
ResYAnchor(1,132)
ResYDist(1,0)
YDist(1,5,&gt;=)
ResYDist(5,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="equal_equal_equal.liga">
/* VTTTalk glyph 1179, char 0xffff */
/* GUI generated Mon Nov 18 08:45:52 2019 */

/* Y direction */
ResYAnchor(5,131)
ResYDist(5,4)
YDist(5,0,&gt;=)
ResYDist(0,1)
YDist(5,9,&gt;=)
ResYDist(9,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="equal_equal_greater.liga">
/* VTTTalk glyph 1180, char 0xffff */
/* GUI generated Mon Nov 18 08:47:56 2019 */

/* Y direction */
ResYAnchor(11,132)
ResYDist(11,10)
ResYDist(11,5)
ResYDist(5,4)
YDist(4,1,&gt;=3/2)
ResYDist(1,0)
YInterpolate(4,17,7,8,16,11)
YDist(11,14,&gt;=3/2)
ResYDist(14,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="equal_greater.liga">
/* VTTTalk glyph 1181, char 0xffff */
/* GUI generated Mon Nov 18 08:53:53 2019 */

/* Y direction */
ResYAnchor(11,132)
ResYDist(11,10)
YDist(11,5,&gt;=)
ResYDist(5,4)
YDist(4,1,&gt;=3/2)
ResYDist(1,0)
YInterpolate(4,17,7,8,16,11)
YDist(11,14,&gt;=3/2)
ResYDist(14,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="equal_greater_greater.liga">
/* VTTTalk glyph 1182, char 0xffff */
/* GUI generated Mon Nov 18 08:56:02 2019 */

/* Y direction */
ResYAnchor(19,132)
ResYDist(19,18)
YDist(19,13,&gt;=)
ResYDist(13,12)
YInterpolate(12,7,25,2,15,16,3,24,6,19)
YDist(12,9,&gt;=3/2)
YShift(9,1)
ResYDist(9,8)
YShift(8,0)
YDist(19,22,&gt;=3/2)
YShift(22,4)
ResYDist(22,23)
YShift(23,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="equal_less_less.liga">
/* VTTTalk glyph 1183, char 0xffff */
/* GUI generated Mon Nov 18 08:59:45 2019 */

/* Y direction */
ResYAnchor(10,132)
ResYDist(10,9)
ResYDist(10,12)
YShift(12,3)
ResYDist(12,13)
YShift(13,4)
YDist(10,17,&gt;=)
ResYDist(17,16)
YInterpolate(16,1,6,5,2,10)
ResYDist(16,14)
YShift(14,0)
ResYDist(14,19)
YShift(19,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="equal_slash_equal.liga">
/* VTTTalk glyph 1184, char 0xffff */
/* GUI generated Mon Nov 18 09:00:58 2019 */

/* Y direction */
ResYAnchor(7,132)
ResYDist(7,9)
YShift(7,11)
YDist(7,3,&gt;=)
YShift(3,15)
ResYDist(3,2)
ResYDist(2,0)
YShift(2,18)
ResYDist(7,6)
YShift(6,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="equivalence">
/* VTTTalk glyph 802, char 0x2261 */
/* GUI generated Mon Nov 18 00:01:48 2019 */

/* Y direction */
ResYAnchor(5,131)
YDist(5,0)
ResYDist(0,1)
ResYDist(5,4)
YDist(4,9)
ResYDist(9,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="estimated">
/* VTTTalk glyph 1130, char 0x212e */
/* GUI generated Mon Nov 18 20:52:32 2019 */

/* Y direction */
ResYAnchor(0,19)
ResYDist(0,16)
ResYDist(0,6)
ResYDist(6,23)
YIPAnchor(6,13,0)
ResYDist(13,19)
ResYDist(13,26)
YShift(26,9)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="eta">
/* VTTTalk glyph 574, char 0x3b7 */
/* GUI generated Sat Nov 16 09:32:59 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
ResYAnchor(6,7)
YShift(6,4)
ResYDist(6,15)
YShift(15,17)
ResYAnchor(10,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="eth">
/* VTTTalk glyph 220, char 0xf0 */
/* GUI generated Mon Nov 18 15:54:03 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,30)
ResYDist(0,6)
ResYDist(6,35)
YDist(6,13,&gt;=)
YShift(13,22)
ResYDist(13,14)
ResYDist(14,18)
ResYDist(18,17)
YShift(14,21)
YInterpolate(13,12,23,15,20,21)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="exclam">
/* VTTTalk glyph 669, char 0x21 (!) */
/* GUI generated Sun Nov 17 09:20:43 2019 */

/* Y direction */
ResYAnchor(1,16)
ResYAnchor(4,19)
ResYDist(4,10)
ResYDist(10,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="exclam_equal.liga">
/* VTTTalk glyph 738, char 0xffff */
/* GUI generated Sun Nov 17 22:10:58 2019 */

/* Y direction */
ResYAnchor(7,132)
ResYDist(7,9)
YShift(7,12)
YDist(7,3,&gt;=)
YShift(3,16)
ResYDist(3,2)
ResYDist(2,0)
YShift(2,17)
ResYDist(7,6)
YShift(6,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="exclam_equal_equal.liga">
/* VTTTalk glyph 739, char 0xffff */
/* GUI generated Wed Apr 29 15:05:54 2020 */

/* Y direction */
ResYAnchor(7,131)
YShift(7,19)
ResYDist(7,6)
YShift(6,22)
YDist(6,3)
YShift(3,23)
ResYDist(3,2)
ResYDist(2,0)
YShift(2,26)
YDist(7,10)
YShift(10,18)
ResYDist(10,11)
ResYDist(11,13)
YShift(11,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="exclamdown">
/* VTTTalk glyph 670, char 0xa1 */
/* GUI generated Sun Nov 17 09:22:49 2019 */

/* Y direction */
ResYAnchor(0,7)
ResYDist(0,14)
ResYDist(0,6)
ResYDist(6,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="f">
/* VTTTalk glyph 242, char 0x66 (f) */
/* GUI generated Mon Nov 18 16:01:44 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(7,1)
ResYDist(7,13)
YIPAnchor(0,16,7)
YShift(16,3)
ResYDist(16,19)
YShift(19,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="female">
/* VTTTalk glyph 1104, char 0x2640 */
/* GUI generated Mon Nov 18 07:55:46 2019 */

/* Y direction */
ResYAnchor(9,3)
ResYDist(9,29)
ResYAnchor(20,8)
ResYDist(20,19)
YShift(19,0)
ResYDist(19,16)
YShift(16,1)
ResYDist(16,15)
YShift(15,3)
ResYDist(15,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="five">
/* VTTTalk glyph 610, char 0x35 (5) */
/* GUI generated Mon Nov 18 19:33:17 2019 */

/* Y direction */
ResYAnchor(0,13)
ResYDist(0,7)
ResYAnchor(16,4)
ResYDist(16,19)
YIPAnchor(0,4,23,16)
YShift(23,20)
ResYDist(23,12)
YShift(12,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="fiveeighths">
/* VTTTalk glyph 662, char 0x215d */
/* GUI generated Mon Nov 18 19:50:04 2019 */

/* Y direction */
ResYAnchor(14,16)
ResYDist(14,17)
ResYDist(17,20)
ResYDist(20,10)
ResYDist(10,6)
ResYDist(6,0)
YInterpolate(6,4,13,10)
ResYAnchor(30,19)
YInterpolate(30,26,28,14)
YShift(26,27)
YShift(28,29)
ResYDist(30,62)
ResYDist(62,66)
ResYDist(66,54)
YInterpolate(66,48,36,54)
ResYDist(54,58)
ResYDist(58,42)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="florin">
/* VTTTalk glyph 779, char 0x192 */
/* GUI generated Sun Nov 17 23:00:48 2019 */

/* Y direction */
ResYAnchor(0,15)
ResYDist(0,1)
ResYAnchor(12,3)
YShift(12,14)
YIPAnchor(12,9,0)
YShift(9,21)
ResYDist(9,6)
YShift(6,24)
ResYDist(12,18)
YShift(18,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="four">
/* VTTTalk glyph 609, char 0x34 (4) */
/* GUI generated Sat Nov 16 09:47:35 2019 */

/* Y direction */
ResYAnchor(7,4)
ResYAnchor(12,12)
YIPAnchor(7,11,12)
YInterpolate(7,3,11)
YShift(11,0)
ResYDist(11,8)
YShift(8,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="fraction">
/* VTTTalk glyph 656, char 0x2044 */
/* GUI generated Sun Nov 17 09:06:23 2019 */

/* Y direction */
YAnchor(2)
YShift(2,3)
ResYDist(2,0)
YShift(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="franc">
/* VTTTalk glyph 780, char 0x20a3 */
/* GUI generated Mon Nov 18 07:28:53 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,1)
YShift(1,16)
ResYDist(1,4)
YShift(4,13)
ResYDist(4,12)
ResYDist(12,9)
ResYAnchor(5,2)
ResYDist(5,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="g">
/* VTTTalk glyph 243, char 0x67 (g) */
/* GUI generated Fri Nov 15 21:53:14 2019 */

/* Y direction */
ResYAnchor(0,15)
ResYDist(0,1)
ResYAnchor(10,11)
YShift(10,7)
ResYDist(10,28)
YShift(28,30)
ResYAnchor(16,7)
YShift(16,18)
ResYDist(16,33)
YShift(33,31)
ResYAnchor(20,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="gamma">
/* VTTTalk glyph 570, char 0x3b3 */
/* GUI generated Mon Nov 18 19:19:37 2019 */

/* Y direction */
ResYAnchor(9,7)
ResYAnchor(17,6)
ResYAnchor(22,14)
YIPAnchor(17,14,22)
ResYDist(14,19)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="germandbls">
/* VTTTalk glyph 325, char 0xdf */
/* GUI generated Mon Nov 18 16:13:45 2019 */

/* Y direction */
ResYAnchor(6,1)
ResYDist(6,51)
ResYAnchor(26,11)
ResYDist(26,33)
YInterpolate(26,35,23,38,19,42,16,13,45,9,48,6)
ResYAnchor(56,10)
YIPAnchor(6,1,56)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="gravecomb">
/* VTTTalk glyph 1496, char 0x300 */
/* GUI generated Mon Nov 18 13:07:17 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="gravecomb.case">
/* VTTTalk glyph 1527, char 0xffff */
/* GUI generated Mon Nov 18 13:21:13 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="greater">
/* VTTTalk glyph 813, char 0x3e (&gt;) */
/* GUI generated Mon Nov 18 00:06:48 2019 */

/* Y direction */
ResYAnchor(6,135)
ResYDist(6,4)
ResYDist(4,5)
ResYDist(6,7)
ResYDist(7,1)
ResYDist(1,0)
YInterpolate(7,2,3,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="greater_equal.liga">
/* VTTTalk glyph 1188, char 0xffff */
/* GUI generated Mon Nov 18 09:08:03 2019 */

/* Y direction */
YAnchor(6)
ResYDist(6,4)
ResYDist(4,5)
ResYDist(6,7)
ResYDist(7,1)
ResYDist(1,0)
YDist(0,9,&gt;=)
ResYDist(9,8)
YInterpolate(7,2,3,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="greater_equal_greater.liga">
/* VTTTalk glyph 1189, char 0xffff */
/* GUI generated Mon Nov 18 09:12:23 2019 */

/* Y direction */
ResYAnchor(15,132)
ResYDist(15,12)
YDist(15,7,&gt;=)
ResYDist(7,4)
YDist(4,1,&gt;=1.5)
YShift(1,6)
ResYDist(1,0)
YShift(0,5)
YInterpolate(4,21,9,10,20,15)
YDist(15,18,&gt;=1.5)
YShift(18,13)
ResYDist(18,19)
YShift(19,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="greater_greater.liga">
/* VTTTalk glyph 1190, char 0xffff */
/* GUI generated Mon Nov 18 09:20:39 2019 */

/* Y direction */
ResYAnchor(6,135)
YShift(6,14)
ResYDist(6,4)
YShift(4,12)
ResYDist(4,5)
YShift(5,13)
ResYDist(6,7)
YShift(7,15)
ResYDist(7,1)
YShift(1,9)
ResYDist(1,0)
YShift(0,8)
YInterpolate(7,2,10,11,3,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="greater_greater_equal.liga">
/* VTTTalk glyph 1192, char 0xffff */
/* GUI generated Mon Nov 18 09:26:33 2019 */

/* Y direction */
ResYAnchor(11,132)
ResYDist(11,8)
ResYDist(11,9)
YShift(9,4)
ResYDist(9,10)
YShift(10,5)
YDist(11,16,&gt;=)
ResYDist(16,19)
YInterpolate(19,7,2,3,6,11)
ResYDist(19,15)
YShift(15,1)
ResYDist(15,14)
YShift(14,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="greater_greater_hyphen.liga">
/* VTTTalk glyph 1191, char 0xffff */
/* GUI generated Mon Nov 18 09:22:11 2019 */

/* Y direction */
ResYAnchor(6,131)
ResYDist(6,4)
YShift(4,14)
ResYDist(4,5)
YShift(5,15)
ResYDist(6,9)
ResYDist(9,1)
YShift(1,11)
ResYDist(1,0)
YShift(0,10)
YInterpolate(9,17,12,2,3,13,16,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="greater_hyphen.liga">
/* VTTTalk glyph 1185, char 0xffff */
/* GUI generated Mon Nov 18 09:06:03 2019 */

/* Y direction */
ResYAnchor(6,131)
ResYDist(6,4)
ResYDist(4,5)
ResYDist(6,9)
ResYDist(9,1)
ResYDist(1,0)
YInterpolate(9,2,3,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="greater_hyphen_greater.liga">
/* VTTTalk glyph 1186, char 0xffff */
/* GUI generated Mon Nov 18 21:01:21 2019 */

/* Y direction */
ResYAnchor(16,131)
ResYDist(16,7)
ResYDist(7,1)
YShift(1,10)
ResYDist(1,0)
YShift(0,9)
YInterpolate(7,25,11,12,24,16)
ResYDist(16,22)
YShift(22,13)
ResYDist(22,23)
YShift(23,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="greaterequal">
/* VTTTalk glyph 815, char 0x2265 */
/* GUI generated Mon Nov 18 00:08:43 2019 */

/* Y direction */
YAnchor(6)
ResYDist(6,4)
ResYDist(4,5)
ResYDist(6,7)
ResYDist(7,1)
ResYDist(1,0)
ResYDist(0,9)
ResYDist(9,8)
YInterpolate(6,3,2,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="guillemotleft">
/* VTTTalk glyph 703, char 0xab */
/* GUI generated Sun Nov 17 09:39:24 2019 */

/* Y direction */
YAnchor(3)
ResYDist(3,0)
ResYDist(0,7)
YShift(7,15)
YShift(0,8)
ResYDist(3,4)
YShift(4,12)
YShift(3,11)
YInterpolate(8,1,9,6,14,13,5,10,2,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="guillemotright">
/* VTTTalk glyph 704, char 0xbb */
/* GUI generated Sun Nov 17 09:40:09 2019 */

/* Y direction */
YAnchor(5)
YShift(5,13)
ResYDist(5,0)
YShift(0,8)
ResYDist(0,1)
YShift(1,9)
YInterpolate(0,7,15,10,2,3,11,14,6,5)
ResYDist(5,4)
YShift(4,12)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="guilsinglleft">
/* VTTTalk glyph 705, char 0x2039 */
/* GUI generated Sun Nov 17 09:40:36 2019 */

/* Y direction */
YAnchor(3)
ResYDist(3,4)
ResYDist(3,0)
ResYDist(0,7)
YInterpolate(0,1,6,5,2,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="guilsinglright">
/* VTTTalk glyph 706, char 0x203a */
/* GUI generated Sun Nov 17 09:41:01 2019 */

/* Y direction */
YAnchor(5)
ResYDist(5,4)
ResYDist(5,0)
ResYDist(0,1)
YInterpolate(0,7,2,3,6,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="h">
/* VTTTalk glyph 249, char 0x68 (h) */
/* GUI generated Fri Nov 15 21:54:21 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,11)
ResYAnchor(1,0)
ResYAnchor(6,7)
YShift(6,4)
ResYDist(6,15)
YShift(15,17)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hbar">
/* VTTTalk glyph 250, char 0x127 */
/* GUI generated Fri Nov 15 21:54:45 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,19)
ResYAnchor(5,0)
ResYAnchor(14,7)
YShift(14,11)
YIPAnchor(5,10,14)
YShift(10,2)
ResYDist(10,7)
YShift(7,3)
ResYDist(14,23)
YShift(23,25)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="heart">
/* VTTTalk glyph 1108, char 0x2665 */
/* GUI generated Mon Nov 18 20:37:33 2019 */

/* Y direction */
YAnchor(14)
YShift(14,7)
ResYDist(14,0)
YInterpolate(0,11,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hookabovecomb">
/* VTTTalk glyph 1505, char 0x309 */
/* GUI generated Mon Nov 18 21:36:46 2019 */

/* Y direction */
YAnchor(0)
YShift(0,23)
ResYDist(0,8)
ResYDist(8,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hookabovecomb.case">
/* VTTTalk glyph 1536, char 0xffff */
/* GUI generated Mon Nov 18 13:23:33 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,8)
YShift(8,10)
ResYDist(8,13)
YShift(13,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hyphen_asciitilde.liga">
/* VTTTalk glyph 717, char 0xffff */
/* GUI generated Wed Apr 29 12:00:22 2020 */

/* Y direction */
ResYAnchor(1,131)
ResYDist(1,0)
YDist(1,4,&gt;=3/2)
ResYDist(4,24)
YShift(4,13)
YAnchor(13)
ResYDist(13,10)
ResYDist(10,18)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hyphen_bar.liga">
/* VTTTalk glyph 712, char 0xffff */
/* GUI generated Sun Nov 17 21:39:17 2019 */

/* Y direction */
ResYAnchor(3,131)
ResYDist(3,2)
ResYAnchor(5,133)
ResYDist(5,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hyphen_greater.liga">
/* VTTTalk glyph 713, char 0xffff */
/* GUI generated Sun Nov 17 21:40:00 2019 */

/* Y direction */
ResYAnchor(9,131)
ResYDist(9,8)
ResYDist(8,1)
ResYDist(1,0)
YInterpolate(8,19,18,9)
ResYDist(9,16)
ResYDist(16,17)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hyphen_greater_greater.liga">
/* VTTTalk glyph 714, char 0xffff */
/* GUI generated Sun Nov 17 21:41:02 2019 */

/* Y direction */
ResYAnchor(17,131)
ResYDist(17,16)
YInterpolate(16,27,7,2,3,6,26,17)
ResYDist(16,9)
YShift(9,1)
ResYDist(9,8)
YShift(8,0)
ResYDist(17,24)
YShift(24,4)
ResYDist(24,25)
YShift(25,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hyphen_hyphen.liga">
/* VTTTalk glyph 709, char 0xffff */
/* GUI generated Sun Nov 17 21:37:30 2019 */

/* Y direction */
ResYAnchor(5,131)
YShift(5,1)
ResYDist(5,4)
YShift(4,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hyphen_hyphen_greater.liga">
/* VTTTalk glyph 711, char 0xffff */
/* GUI generated Sun Nov 17 21:38:53 2019 */

/* Y direction */
ResYAnchor(9,131)
ResYDist(9,8)
ResYDist(8,1)
ResYDist(1,0)
YInterpolate(8,19,18,9)
ResYDist(9,16)
ResYDist(16,17)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="hyphen_hyphen_hyphen.liga">
/* VTTTalk glyph 710, char 0xffff */
/* GUI generated Sun Nov 17 21:38:00 2019 */

/* Y direction */
ResYAnchor(5,131)
ResYDist(5,4)
YShift(4,8)
YShift(8,0)
YShift(5,9)
YShift(9,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hyphen_less.liga">
/* VTTTalk glyph 715, char 0xffff */
/* GUI generated Sun Nov 17 21:41:49 2019 */

/* Y direction */
ResYAnchor(3,131)
ResYDist(3,2)
YInterpolate(2,8,7,3)
ResYDist(2,9)
ResYDist(9,0)
ResYDist(3,6)
ResYDist(6,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="hyphen_less_less.liga">
/* VTTTalk glyph 716, char 0xffff */
/* GUI generated Sun Nov 17 21:43:01 2019 */

/* Y direction */
ResYAnchor(11,131)
ResYDist(11,10)
YInterpolate(10,1,6,16,15,5,2,11)
ResYDist(10,17)
YShift(17,7)
ResYDist(17,8)
YShift(8,0)
ResYDist(11,14)
YShift(14,4)
ResYDist(14,13)
YShift(13,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="i">
/* VTTTalk glyph 252, char 0x69 (i) */
/* GUI generated Fri Nov 15 21:56:20 2019 */

/* Y direction */
ResYAnchor(12,10)
ResYDist(12,13)
YShift(13,19)
ResYAnchor(17,6)
ResYDist(17,16)
YDist(17,0,&gt;=1.5)
ResYDist(0,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="iacute_j.loclNLD">
/* VTTTalk glyph 372, char 0xffff */
/* GUI generated Fri Nov 15 22:48:52 2019 */

/* Y direction */
ResYAnchor(8,10)
ResYAnchor(9,6)
YShift(9,18)
YDist(9,0,&gt;=3/2)
YShift(0,4)
ResYDist(0,1)
YShift(1,5)
ResYAnchor(12,15)
ResYDist(12,13)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="ij">
/* VTTTalk glyph 261, char 0x133 */
/* GUI generated Fri Nov 15 21:59:11 2019 */

/* Y direction */
ResYAnchor(24,10)
ResYAnchor(25,6)
YShift(25,34)
YDist(25,0,&gt;=3/2)
YShift(0,12)
ResYDist(0,6)
YShift(6,18)
ResYAnchor(28,15)
ResYDist(28,29)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="infinity">
/* VTTTalk glyph 822, char 0x221e */
/* GUI generated Mon Nov 18 20:27:25 2019 */

/* Y direction */
YAnchor(6)
YShift(6,12)
ResYDist(6,28)
YShift(28,40)
ResYDist(28,22)
YShift(22,34)
ResYDist(22,0)
YShift(0,18)
YInterpolate(0,20,9,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="integral">
/* VTTTalk glyph 824, char 0x222b */
/* GUI generated Mon Nov 18 00:23:37 2019 */

/* Y direction */
ResYAnchor(0,15)
ResYDist(0,1)
ResYAnchor(8,3)
ResYDist(8,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="integralbt">
/* VTTTalk glyph 804, char 0x2321 */
/* GUI generated Mon Nov 18 00:02:54 2019 */

/* Y direction */
ResYAnchor(0,15)
ResYDist(0,1)
ResYDist(0,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="integraltp">
/* VTTTalk glyph 805, char 0x2320 */
/* GUI generated Sun Nov 17 23:57:02 2019 */

/* Y direction */
ResYAnchor(3,3)
ResYDist(3,0)
YShift(3,5)
ResYDist(3,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="intersection">
/* VTTTalk Unicode 0x2229 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
ResYAnchor(0,10)	/* min */
ResYAnchor(3,7)	/* max */

/* YDir: Stroke #0 */
ResYDist(3,10) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,7)

Smooth()



    </glyphProgram>

    <glyphProgram name="invsmileface">
/* VTTTalk glyph 1556, char 0x263b */
/* GUI generated Tue Dec  3 11:06:41 2019 */

/* Y direction */
YAnchor(8)
ResYDist(8,0)
ResYDist(0,40)
YInterpolate(40,49,16,22,8)
YShift(16,28)
YShift(22,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="iogonek">
/* VTTTalk glyph 263, char 0x12f */
/* GUI generated Mon Nov 18 16:04:52 2019 */

/* Y direction */
ResYAnchor(17,6)
ResYDist(17,16)
YDist(17,0,&gt;=)
ResYDist(0,6)
ResYAnchor(22,10)
YShift(22,12)
ResYDist(22,19)
YShift(19,13)
YDist(22,27,&gt;=3/2)
ResYDist(27,32)
YShift(32,30)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="iota">
/* VTTTalk glyph 576, char 0x3b9 */
/* GUI generated Mon Nov 18 19:23:14 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,11)
ResYAnchor(6,6)
ResYDist(6,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="j">
/* VTTTalk glyph 265, char 0x6a (j) */
/* GUI generated Fri Nov 15 22:00:25 2019 */

/* Y direction */
ResYAnchor(12,15)
ResYDist(12,13)
ResYAnchor(20,6)
ResYDist(20,19)
YDist(20,0,&gt;=3/2)
ResYDist(0,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="k">
/* VTTTalk glyph 268, char 0x6b (k) */
/* GUI generated Fri Nov 15 22:01:51 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,13)
ResYAnchor(1,0)
ResYAnchor(8,6)
YIPAnchor(0,3,8)
ResYDist(3,17)
YInterpolate(3,11,14,17)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="kappa">
/* VTTTalk glyph 577, char 0x3ba */
/* GUI generated Sat Nov 16 09:34:29 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,12)
ResYAnchor(1,6)
YIPAnchor(1,3,0)
YInterpolate(1,7,10,13,3)
ResYAnchor(8,7)
ResYDist(8,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="kgreenlandic">
/* VTTTalk glyph 270, char 0x138 */
/* GUI generated Fri Nov 15 22:02:37 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,13)
ResYAnchor(1,6)
YShift(1,9)
YIPAnchor(1,3,0)
ResYDist(3,17)
YInterpolate(17,14,11,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="l">
/* VTTTalk glyph 271, char 0x6c (l) */
/* GUI generated Mon Nov 18 16:06:31 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,12)
ResYAnchor(6,0)
ResYDist(6,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="lambda">
/* VTTTalk glyph 578, char 0x3bb */
/* GUI generated Sat Nov 16 09:35:42 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(10,1)
ResYDist(10,5)
ResYAnchor(22,11)
ResYDist(22,17)
YInterpolate(22,31,29,27,26,1,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="lcaron">
/* VTTTalk glyph 273, char 0x13e */
/* GUI generated Mon Nov 18 16:08:01 2019 */

/* Y direction */
ResYAnchor(4,11)
ResYDist(4,16)
ResYAnchor(10,0)
ResYDist(10,9)
YIPAnchor(4,0,10)
ResYDist(0,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less">
/* VTTTalk glyph 814, char 0x3c (&lt;) */
/* GUI generated Mon Nov 18 00:07:24 2019 */

/* Y direction */
ResYAnchor(2,135)
ResYDist(2,1)
YInterpolate(1,6,5,2)
ResYDist(1,7)
ResYDist(7,0)
ResYDist(2,4)
ResYDist(4,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_asciitilde.liga">
/* VTTTalk glyph 1220, char 0xffff */
/* GUI generated Wed Apr 29 12:33:19 2020 */

/* Y direction */
ResYAnchor(10,131)
ResYDist(10,4)
ResYDist(4,3)
ResYDist(10,13)
ResYDist(13,42)
ResYDist(10,18)
ResYDist(18,37)
ResYDist(10,24)
ResYDist(24,27)
ResYDist(24,31)
ResYDist(10,45)
YInterpolate(45,1,2,10)
ResYDist(45,51)
ResYDist(51,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_asciitilde_asciitilde.liga">
/* VTTTalk glyph 1222, char 0xffff */
/* GUI generated Wed Apr 29 12:33:08 2020 */

/* Y direction */
ResYAnchor(49,131)
ResYDist(49,32)
ResYDist(32,38)
ResYDist(38,39)
YInterpolate(32,40,41,49)
ResYDist(49,43)
ResYDist(43,42)
ResYDist(49,53)
ResYDist(53,28)
ResYDist(49,58)
ResYDist(58,23)
ResYDist(49,64)
ResYDist(64,17)
ResYDist(49,70)
ResYDist(70,11)
ResYDist(49,76)
ResYDist(76,1)
ResYDist(76,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_bar.liga">
/* VTTTalk glyph 1202, char 0xffff */
/* GUI generated Mon Nov 18 09:41:51 2019 */

/* Y direction */
ResYAnchor(2,135)
ResYDist(2,1)
ResYDist(1,0)
ResYDist(2,3)
YInterpolate(0,5,4,7,6,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_bar_bar.liga">
/* VTTTalk glyph 1203, char 0xffff */
/* GUI generated Mon Nov 18 09:47:15 2019 */

/* Y direction */
ResYAnchor(1,133)
ResYDist(1,3)
ResYAnchor(6,135)
ResYDist(6,5)
ResYDist(5,4)
ResYDist(6,7)
YInterpolate(7,10,11,8,9,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_bar_bar_bar.liga">
/* VTTTalk glyph 1204, char 0xffff */
/* GUI generated Mon Nov 18 09:49:11 2019 */

/* Y direction */
ResYAnchor(1,133)
YShift(1,5)
ResYDist(1,3)
YShift(3,4)
ResYAnchor(10,135)
ResYDist(10,9)
ResYDist(9,8)
ResYDist(10,11)
YInterpolate(8,13,12,15,14,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_dollar.liga">
/* VTTTalk glyph 1206, char 0xffff */
/* GUI generated Mon Nov 18 09:58:27 2019 */

/* Y direction */
ResYAnchor(3,135)
ResYDist(3,2)
YInterpolate(2,7,6,3)
ResYDist(3,5)
ResYDist(5,4)
ResYAnchor(16,17)
YDist(16,17,&gt;=1.5)
YShift(16,19)
YShift(19,22)
ResYDist(16,36)
YShift(36,25)
YShift(25,23)
ResYAnchor(32,19)
YShift(32,1)
YDist(32,33,&gt;=1.5)
YInterpolate(16,38,13,34,35,26,27,10,9,42,41,30,45,32)
ResYDist(32,43)
YShift(43,8)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="less_dollar_greater.liga">
/* VTTTalk glyph 1207, char 0xffff */
/* GUI generated Mon Nov 18 10:06:20 2019 */

/* Y direction */
ResYAnchor(11,19)
YDist(11,13,&gt;=3/2)
YShift(11,14)
ResYDist(11,44)
YShift(44,21)
ResYAnchor(16,135)
ResYDist(16,15)
ResYDist (16,18)
ResYDist(18,17)
ResYAnchor(29,17)
YDist(29,31,&gt;=3/2)
YShift(29,32)
YInterpolate(11,46,9,42,43,22,23,6,5,36,35,26,39,29)
ResYDist(29,37)
YShift(37,4)
ResYAnchor(33,135)
ResYDist(33,34)
ResYDist(34,1)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_equal.liga">
/* VTTTalk glyph 1210, char 0xffff */
/* GUI generated Mon Nov 18 21:12:51 2019 */

/* Y direction */
YAnchor(2)
ResYDist(2,1)
YInterpolate(1,6,5,2)
ResYDist(1,7)
ResYDist(7,0)
YDist(0,10,&gt;=)
YDist(10,8)
ResYDist(2,4)
ResYDist(4,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_equal_equal.liga">
/* VTTTalk glyph 1211, char 0xffff */
/* GUI generated Mon Nov 18 10:12:54 2019 */

/* Y direction */
ResYAnchor(7,132)
ResYDist(7,8)
YDist(7,4,&gt;=3/2)
ResYDist(4,3)
YDist(7,13,&gt;=)
ResYDist(13,14)
YInterpolate(14,1,11,10,2,7)
YDist(14,17,&gt;=3/2)
ResYDist(17,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_equal_equal_greater.liga">
/* VTTTalk glyph 1212, char 0xffff */
/* GUI generated Mon Nov 18 10:17:11 2019 */

/* Y direction */
YAnchor(13,16)
YDist(13,11,&gt;=3/2)
YShift(11,16)
ResYDist(11,10)
YShift(10,17)
YDist(13,21,&gt;=)
ResYDist(21,4)
YDist(4,6,&gt;=3/2)
YShift(6,1)
ResYDist(6,7)
YShift(7,0)
ResYDist(13,26)
YInterpolate(21,8,19,23,20,27,24,18,9,26)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_equal_greater.liga">
/* VTTTalk glyph 1212, char 0xffff */
/* GUI generated Mon Nov 18 10:17:11 2019 */

/* Y direction */
ResYAnchor(13,132)
YDist(13,11,&gt;=3/2)
YShift(11,16)
ResYDist(11,10)
YShift(10,17)
YDist(13,21,&gt;=)
ResYDist(21,4)
YDist(4,6,&gt;=3/2)
YShift(6,1)
ResYDist(6,7)
YShift(7,0)
ResYDist(13,26)
YInterpolate(21,8,19,23,20,27,24,18,9,26)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_equal_less.liga">
/* VTTTalk glyph 1214, char 0xffff */
/* GUI generated Mon Nov 18 10:19:53 2019 */

/* Y direction */
ResYAnchor(12,132)
ResYDist(12,15)
YDist(12,9,&gt;=3/2)
YShift(9,14)
ResYDist(9,8)
YShift(8,13)
YDist(12,20,&gt;=)
ResYDist(20,1)
YDist(1,4,&gt;=3/2)
YShift(4,21)
ResYDist(4,5)
YShift(5,0)
YInterpolate(1,6,18,17,7,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_exclam_hyphen_hyphen.liga">
/* VTTTalk glyph 1199, char 0xffff */
/* GUI generated Mon Nov 18 21:11:29 2019 */

/* Y direction */
ResYAnchor(1,16)
ResYAnchor(25,131)
YShift(25,15)
ResYDist(15,8)
ResYDist(8,7)
ResYDist(25,24)
YShift(24,16)
YInterpolate(16,5,6,15)
ResYDist(16,23)
ResYDist(23,4)
ResYAnchor(28,19)
ResYDist(28,34)
ResYDist(34,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_hyphen.liga">
/* VTTTalk glyph 1194, char 0xffff */
/* GUI generated Wed Apr 29 12:02:11 2020 */

/* Y direction */
ResYAnchor(11,131)
ResYDist(11,4)
ResYDist(4,3)
ResYDist(11,12)
YInterpolate(12,1,2,11)
ResYDist(12,19)
ResYDist (19,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_hyphen_greater.liga">
/* VTTTalk glyph 1196, char 0xffff */
/* GUI generated Mon Nov 18 21:05:16 2019 */

/* Y direction */
ResYAnchor(26,131)
ResYDist(26,7)
ResYDist(7,1)
YShift(1,14)
ResYDist(1,0)
YShift(0,15)
YInterpolate(7,35,16,17,34,26)
ResYDist(26,32)
YShift(32,19)
ResYDist(32,33)
YShift(33,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_hyphen_hyphen.liga">
/* VTTTalk glyph 1195, char 0xffff */
/* GUI generated Mon Nov 18 21:02:59 2019 */

/* Y direction */
ResYAnchor(11,131)
ResYDist(11,4)
ResYDist(4,3)
ResYDist(11,12)
YInterpolate(12,1,2,11)
ResYDist(12,19)
ResYDist(19,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="less_hyphen_less.liga">
/* VTTTalk glyph 1197, char 0xffff */
/* GUI generated Mon Nov 18 21:07:21 2019 */

/* Y direction */
ResYAnchor(20,131)
ResYDist(20,1)
YInterpolate(1,10,24,23,11,20)
ResYDist(1,25)
YShift(25,8)
ResYDist(25,0)
YShift(0,9)
ResYDist(20,22)
YShift(22,13)
ResYDist(22,21)
YShift(21,12)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_less.liga">
/* VTTTalk glyph 1216, char 0xffff */
/* GUI generated Mon Nov 18 10:21:02 2019 */

/* Y direction */
ResYAnchor(2,135)
YShift(2,10)
ResYDist(2,1)
YShift(1,9)
YInterpolate(1,14,6,5,13,2)
ResYDist(1,7)
YShift(7,15)
ResYDist(7,0)
YShift(0,8)
ResYDist(2,4)
YShift(4,12)
ResYDist(4,3)
YShift(3,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_less_equal.liga">
/* VTTTalk glyph 1218, char 0xffff */
/* GUI generated Mon Nov 18 10:24:33 2019 */

/* Y direction */
ResYAnchor(7,132)
ResYDist(7,8)
YDist(7,4,&gt;=3/2)
YShift(4,22)
ResYDist(4,3)
YShift(3,21)
YDist(7,13,&gt;=)
ResYDist(13,14)
YInterpolate(14,19,1,11,24,23,10,2,20,7)
YDist(14,17,&gt;=3/2)
YShift(17,25)
ResYDist(17,0)
YShift(0,18)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_less_hyphen.liga">
/* VTTTalk glyph 1217, char 0xffff */
/* GUI generated Mon Nov 18 23:05:35 2019 */

/* Y direction */
ResYAnchor(11,131)
ResYDist(11,4)
YShift(4,24)
ResYDist(4,3)
YShift(3,23)
ResYDist(11,12)
YInterpolate(12,1,21,26,25,22,2,11)
ResYDist(12,19)
YShift(19,27)
ResYDist(19,0)
YShift(0,20)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_slash.liga">
/* VTTTalk glyph 1223, char 0xffff */
/* GUI generated Mon Nov 18 10:29:58 2019 */

/* Y direction */
ResYAnchor(3,135)
ResYDist(3,2)
YInterpolate(2,7,6,3)
ResYDist(3,5)
ResYDist(5,4)
ResYAnchor(9,136)
ResYDist(9,0)
YInterpolate(0,1,8,9)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="less_slash_greater.liga">
/* VTTTalk glyph 1224, char 0xffff */
/* GUI generated Mon Nov 18 10:31:29 2019 */

/* Y direction */
ResYAnchor(9,135)
YShift(9,18)
ResYDist(9,8)
YInterpolate(9,3,12,13,2,8)
YShift(8,19)
ResYDist(19,1)
ResYDist(1,0)
ResYDist(9,11)
ResYDist(11,10)
ResYAnchor(15,136)
ResYDist(15,5)
YInterpolate(5,7,14,4,17,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="lessequal">
/* VTTTalk glyph 816, char 0x2264 */
/* GUI generated Wed Apr 29 15:06:11 2020 */

/* Y direction */
YAnchor(2)
ResYDist(2,1)
YInterpolate(1,6,5,2)
ResYDist(1,7)
ResYDist(7,0)
ResYDist(0,10)
ResYDist(10,11)
ResYDist(2,4)
ResYDist(4,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="lira">
/* VTTTalk glyph 785, char 0x20a4 */
/* GUI generated Sun Nov 17 23:45:47 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,1)
YShift(1,40)
ResYAnchor(17,3)
YShift(17,20)
YIPAnchor(0,5,12,17)
YInterpolate(5,6,11,12)
YShift(5,36)
YShift(6,35)
YShift(11,30)
YShift(12,29)
ResYDist(17,24)
YShift(24,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="logicalnot">
/* VTTTalk glyph 820, char 0xac */
/* GUI generated Mon Nov 18 00:14:38 2019 */

/* Y direction */
YAnchor(1)
ResYDist(1,0)
ResYDist(1,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="longs">
/* VTTTalk glyph 326, char 0x17f */
/* GUI generated Fri Nov 15 22:24:56 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(7,1)
ResYDist(7,13)
YIPAnchor(0,3,7)
ResYDist(3,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="lozenge">
/* VTTTalk glyph 911, char 0x25ca */
/* GUI generated Mon Nov 18 00:41:47 2019 */

/* Y direction */
ResYAnchor(0,2)
ResYAnchor(2,8)
YInterpolate(0,6,8,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="lslash">
/* VTTTalk glyph 276, char 0x142 */
/* GUI generated Fri Nov 15 22:08:02 2019 */

/* Y direction */
ResYAnchor(5,0)
ResYDist(5,4)
ResYAnchor(21,11)
ResYDist(21,15)
YInterpolate(21,1,5)
ResYDist(1,0)
YShift(0,9)
YShift(1,8)
YInterpolate(8,7,2,10,25,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="m">
/* VTTTalk glyph 277, char 0x6d (m) */
/* GUI generated Fri Nov 15 22:08:40 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,25)
YShift(25,18)
ResYAnchor(1,6)
ResYAnchor(6,7)
YShift(6,3)
YShift(6,13)
YShift(13,10)
ResYDist(6,28)
YShift(28,30)
YShift(28,21)
YShift(21,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="male">
/* VTTTalk glyph 1105, char 0x2642 */
/* GUI generated Mon Nov 18 00:55:34 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,27)
ResYAnchor(14,2)
ResYDist(14,13)
YIPAnchor(14,6,0)
YInterpolate(14,10,21,6)
ResYDist(6,33)
YIPAnchor(33,17,6)
YInterpolate(17,22,8,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="minus">
/* VTTTalk glyph 808, char 0x2212 */
/* GUI generated Sun Nov 17 23:58:05 2019 */

/* Y direction */
ResYAnchor(1,131)
ResYDist(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="minute">
/* VTTTalk glyph 1122, char 0x2032 */
/* GUI generated Mon Nov 18 01:12:24 2019 */

/* Y direction */
ResYAnchor(1,16)
ResYDist(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="multiply">
/* VTTTalk glyph 809, char 0xd7 */
/* GUI generated Sun Nov 17 23:59:09 2019 */

/* Y direction */
YAnchor(4)
YShift(4,6)
ResYDist(4,0)
YShift(0,10)
YInterpolate(10,1,9,11,8,2,5,3,7,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="musicalnote">
/* VTTTalk glyph 1232, char 0x266a */
/* GUI generated Mon Nov 18 01:28:48 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,4)
YInterpolate(0,17,6,4)
ResYAnchor(7,2)
ResYDist(7,16)
YInterpolate(0,11,12,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="musicalnotedbl">
/* VTTTalk glyph 1558, char 0x266b */
/* GUI generated Tue Dec  3 11:08:48 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,6)
YInterpolate(0,27,8,6)
ResYDist(0,12)
ResYDist(12,25)
YIPAnchor(12,16,0)
ResYDist(16,22)
YInterpolate(16,13,24,22)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="n">
/* VTTTalk glyph 278, char 0x6e (n) */
/* GUI generated Fri Nov 15 22:09:09 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,11)
ResYAnchor(1,6)
ResYAnchor(6,7)
YShift(6,4)
ResYDist(6,15)
YShift(15,17)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="napostrophe">
/* VTTTalk glyph 280, char 0x149 */
/* GUI generated Fri Nov 15 22:09:34 2019 */

/* Y direction */
ResYAnchor(4,10)
YShift(4,15)
ResYAnchor(5,6)
ResYDist(5,0)
ResYDist(0,1)
ResYAnchor(10,7)
YShift(10,8)
ResYDist(10,19)
YShift(19,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="nine">
/* VTTTalk glyph 614, char 0x39 (9) */
/* GUI generated Sat Nov 16 09:50:43 2019 */

/* Y direction */
ResYAnchor(0,12)
ResYDist(0,1)
ResYAnchor(13,5)
ResYDist(13,25)
YIPAnchor(13,7,0)
YShift(7,4)
ResYDist(7,20)
YShift(20,23)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="notequal">
/* VTTTalk glyph 812, char 0x2260 */
/* GUI generated Mon Nov 18 00:06:21 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(7,132)
YShift(7,12)
ResYDist(7,3)
YShift(3,16)
ResYDist(3,2)
YShift(2,17)
ResYDist(7,6)
YShift(6,13)
ResYAnchor(9,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="nu">
/* VTTTalk glyph 580, char 0x3bd */
/* GUI generated Sat Nov 16 09:37:02 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(6,7)
ResYDist(6,5)
ResYAnchor(13,6)
YInterpolate(13,11,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="numbersign">
/* VTTTalk glyph 677, char 0x23 (#) */
/* GUI generated Sun Nov 17 09:29:57 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,24)
ResYAnchor(9,2)
YShift(9,14)
YIPAnchor(9,31,3,0)
YShift(31,6)
YShift(31,18)
ResYDist(31,11)
YShift(11,7)
YShift(11,15)
YShift(3,19)
YShift(3,28)
ResYDist(3,2)
YShift(2,22)
YShift(2,26)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="numbersign_braceleft.liga">
/* VTTTalk glyph 749, char 0xffff */
/* GUI generated Mon Nov 18 20:15:59 2019 */

/* Y direction */
ResYAnchor(4,18)
YShift(4,0)
ResYAnchor(13,16)
YShift(13,17)
YIPAnchor(13,9,8,4)
YInterpolate(9,72,42,43,83,8)
ResYDist(9,12)
YShift(12,16)
YShift(16,19)
YShift(9,70)
YShift(70,77)
ResYDist(8,5)
YShift(5,1)
YShift(1,66)
YShift(8,69)
YShift(69,78)
ResYAnchor(26,138)
ResYDist(26,33)
ResYDist(26,59)
ResYDist(59,52)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="numbersign_bracketleft.liga">
/* VTTTalk glyph 750, char 0xffff */
/* GUI generated Sun Nov 17 22:21:44 2019 */

/* Y direction */
ResYAnchor(4,18)
YShift(4,0)
ResYAnchor(13,16)
YShift(13,17)
YIPAnchor(4,8,9,13)
ResYDist(8,5)
YShift(5,2)
YShift(2,30)
YShift(8,32)
YShift(32,36)
ResYDist(9,12)
YShift(12,15)
YShift(15,19)
YShift(9,35)
ResYDist(35,39)
ResYAnchor(22,137)
ResYDist(22,23)
ResYDist(22,27)
ResYDist(27,26)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="numbersign_equal.liga">
/* VTTTalk glyph 755, char 0xffff */
/* GUI generated Sun Nov 17 22:26:14 2019 */

/* Y direction */
ResYAnchor(4,18)
YShift(4,0)
ResYAnchor(13,16)
YShift(13,17)
YIPAnchor(4,8,9,13)
ResYDist(8,5)
YShift(5,2)
YShift(2,26)
YShift(26,36)
YShift(8,32)
YShift(32,23)
YShift(23,37)
ResYDist(9,12)
YShift(12,15)
YShift(15,19)
YShift(19,29)
YShift(9,35)
YShift(35,22)
YShift(22,28)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="numbersign_parenleft.liga">
/* VTTTalk glyph 748, char 0xffff */
/* GUI generated Sun Nov 17 22:17:35 2019 */

/* Y direction */
ResYAnchor(4,18)
YShift(4,0)
ResYAnchor(13,16)
YShift(13,17)
YIPAnchor(4,8,9,13)
ResYDist(8,5)
YShift(5,1)
YShift(1,39)
YShift(8,42)
YShift(42,49)
ResYDist(9,12)
YShift(12,16)
YShift(16,19)
YShift(9,43)
YShift(43,48)
ResYAnchor(23,138)
ResYDist(23,25)
ResYDist(23,35)
ResYDist(35,32)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="numbersign_question.liga">
/* VTTTalk glyph 753, char 0xffff */
/* GUI generated Sun Nov 17 22:24:34 2019 */

/* Y direction */
ResYAnchor(4,18)
YShift(4,0)
ResYAnchor(13,16)
YShift(13,17)
YIPAnchor(4,8,9,13)
ResYDist(8,5)
YShift(5,2)
YShift(2,49)
YShift(8,51)
YShift(51,46)
ResYDist(9,12)
YShift(12,15)
YShift(15,19)
YShift(19,43)
YShift(9,54)
YShift(54,45)
ResYAnchor(23,17)
ResYDist(23,40)
ResYAnchor(55,19)
ResYDist(55,61)
ResYDist(61,32)
YInterpolate(32,28,35,37,26,40)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="numbersign_underscore.liga">
/* VTTTalk glyph 756, char 0xffff */
/* GUI generated Sun Nov 17 22:27:17 2019 */

/* Y direction */
ResYAnchor(4,18)
ResYDist(4,0)
YShift(4,27)
ResYAnchor(13,16)
YShift(13,17)
YIPAnchor(4,7,10,13)
ResYDist(7,6)
YShift(6,1)
YShift(1,25)
YShift(7,31)
YShift(31,24)
ResYDist(10,11)
YShift(11,16)
YShift(16,20)
YShift(10,32)
YShift(32,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="o">
/* VTTTalk Unicode 0x6f (o) */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 11 */
/* CVT 6 7 */
/* Min and Max */
ResYAnchor(0,11)	/* min, CVT */
ResYAnchor(6,7)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(6,18) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,12) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="oe">
/* VTTTalk glyph 311, char 0x153 */
/* GUI generated Fri Nov 15 22:21:01 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,35)
YShift(0,24)
ResYDist(24,18)
ResYAnchor(4,7)
ResYDist(4,39)
YIPAnchor(4,15,0)
YInterpolate(4,6,15)
YInterpolate(15,26,0)
ResYDist(15,31)
YShift(31,11)
YShift(4,8)
ResYDist(8,28)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="omega">
/* VTTTalk glyph 592, char 0x3c9 */
/* GUI generated Mon Nov 18 19:29:48 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,27)
ResYDist(0,9)
YShift(9,18)
ResYAnchor(4,6)
YShift(4,22)
YIPAnchor(22,14,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="one">
/* VTTTalk glyph 606, char 0x31 (1) */
/* GUI generated Sat Nov 16 09:44:56 2019 */

/* Y direction */
ResYAnchor(0,12)
ResYDist(0,1)
YShift(1,8)
ResYAnchor(6,4)
ResYDist(6,3)
ResYDist(6,5)
ResYDist(5,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="oneeighth">
/* VTTTalk glyph 660, char 0x215b */
/* GUI generated Sun Nov 17 09:15:28 2019 */

/* Y direction */
ResYAnchor(6,16)
YShift(6,5)
ResYDist(6,3)
YShift(3,4)
ResYDist(3,1)
ResYDist(1,0)
YShift(1,8)
ResYAnchor(15,19)
YInterpolate(6,13,11,15)
YShift(13,14)
YShift(11,12)
ResYDist(15,47)
ResYDist(47,51)
ResYDist(51,39)
YInterpolate(51,33,21,39)
ResYDist(39,43)
ResYDist(43,27)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="onehalf">
/* VTTTalk glyph 657, char 0xbd */
/* GUI generated Sun Nov 17 09:07:40 2019 */

/* Y direction */
ResYAnchor(6,16)
YShift(6,5)
ResYDist(6,3)
YShift(3,4)
ResYDist(3,1)
ResYDist(1,0)
YShift(1,8)
ResYAnchor(15,18)
YInterpolate(6,13,11,15)
YShift(13,14)
YShift(11,12)
ResYDist(15,33)
YShift(33,16)
ResYDist(33,20)
ResYDist(20,26)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="onequarter">
/* VTTTalk glyph 658, char 0xbc */
/* GUI generated Sun Nov 17 09:09:03 2019 */

/* Y direction */
ResYAnchor(6,16)
YShift(6,5)
ResYDist(6,3)
YShift(3,4)
ResYDist(3,1)
ResYDist(1,0)
YShift(1,8)
ResYAnchor(27,18)
YInterpolate(6,13,11,27)
YShift(13,14)
YShift(11,12)
ResYDist(27,26)
YShift(26,15)
ResYDist(26,23)
YShift(23,19)
ResYDist(23,21)
YInterpolate(23,17,21)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="ordfeminine">
/* VTTTalk glyph 383, char 0xaa */
/* GUI generated Mon Nov 18 16:27:45 2019 */

/* Y direction */
ResYAnchor(13,17)
ResYDist(13,12)
ResYDist(12,6)
YShift(6,8)
ResYDist(6,31)
ResYDist(31,26)
YShift(26,19)
ResYDist(26,0)
YShift(0,20)
YShift(0,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="ordmasculine">
/* VTTTalk glyph 384, char 0xba */
/* GUI generated Fri Nov 15 23:15:32 2019 */

/* Y direction */
ResYAnchor(6,3)
ResYDist(6,18)
ResYDist(18,12)
ResYDist(12,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="orthogonal">
/* VTTTalk Unicode 0x221f */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 18  DISABLED for a NON-LATIN glyph */
/* Min and Max */
ResYAnchor(0,10)	/* min */
ResYAnchor(1,6)	/* max */

/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/

Smooth()



    </glyphProgram>

    <glyphProgram name="oslash">
/* VTTTalk glyph 308, char 0xf8 */
/* GUI generated Fri Nov 15 22:20:21 2019 */

/* Y direction */
ResYAnchor(7,7)
ResYDist(7,25)
YDist(7,10,&gt;=3/2)
YShift(10,11)
ResYAnchor(17,11)
ResYDist(17,28)
YDist(17,0,&gt;=3/2)
YShift(0,1)
YInterpolate(17,19,2,34,22,33,23,12,9,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="p">
/* VTTTalk glyph 312, char 0x70 (p) */
/* GUI generated Fri Nov 15 22:21:31 2019 */

/* Y direction */
ResYAnchor(0,14)
ResYAnchor(1,6)
ResYAnchor(6,7)
YShift(6,4)
ResYDist(6,18)
YShift(18,20)
ResYAnchor(12,11)
YShift(12,15)
ResYDist(12,23)
YShift(23,21)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="paragraph">
/* VTTTalk glyph 1114, char 0xb6 */
/* GUI generated Mon Nov 18 01:04:47 2019 */

/* Y direction */
ResYAnchor(0,18)
YShift(0,12)
ResYAnchor(7,16)
YInterpolate(0,1,7)
ResYDist(7,14)
YShift(14,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="parenleft">
/* VTTTalk glyph 681, char 0x28 (() */
/* GUI generated Mon Nov 18 19:54:10 2019 */

/* Y direction */
ResYAnchor(7,138)
ResYDist(7,9)
ResYDist(7,17)
ResYDist(17 ,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="parenleft_asterisk.liga">
/* VTTTalk glyph 1577, char 0xffff */
/* GUI generated Wed Apr 29 12:49:32 2020 */

/* Y direction */
ResYAnchor(11,138)
ResYDist(11,18)
ResYDist(11,3)
ResYDist(3,24)
YIPAnchor(3,34,11)
ResYDist(34,28)
YShift(28,41)
YInterpolate(28,40,29,42,30,39,31,38,36,33,37,32,34)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="parenright">
/* VTTTalk glyph 682, char 0x29 ()) */
/* GUI generated Sun Nov 17 09:31:45 2019 */

/* Y direction */
ResYAnchor(10,138)
ResYDist(10,9)
ResYDist(10,0)
ResYDist(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="percent">
/* VTTTalk glyph 833, char 0x25 (%) */
/* GUI generated Mon Nov 18 00:26:52 2019 */

/* Y direction */
ResYAnchor(6,17)
ResYDist(6,18)
ResYDist(18,12)
ResYDist(12,0)
YDist(0,25,&gt;=2.5)
ResYDist(25,24)
ResYAnchor(28,19)
ResYDist(28,40)
ResYDist(40,46)
ResYDist(46,34)
YDist(34,27,&gt;=2.5)
ResYDist(27,26)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="percent_percent.liga">
/* VTTTalk glyph 1231, char 0xffff */
/* GUI generated Mon Nov 18 10:47:05 2019 */

/* Y direction */
ResYAnchor(6,17)
YShift(6,21)
ResYDist(6,33)
YShift(33,45)
ResYDist(33,27)
YShift(27,39)
ResYDist(27,0)
YShift(0,12)
YInterpolate(0,15,18,6)
ResYDist(0,17)
ResYDist(17,16)
ResYAnchor(66,19)
YShift(66,51)
ResYDist(66,90)
YShift(90,78)
ResYDist(90,96)
YShift(96,84)
ResYDist(96,72)
YShift(72,57)
YInterpolate(66,63,60,72)
ResYDist(72,62)
ResYDist(62,61)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="period">
/* VTTTalk glyph 664, char 0x2e (.) */
/* GUI generated Sun Nov 17 09:18:49 2019 */

/* Y direction */
ResYAnchor(0,19)
ResYDist(0,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="period_equal.liga">
/* VTTTalk glyph 728, char 0xffff */
/* GUI generated Sun Nov 17 22:08:18 2019 */

/* Y direction */
ResYAnchor(1,132)
ResYDist(1,0)
YDist(1,17,&gt;=)
ResYDist(17,16)
YInterpolate(16,10,1)
ResYDist(10,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="period_hyphen.liga">
/* VTTTalk glyph 722, char 0xffff */
/* GUI generated Sun Nov 17 21:52:40 2019 */

/* Y direction */
ResYAnchor(13,131)
ResYDist(13,6)
ResYDist(13,12)
ResYDist(12,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="period_period_equal.liga">
/* VTTTalk glyph 725, char 0xffff */
/* GUI generated Sun Nov 17 21:53:33 2019 */

/* Y direction */
ResYAnchor(1,132)
ResYDist(1,0)
YDist(1,29,&gt;=)
ResYDist(29,28)
YInterpolate(28,22,1)
YShift(22,10)
ResYDist(22,16)
YShift(16,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="period_period_less.liga">
/* VTTTalk glyph 726, char 0xffff */
/* GUI generated Sun Nov 17 21:55:26 2019 */

/* Y direction */
ResYAnchor(2,135)
ResYDist(2,1)
YInterpolate(1,6,5,2)
ResYDist(1,7)
ResYDist(7,0)
ResYDist(2,4)
ResYDist(4,3)
YInterpolate(0,26,3)
YShift(26,14)
ResYDist(26,20)
YShift(20,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="perthousand">
/* VTTTalk glyph 834, char 0x2030 */
/* GUI generated Mon Nov 18 07:50:55 2019 */

/* Y direction */
ResYAnchor(6,3)
ResYDist(6,18)
ResYDist(18,12)
ResYDist(12,0)
ResYAnchor(52,9)
ResYDist(52,28)
ResYDist(28,40)
YDist(40,46,&gt;=)
ResYDist(46,34)
YShift(34,27)
YAnchor(27)
YShift(27,26)
ResYDist(52,64)
YDist(64,70,&gt;=)
ResYDist(70,58)
YShift(58,24)
YShift(24,25)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="peseta">
/* VTTTalk glyph 789, char 0x20a7 */
/* GUI generated Sun Nov 17 23:44:12 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(5,2)
ResYDist(5,19)
YIPAnchor(5,20,29,0)
YShift(20,3)
YShift(20,9)
ResYDist(20,28)
YShift(28,2)
YShift(28,12)
ResYDist(29,16)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="phi">
/* VTTTalk glyph 589, char 0x3c6 */
/* GUI generated Mon Nov 18 23:21:16 2019 */

/* Y direction */
ResYAnchor(1,11)
ResYDist(1,0)
YShift(1,12)
ResYDist(1,21)
YShift(21,17)
ResYAnchor(5,7)
ResYDist(5,6)
YShift(5,8)
ResYDist(5,22)
YShift(22,16)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="pi">
/* VTTTalk glyph 583, char 0x3c0 */
/* GUI generated Sat Nov 16 09:38:05 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(3,6)
ResYDist(3,2)
YShift(2,22)
YShift(22,6)
ResYAnchor(17,11)
ResYDist(17,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="plus">
/* VTTTalk glyph 807, char 0x2b (+) */
/* GUI generated Sun Nov 17 23:58:30 2019 */

/* Y direction */
ResYAnchor(3,131)
ResYDist(3,5)
YShift(3,7)
ResYDist(3,2)
ResYDist(2,0)
YShift(2,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="plus_plus_plus.liga">
/* VTTTalk glyph 1174, char 0xffff */
/* GUI generated Mon Nov 18 08:44:53 2019 */

/* Y direction */
ResYAnchor(11,131)
ResYDist(11,10)
YShift(10,6)
YShift(6,2)
YShift(2,26)
ResYDist(10,8)
YShift(8,4)
YShift(4,0)
ResYDist(11,13)
YShift(13,17)
YShift(17,21)
YShift(11,15)
YShift(15,19)
YShift(19,23)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="plusminus">
/* VTTTalk glyph 817, char 0xb1 */
/* GUI generated Mon Nov 18 00:11:36 2019 */

/* Y direction */
YAnchor(7)
ResYDist(7,5)
ResYDist(5,4)
ResYDist(4,1)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="product">
/* VTTTalk glyph 827, char 0x220f */
/* GUI generated Mon Nov 18 00:24:04 2019 */

/* Y direction */
ResYAnchor(3,2)
ResYDist(3,0)
YShift(0,8)
ResYDist(3,2)
YShift(2,10)
YShift(10,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="psi">
/* VTTTalk glyph 591, char 0x3c8 */
/* GUI generated Sat Nov 16 09:40:53 2019 */

/* Y direction */
ResYAnchor(0,14)
ResYAnchor(1,11)
YShift(1,18)
ResYDist(1,8)
YShift(8,11)
ResYAnchor(4,6)
YShift(4,14)
ResYAnchor(9,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="q">
/* VTTTalk glyph 314, char 0x71 (q) */
/* GUI generated Mon Nov 18 16:10:48 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,14)
ResYDist(0,20)
YShift(20,22)
ResYAnchor(6,7)
YShift(6,9)
ResYDist(6,25)
YShift(25,23)
ResYAnchor(11,6)
ResYAnchor(12,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="question">
/* VTTTalk glyph 671, char 0x3f (?) */
/* GUI generated Sun Nov 17 09:25:07 2019 */

/* Y direction */
ResYAnchor(15,17)
YShift(15,12)
ResYDist(15,8)
YShift(8,11)
ResYAnchor(24,19)
ResYDist(24,30)
ResYDist(30,0)
YInterpolate(0,20,3,5,18,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="question_equal.liga">
/* VTTTalk glyph 743, char 0xffff */
/* GUI generated Wed Apr 29 15:01:56 2020 */

/* Y direction */
ResYAnchor(15,17)
YShift(15,12)
ResYDist(15,8)
YShift(8,11)
YAnchor(29,16)
ResYDist(29,27)
YDist(29,32,&gt;=)
ResYDist(32,33)
ResYAnchor(34,19)
ResYDist(34,40)
ResYDist(40,0)
YInterpolate(8,18,5,3,20,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="questiondown">
/* VTTTalk glyph 672, char 0xbf */
/* GUI generated Mon Nov 18 19:52:59 2019 */

/* Y direction */
ResYAnchor(0,7)
ResYDist(0,6)
ResYDist(6,20)
ResYDist(0,12)
YShift(12,33)
YInterpolate(12,15,26,24,17,22,20)
ResYDist(12,29)
YShift(29,32)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="quoteleft">
/* VTTTalk glyph 700, char 0x2018 */
/* GUI generated Sun Nov 17 09:37:56 2019 */

/* Y direction */
ResYAnchor(2,16)
ResYDist(2,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="quoteright">
/* VTTTalk glyph 701, char 0x2019 */
/* GUI generated Sun Nov 17 09:38:07 2019 */

/* Y direction */
ResYAnchor(2,16)
ResYDist(2,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="quotesingle">
/* VTTTalk glyph 708, char 0x27 (') */
/* GUI generated Sun Nov 17 09:41:12 2019 */

/* Y direction */
ResYAnchor(1,16)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="r">
/* VTTTalk glyph 315, char 0x72 (r) */
/* GUI generated Mon Nov 18 16:11:18 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,1)
YShift(1,21)
ResYAnchor(5,6)
ResYDist(5,4)
ResYAnchor(10,7)
YShift(10,7)
ResYDist(10,17)
YInterpolate(0,14,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="radical">
/* VTTTalk glyph 829, char 0x221a */
/* GUI generated Mon Nov 18 00:25:12 2019 */

/* Y direction */
ResYAnchor(5,2)
ResYDist(5,8)
ResYDist(5,0)
YInterpolate(0,3,2,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="registered">
/* VTTTalk glyph 1117, char 0xae */
/* GUI generated Mon Nov 18 08:01:30 2019 */

/* Y direction */
ResYAnchor(0,18)
ResYDist(0,12)
ResYAnchor(6,16)
ResYDist(6,18)
YIPAnchor(6,25,35,24,0)
ResYDist(25,38)
ResYDist(35,39)
YShift(24,33)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="revlogicalnot">
/* VTTTalk glyph 806, char 0x2310 */
/* GUI generated Sun Nov 17 23:57:19 2019 */

/* Y direction */
YAnchor(1)
ResYDist(1,0)
ResYDist(1,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="rho">
/* VTTTalk glyph 584, char 0x3c1 */
/* GUI generated Mon Nov 18 19:26:01 2019 */

/* Y direction */
ResYAnchor(0,14)
ResYAnchor(4,7)
ResYDist(4,15)
ResYAnchor(9,11)
YShift(9,13)
ResYDist(9,21)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="s">
/* VTTTalk glyph 319, char 0x73 (s) */
/* GUI generated Mon Nov 18 16:12:14 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,7)
ResYAnchor(20,7)
ResYDist(20,26)
YInterpolate(0,10,36,13,14,33,32,17,29,20)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="second">
/* VTTTalk glyph 1123, char 0x2033 */
/* GUI generated Mon Nov 18 01:12:30 2019 */

/* Y direction */
ResYAnchor(5,16)
YShift(5,2)
ResYDist(5,0)
YShift(0,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="section">
/* VTTTalk glyph 1115, char 0xa7 */
/* GUI generated Mon Nov 18 23:02:11 2019 */

/* Y direction */
YAnchor(10)
ResYDist(10,17)
YAnchor(38)
ResYDist(38,44)
YInterpolate(10,23,24,4,3,59,65,30,31,51,50,38)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="semicolon">
/* VTTTalk glyph 667, char 0x3b (;) */
/* GUI generated Sun Nov 17 09:19:59 2019 */

/* Y direction */
ResYAnchor(6,7)
ResYDist(6,0)
YAnchor(14)
ResYDist(14,12)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="seven">
/* VTTTalk glyph 612, char 0x37 (7) */
/* GUI generated Sat Nov 16 09:49:22 2019 */

/* Y direction */
ResYAnchor(0,12)
ResYAnchor(5,4)
ResYDist(5,2)
YInterpolate(0,3,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="seveneighths">
/* VTTTalk glyph 663, char 0x215e */
/* GUI generated Sun Nov 17 09:18:37 2019 */

/* Y direction */
ResYAnchor(5,16)
ResYDist(5,2)
ResYDist(2,7)
YInterpolate(7,3,2)
ResYAnchor(12,19)
YInterpolate(12,8,10,5)
YShift(8,9)
YShift(10,11)
ResYDist(12,44)
ResYDist(44,48)
ResYDist(48,36)
YInterpolate(48,30,18,36)
ResYDist(36,40)
ResYDist(40,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="sigma">
/* VTTTalk glyph 586, char 0x3c3 */
/* GUI generated Mon Nov 18 19:26:39 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,18)
ResYAnchor(6,6)
ResYDist(6,24)
YShift(24,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="six">
/* VTTTalk glyph 611, char 0x36 (6) */
/* GUI generated Mon Nov 18 19:34:26 2019 */

/* Y direction */
ResYAnchor(0,13)
ResYDist(0,20)
ResYAnchor(7,4)
ResYDist(7,8)
YInterpolate(0,14,7)
YShift(14,10)
ResYDist(14,26)
YShift(26,29)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="slash">
/* VTTTalk glyph 679, char 0x2f (/) */
/* GUI generated Sun Nov 17 09:30:36 2019 */

/* Y direction */
YAnchor(1,136)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="slash_equal.liga">
/* VTTTalk glyph 758, char 0xffff */
/* GUI generated Sun Nov 17 22:28:08 2019 */

/* Y direction */
ResYAnchor(1,136)
ResYDist(1,3)
ResYAnchor(6,132)
ResYDist(6,7)
YDist(6,10,&gt;=)
ResYDist(10,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="slash_equal_equal.liga">
/* VTTTalk glyph 759, char 0xffff */
/* GUI generated Sun Nov 17 22:29:50 2019 */

/* Y direction */
ResYAnchor(1,136)
ResYDist(1,3)
ResYAnchor(10,132)
YShift(10,6)
ResYDist(10,11)
YShift(11,7)
ResYDist(10,18)
YShift(18,14)
ResYDist(18,19)
YShift(19,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="slash_greater.liga">
/* VTTTalk glyph 760, char 0xffff */
/* GUI generated Sun Nov 17 22:30:56 2019 */

/* Y direction */
ResYAnchor(7,136)
ResYDist(7,5)
YInterpolate(7,9,4,5)
ResYAnchor(10,135)
ResYDist(10,11)
ResYDist(11,1)
ResYDist(1,0)
YInterpolate(11,2,3,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="smileface">
/* VTTTalk glyph 1555, char 0x263a */
/* GUI generated Tue Dec  3 11:06:47 2019 */

/* Y direction */
YAnchor(8)
ResYDist(8,0)
ResYDist(0,16)
ResYDist(16,56)
ResYDist(8,24)
YInterpolate(56,61,32,38,24)
YShift(32,44)
YShift(38,50)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="space">
/* VTTTalk Unicode 0x20 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="spade">
/* VTTTalk glyph 1106, char 0x2660 */
/* GUI generated Mon Nov 18 20:35:02 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,6)
YShift(0,12)
YDist(0,18,&gt;=3/2)
ResYDist(0,20)
YShift(20,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="sterling">
/* VTTTalk glyph 795, char 0xa3 */
/* GUI generated Sun Nov 17 23:51:08 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,28)
YShift(28,1)
ResYAnchor(11,3)
YShift(11,14)
YIPAnchor(11,5,0)
YShift(5,25)
ResYDist(5,6)
YShift(6,22)
ResYDist(11,18)
YShift(18,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="summation">
/* VTTTalk glyph 828, char 0x2211 */
/* GUI generated Mon Nov 18 00:24:38 2019 */

/* Y direction */
ResYAnchor(4,16)
ResYDist(4,0)
YInterpolate(0,8,2,4)
ResYDist(0,9)
YShift(9,1)
ResYDist(4,7)
YShift(7,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="sun">
/* VTTTalk glyph 1557, char 0x263c */
/* GUI generated Tue Dec  3 11:07:53 2019 */

/* Y direction */
YAnchor(15)
ResYDist(15,14)
ResYDist(14,46)
ResYDist(15,36)
YInterpolate(36,0,1,39,2,4,7,9,12,10,11,15)
YShift(0,31)
YShift(1,30)
YShift(39,32)
YShift(2,29)
YShift(4,27)
YShift(7,24)
YShift(9,22)
YShift(12,19)
YShift(10,21)
YShift(11,20)
ResYDist(36,37)
ResYDist(37,40)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="t">
/* VTTTalk glyph 327, char 0x74 (t) */
/* GUI generated Mon Nov 18 16:15:07 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,17)
ResYAnchor(6,6)
ResYDist(6,8)
YShift(6,10)
ResYDist(6,5)
YShift(5,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="tau">
/* VTTTalk glyph 587, char 0x3c4 */
/* GUI generated Mon Nov 18 19:27:17 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,13)
ResYAnchor(6,6)
ResYDist(6,5)
YShift(5,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="tbar">
/* VTTTalk glyph 328, char 0x167 */
/* GUI generated Fri Nov 15 22:29:47 2019 */

/* Y direction */
ResYAnchor(9,6)
YShift(9,5)
ResYDist(9,7)
ResYDist(9,12)
YShift(12,4)
ResYDist(12,13)
YShift(13,1)
ResYDist(13,16)
YShift(16,0)
ResYAnchor(27,11)
ResYDist(27,20)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="tcaron">
/* VTTTalk glyph 329, char 0x165 */
/* GUI generated Mon Nov 18 16:16:14 2019 */

/* Y direction */
ResYAnchor(4,11)
ResYDist(4,21)
ResYAnchor(10,6)
ResYDist(10,12)
YShift(10,14)
ResYDist(10,0)
ResYDist(0,1)
ResYDist(10,9)
YShift(9,17)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="theta">
/* VTTTalk glyph 575, char 0x3b8 */
/* GUI generated Sat Nov 16 09:33:12 2019 */

/* Y direction */

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="thorn">
/* VTTTalk glyph 313, char 0xfe */
/* GUI generated Fri Nov 15 22:21:44 2019 */

/* Y direction */
ResYAnchor(0,14)
ResYAnchor(1,0)
ResYAnchor(6,7)
YShift(6,4)
ResYDist(6,18)
YShift(18,20)
ResYAnchor(12,11)
YShift(12,15)
ResYDist(12,23)
YShift(23,21)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="three">
/* VTTTalk glyph 608, char 0x33 (3) */
/* GUI generated Mon Nov 18 19:31:57 2019 */

/* Y direction */
ResYAnchor(0,13)
ResYDist(0,7)
ResYAnchor(28,5)
YShift(28,25)
YInterpolate(0,14,35,34,15,28)
ResYDist(28,21)
YShift(21,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="threeeighths">
/* VTTTalk glyph 661, char 0x215c */
/* GUI generated Mon Nov 18 19:46:00 2019 */

/* Y direction */
ResYAnchor(24,17)
YShift(24,21)
ResYDist(24,18)
YShift(18,20)
ResYDist(18,13)
ResYDist(13,12)
ResYDist(12,7)
ResYDist(7,0)
YInterpolate(12,31,30,13)
ResYAnchor(41,19)
YInterpolate(41,37,39,24)
YShift(37,38)
YShift(39,40)
ResYDist(41,73)
ResYDist(73,77)
ResYDist(77,65)
YInterpolate(77,59,47,65)
ResYDist(65,69)
ResYDist(69,53)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="threequarters">
/* VTTTalk glyph 659, char 0xbe */
/* GUI generated Mon Nov 18 19:41:35 2019 */

/* Y direction */
ResYAnchor(24,17)
YShift(24,21)
ResYDist(24,18)
YShift(18,20)
ResYDist(18,13)
ResYDist(13,12)
ResYDist(12,7)
ResYDist(7,0)
YInterpolate(12,31,30,13)
ResYAnchor(53,18)
YInterpolate(24,39,37,53)
ResYDist(53,52)
YShift(52,41)
ResYDist(52,49)
YShift(49,45)
ResYDist(49,47)
YInterpolate(47,44,49)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="tildecomb">
/* VTTTalk glyph 1503, char 0x303 */
/* GUI generated Wed Apr 29 12:31:24 2020 */

/* Y direction */
YAnchor(0)
ResYDist(0,12)
ResYDist(0,16)
ResYDist(16,9)
ResYDist(0,22)
ResYDist(22,3)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="tildecomb.case">
/* VTTTalk glyph 1534, char 0xffff */
/* GUI generated Mon Nov 18 23:08:48 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,16)
ResYDist(16,9)
ResYDist(9,13)
ResYDist(0,22)
ResYDist(22,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="trademark">
/* VTTTalk glyph 1119, char 0x2122 */
/* GUI generated Mon Nov 18 01:11:15 2019 */

/* Y direction */
ResYAnchor(3,16)
ResYDist(3,2)
YShift(2,6)
ResYDist(2,0)
YShift(0,8)
YShift(0,16)
YInterpolate(16,19,12,18,22,3)
YShift(3,9)
YShift(9,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="two">
/* VTTTalk glyph 607, char 0x32 (2) */
/* GUI generated Sat Nov 16 09:45:21 2019 */

/* Y direction */
ResYAnchor(0,12)
ResYDist(0,19)
YShift(19,1)
YShift(19,18)
ResYAnchor(13,5)
YShift(13,10)
ResYDist(13,6)
YShift(6,9)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="u">
/* VTTTalk glyph 332, char 0x75 (u) */
/* GUI generated Mon Nov 18 16:17:20 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,19)
ResYDist(0,9)
YShift(9,12)
ResYAnchor(4,6)
YShift(4,13)
ResYAnchor(17,10)
ResYDist(17,16)
YShift(16,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uhorn">
/* VTTTalk glyph 340, char 0x1b0 */
/* GUI generated Mon Nov 18 16:21:06 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,9)
YShift(0,27)
ResYAnchor(4,6)
YShift(4,13)
YAnchor(14,6)
ResYDist(14,18)
ResYDist(14,22)
ResYAnchor(25,10)
ResYDist(25,24)
YShift(24,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="underscore">
/* VTTTalk glyph 694, char 0x5f (_) */
/* GUI generated Sun Nov 17 09:36:41 2019 */

/* Y direction */
YAnchor(1,8)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="underscore_bar_underscore.liga">
/* VTTTalk glyph 763, char 0xffff */
/* GUI generated Sun Nov 17 22:31:20 2019 */

/* Y direction */
ResYAnchor(1,18)
ResYDist(1,0)
YShift(1,6)
ResYAnchor(3,133)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="underscore_underscore.liga">
/* VTTTalk glyph 764, char 0xffff */
/* GUI generated Sun Nov 17 22:31:48 2019 */

/* Y direction */
ResYAnchor(1,18)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni00A0">
/* VTTTalk Unicode 0xa0 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni00B2">
/* VTTTalk glyph 648, char 0xb2 */
/* GUI generated Sun Nov 17 08:53:24 2019 */

/* Y direction */
ResYAnchor(11,3)
ResYDist(11,5)
ResYDist(5,17)
ResYDist(17,0)
YShift(17,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni00B3">
/* VTTTalk glyph 649, char 0xb3 */
/* GUI generated Mon Nov 18 19:36:56 2019 */

/* Y direction */
ResYAnchor(24,3)
ResYDist(24,18)
ResYDist(18,13)
ResYDist(13,12)
ResYDist(12,7)
ResYDist(7,0)
YInterpolate(12,31,30,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni00B9">
/* VTTTalk glyph 637, char 0xffff */
/* GUI generated Sat Nov 16 10:02:28 2019 */

/* Y direction */
ResYAnchor(6,2)
YShift(6,5)
ResYDist(6,3)
YShift(3,4)
ResYDist(3,1)
ResYDist(1,0)
YShift(1,8)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="uni0186">
/* VTTTalk glyph 1564, char 0x186 */
/* GUI generated Wed Apr 29 12:38:10 2020 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,3)
ResYDist(0,7)
YShift(7,4)
ResYAnchor(18,3)
YShift(18,16)
ResYDist(18,13)
YShift(13,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni018F">
/* VTTTalk glyph 136, char 0x18f */
/* GUI generated Mon Nov 18 15:35:45 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,17)
ResYAnchor(13,3)
ResYDist(13,8)
YIPAnchor(13,20,0)
YShift(20,2)
ResYDist(20,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0190">
/* VTTTalk glyph 1560, char 0x190 */
/* GUI generated Wed Apr 29 12:35:47 2020 */

/* Y direction */
ResYAnchor(0,3)
YShift(0,3)
ResYDist(0,7)
YShift(7,4)
ResYAnchor(30,9)
ResYDist(30,21)
YIPAnchor(30,13,0)
ResYDist(13,14)
YInterpolate(14,38,39,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni019D">
/* VTTTalk glyph 94, char 0x19d */
/* GUI generated Fri Nov 15 16:48:19 2019 */

/* Y direction */
ResYAnchor(5,2)
YShift(5,10)
ResYAnchor(12,8)
ResYDist(12,1)
ResYDist(1,0)
YInterpolate(12,8,14,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01B7">
/* VTTTalk glyph 1562, char 0x1b7 */
/* GUI generated Wed Apr 29 12:37:20 2020 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,6)
ResYAnchor(17,2)
ResYDist(17,16)
YShift(16,19)
YInterpolate(17,20,0)
ResYDist(20,13)
YShift(20,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01EA">
/* VTTTalk glyph 117, char 0x1ea */
/* GUI generated Mon Nov 18 15:28:37 2019 */

/* Y direction */
ResYAnchor(6,9)
YShift(6,14)
ResYDist(6,26)
ResYDist(6,21)
ResYDist(21,0)
YAnchor(10,3)
ResYDist(10,30)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni01EB">
/* VTTTalk glyph 307, char 0x1eb */
/* GUI generated Mon Nov 18 16:09:51 2019 */

/* Y direction */
ResYAnchor(6,11)
YShift(6,18)
ResYDist(6,30)
YDist(6,25,&gt;=)
ResYDist(25,0)
ResYAnchor(12,7)
ResYDist(12,36)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0237">
/* VTTTalk glyph 266, char 0x237 */
/* GUI generated Fri Nov 15 22:01:11 2019 */

/* Y direction */
ResYAnchor(0,15)
ResYDist(0,1)
ResYAnchor(8,6)
ResYDist(8,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0254">
/* VTTTalk glyph 1572, char 0x254 */
/* GUI generated Wed Apr 29 12:44:00 2020 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,3)
ResYDist(0,7)
YShift(7,4)
ResYAnchor(20,7)
YShift(20,17)
ResYDist(20,13)
YShift(13,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0259">
/* VTTTalk glyph 241, char 0x259 */
/* GUI generated Mon Nov 18 16:01:28 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,22)
ResYAnchor(16,7)
ResYDist(16,9)
YIPAnchor(0,5,16)
ResYDist(5,26)
YShift(26,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni026A">
/* VTTTalk glyph 1566, char 0x26a */
/* GUI generated Wed Apr 29 12:38:30 2020 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,1)
YShift(1,9)
ResYAnchor(5,6)
ResYDist(5,4)
YShift(4,8)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0272">
/* VTTTalk glyph 284, char 0x272 */
/* GUI generated Fri Nov 15 22:12:04 2019 */

/* Y direction */
ResYAnchor(0,15)
ResYDist(0,1)
ResYAnchor(6,6)
ResYAnchor(11,7)
YShift(11,9)
ResYDist(11,20)
YShift(20,22)
ResYAnchor(16,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0292">
/* VTTTalk glyph 1570, char 0x292 */
/* GUI generated Wed Apr 29 12:40:01 2020 */

/* Y direction */
ResYAnchor(17,6)
ResYDist(17,16)
ResYDist(17,0)
ResYDist(0,6)
YInterpolate(0,20,17)
ResYDist(20,13)
YShift(20,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni02A7">
/* VTTTalk glyph 1573, char 0x2a7 */
/* GUI generated Wed Apr 29 12:46:22 2020 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,37)
ResYAnchor(6,6)
ResYDist(6,8)
YShift(6,10)
ResYDist(6,5)
YShift(5,33)
ResYAnchor(13,1)
ResYDist(13,18)
ResYAnchor(26,15)
ResYDist(26,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni02BB">
/* VTTTalk glyph 1492, char 0x2bb */
/* GUI generated Mon Nov 18 21:33:41 2019 */

/* Y direction */
YAnchor(1)
ResYDist(1,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0302">
/* VTTTalk glyph 1499, char 0x302 */
/* GUI generated Mon Nov 18 13:10:43 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)
YShift(0,4)
YInterpolate(1,5,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0302.case">
/* VTTTalk glyph 1530, char 0xffff */
/* GUI generated Mon Nov 18 13:21:51 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)
YShift(0,4)
YInterpolate(1,5,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0304">
/* VTTTalk glyph 1504, char 0x304 */
/* GUI generated Mon Nov 18 13:11:40 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0304.case">
/* VTTTalk glyph 1535, char 0xffff */
/* GUI generated Mon Nov 18 13:23:08 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0306">
/* VTTTalk glyph 1501, char 0x306 */
/* GUI generated Mon Nov 18 21:35:37 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,9)
ResYDist(0,4)
YShift(4,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0306.case">
/* VTTTalk glyph 1532, char 0xffff */
/* GUI generated Mon Nov 18 21:40:15 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,7)
ResYDist(0,10)
YShift(10,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0307">
/* VTTTalk glyph 1495, char 0x307 */
/* GUI generated Mon Nov 18 13:07:13 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0307.case">
/* VTTTalk glyph 1526, char 0xffff */
/* GUI generated Mon Nov 18 13:21:08 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0308">
/* VTTTalk glyph 1494, char 0x308 */
/* GUI generated Mon Nov 18 13:07:02 2019 */

/* Y direction */
YAnchor(0)
YShift(0,12)
ResYDist(0,6)
YShift(6,18)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0308.case">
/* VTTTalk glyph 1525, char 0xffff */
/* GUI generated Mon Nov 18 13:21:02 2019 */

/* Y direction */
YAnchor(0)
YShift(0,12)
ResYDist(0,6)
YShift(6,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni030A">
/* VTTTalk glyph 1502, char 0x30a */
/* GUI generated Mon Nov 18 13:11:13 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,12)
ResYDist(12,16)
ResYDist(16,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030A.case">
/* VTTTalk glyph 1533, char 0xffff */
/* GUI generated Mon Nov 18 13:22:47 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,12)
ResYDist(12,16)
ResYDist(16,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni030B">
/* VTTTalk glyph 1498, char 0x30b */
/* GUI generated Mon Nov 18 13:10:30 2019 */

/* Y direction */
YAnchor(0)
YShift(0,4)
ResYDist(0,1)
YShift(1,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030B.case">
/* VTTTalk glyph 1529, char 0xffff */
/* GUI generated Mon Nov 18 13:21:33 2019 */

/* Y direction */
YAnchor(0)
YShift(0,4)
ResYDist(0,5)
YShift(5,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni030C">
/* VTTTalk glyph 1500, char 0x30c */
/* GUI generated Mon Nov 18 13:10:58 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)
YShift(1,5)
YInterpolate(0,3,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni030C.case">
/* VTTTalk glyph 1531, char 0xffff */
/* GUI generated Mon Nov 18 13:22:34 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)
YShift(1,5)
YInterpolate(0,3,5)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0312">
/* VTTTalk glyph 1506, char 0x312 */
/* GUI generated Mon Nov 18 13:12:09 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni031B">
/* VTTTalk glyph 1507, char 0x31b */
/* GUI generated Mon Nov 18 13:18:55 2019 */

/* Y direction */
YAnchor(1)
ResYDist(1,0)
ResYDist(1,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni031B.case">
/* VTTTalk glyph 1537, char 0xffff */
/* GUI generated Mon Nov 18 13:23:40 2019 */

/* Y direction */
YAnchor(1)
ResYDist(1,4)
ResYDist(1,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0326">
/* VTTTalk glyph 1509, char 0x326 */
/* GUI generated Mon Nov 18 13:19:06 2019 */

/* Y direction */
YAnchor(1)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0327">
/* VTTTalk glyph 1510, char 0x327 */
/* GUI generated Mon Nov 18 13:19:21 2019 */

/* Y direction */
YAnchor(6)
YDist(6,8,&gt;=)
ResYDist(8,5)
ResYDist(5,1)
ResYDist(1,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0328">
/* VTTTalk glyph 1511, char 0x328 */
/* GUI generated Mon Nov 18 21:38:01 2019 */

/* Y direction */
YAnchor(9,18)
YShift(9,6)
YShift(9,8)
ResYDist(9,14)
ResYDist(14,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0394">
/* VTTTalk glyph 537, char 0x394 */
/* GUI generated Sat Nov 16 08:47:10 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,5)
ResYAnchor(1,2)
YInterpolate(1,4,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni03A9">
/* VTTTalk glyph 557, char 0x3a9 */
/* GUI generated Sat Nov 16 08:53:38 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,15)
ResYDist(0,1)
YShift(1,13)
YShift(1,3)
YShift(3,11)
YShift(1,24)
YShift(24,16)
ResYAnchor(7,3)
ResYDist(7,20)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni03BC">
/* VTTTalk glyph 579, char 0x3bc */
/* GUI generated Sat Nov 16 09:36:13 2019 */

/* Y direction */
ResYAnchor(0,14)
ResYAnchor(1,7)
YShift(1,11)
ResYAnchor(14,10)
ResYDist (14,13)
YShift(13,12)
ResYAnchor(19,11)
YShift(19,17)
YShift(19,21)
ResYDist(19,6)
YShift(6,3)
YShift(6,9)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni03C2">
/* VTTTalk glyph 585, char 0x3c2 */
/* GUI generated Sat Nov 16 09:38:24 2019 */

/* Y direction */
ResYAnchor(0,15)
ResYDist(0,1)
ResYAnchor(7,11)
ResYDist(7,26)
ResYAnchor(13,7)
YShift(13,16)
ResYDist(13,20)
YShift(20,17)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni03CF">
/* VTTTalk glyph 567, char 0x3cf */
/* GUI generated Sat Nov 16 09:05:20 2019 */

/* Y direction */
ResYAnchor(0,8)
YDist(0,18,&gt;=3/2)
ResYAnchor(1,2)
YShift(1,8)
YInterpolate(0,3,1)
ResYDist(3,26)
YInterpolate(3,23,12,26)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni03D7">
/* VTTTalk glyph 604, char 0x3d7 */
/* GUI generated Mon Nov 18 19:30:50 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,15)
ResYAnchor(1,7)
YIPAnchor(0,4,1)
YInterpolate(4,21,10,7,1)
ResYAnchor(8,6)
ResYDist(8,9)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0402">
/* VTTTalk glyph 434, char 0x402 */
/* GUI generated Fri Nov 15 23:42:40 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,12)
ResYDist(12,13)
ResYAnchor(3,2)
ResYDist(3,2)
YShift(2,6)
YIPAnchor(3,7,0)
ResYDist(7,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0404">
/* VTTTalk glyph 426, char 0x404 */
/* GUI generated Mon Nov 18 16:37:23 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,20)
ResYAnchor(5,3)
YShift(5,8)
ResYDist(5,12)
YShift(12,9)
YInterpolate(0,15,5)
ResYDist(15,18)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0409">
/* VTTTalk glyph 423, char 0x409 */
/* GUI generated Fri Nov 15 23:33:04 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,1)
YShift(0,15)
ResYDist(15,24)
ResYAnchor(5,2)
ResYDist(5,17)
YIPAnchor(5,7,0)
ResYDist(7,23)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni040A">
/* VTTTalk glyph 424, char 0x40a */
/* GUI generated Fri Nov 15 23:33:25 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,15)
ResYDist(15,21)
ResYAnchor(1,2)
YShift(1,6)
YIPAnchor(1,7,3,0)
ResYDist(7,20)
ResYDist(3,17)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni040B">
/* VTTTalk glyph 431, char 0x40b */
/* GUI generated Mon Nov 18 16:38:23 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,13)
ResYAnchor(3,2)
ResYDist(3,2)
YShift(2,6)
YIPAnchor(0,7,3)
ResYDist(7,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni040F">
/* VTTTalk glyph 419, char 0x40f */
/* GUI generated Fri Nov 15 23:32:42 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,3)
YShift(0,8)
ResYDist(0,9)
ResYAnchor(1,2)
YShift(1,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0411">
/* VTTTalk glyph 387, char 0x411 */
/* GUI generated Fri Nov 15 23:16:27 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,17)
ResYAnchor(1,2)
ResYDist(1,4)
YIPAnchor(1,5,0)
ResYDist(5,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0413">
/* VTTTalk glyph 389, char 0x413 */
/* GUI generated Mon Nov 18 16:28:20 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
ResYDist(1,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0414">
/* VTTTalk glyph 392, char 0x414 */
/* GUI generated Fri Nov 15 23:20:50 2019 */

/* Y direction */
ResYAnchor(8,2)
ResYDist(8,25)
ResYAnchor(15,8)
ResYDist (15,0)
YShift(0,13)
ResYDist(15,22)
YShift(22,1)
YShift(22,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0414.loclBGR">
/* VTTTalk glyph 449, char 0xffff */
/* GUI generated Sat Nov 16 00:02:30 2019 */

/* Y direction */
ResYAnchor(3,2)
ResYAnchor(10,8)
ResYDist(10,2)
YShift(2,13)
YShift(13,5)
ResYDist(10,11)
YShift(11,8)
YInterpolate(3,12,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0416">
/* VTTTalk glyph 396, char 0x416 */
/* GUI generated Mon Nov 18 22:43:14 2019 */

/* Y direction */
ResYAnchor(31,2)
YShift(31,21)
ResYDist(21,20)
YShift(31,42)
ResYDist(42,43)
ResYAnchor(74,8)
YShift(74,0)
ResYDist(0,1)
YIPAnchor(74,33,31)
YShift(33,30)
ResYDist(33,72)
YShift(72,75)
YInterpolate(75,53,10,11,52,30)
YShift(74,63)
ResYDist(63,62)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0417">
/* VTTTalk glyph 397, char 0x417 */
/* GUI generated Mon Nov 18 16:35:04 2019 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,2)
ResYDist(0,6)
YShift(6,3)
ResYAnchor(29,3)
ResYDist(29,20)
YIPAnchor(0,14,29)
ResYDist(14,13)
YInterpolate(13,36,35,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0418">
/* VTTTalk glyph 398, char 0x418 */
/* GUI generated Fri Nov 15 23:28:04 2019 */

/* Y direction */
ResYAnchor(1,2)
YShift(1,6)
ResYAnchor(11,8)
YShift(11,8)
YInterpolate(11,3,9,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni041A">
/* VTTTalk glyph 401, char 0x41a */
/* GUI generated Fri Nov 15 23:28:42 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,34)
ResYDist(34,33)
ResYAnchor(1,2)
YInterpolate(0,3,1)
ResYDist(3,44)
YInterpolate(44,24,23,3)
YShift(1,13)
ResYDist(13,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni041B">
/* VTTTalk glyph 403, char 0x41b */
/* GUI generated Fri Nov 15 23:29:02 2019 */

/* Y direction */
ResYAnchor(6,2)
ResYDist(6,11)
ResYAnchor(8,8)
YShift(8,0)
ResYDist(0,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni041B.loclBGR">
/* VTTTalk glyph 450, char 0xffff */
/* GUI generated Sat Nov 16 00:03:45 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,4)
ResYAnchor(1,2)
YInterpolate(4,6,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni041F">
/* VTTTalk Unicode 0x41f */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,6) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,4)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0423">
/* VTTTalk glyph 411, char 0x423 */
/* GUI generated Fri Nov 15 23:30:21 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,1)
ResYAnchor(5,2)
YShift(5,10)
YInterpolate(0,4,11,8,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0424">
/* VTTTalk glyph 413, char 0x424 */
/* GUI generated Fri Nov 15 23:31:09 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYAnchor(6,3)
YInterpolate(0,1,5,6)
YShift(1,12)
ResYDist(1,21)
YShift(21,17)
YShift(5,8)
ResYDist(5,22)
YShift(22,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0424.loclBGR">
/* VTTTalk glyph 451, char 0xffff */
/* GUI generated Sat Nov 16 00:06:08 2019 */

/* Y direction */
ResYAnchor(1,9)
YDist(1,0,&gt;=3/2)
YShift(1,16)
ResYDist(1,28)
YShift(28,22)
ResYAnchor(7,3)
YDist(7,8,&gt;=3/2)
YShift(7,10)
ResYDist(7,29)
YShift(29,21)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0426">
/* VTTTalk glyph 416, char 0x426 */
/* GUI generated Fri Nov 15 23:31:57 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist (0,10)
ResYDist(0,3)
YShift(3,7)
ResYAnchor(1,2)
YShift(1,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0427">
/* VTTTalk glyph 415, char 0x427 */
/* GUI generated Fri Nov 15 23:31:50 2019 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,12)
ResYAnchor(13,8)
YIPAnchor(13,9,4)
ResYDist(9,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0428">
/* VTTTalk Unicode 0x428 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(0,3) /*perpendicular to the stroke*/
YShift(3,7) /*along top edge*/

/* Extreme Max */
YShift(1,10)

/* Extreme Max */
YShift(1,6)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0429">
/* VTTTalk glyph 418, char 0x429 */
/* GUI generated Fri Nov 15 23:32:30 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,13)
ResYDist(0,3)
YShift(3,7)
YShift(7,11)
ResYAnchor(1,2)
YShift(1,6)
YShift(6,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni042A">
/* VTTTalk Unicode 0x42a */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 3 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(3,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(3,5,0)
YAnchor(5)
ResYDist(5,16) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,17) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni042B">
/* VTTTalk Unicode 0x42b */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(1,3,0)
YAnchor(3)
ResYDist(3,16) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,17) /*perpendicular to the stroke*/

/* Contour #1 */
YShift(1,12) /* max */
YShift(0,11) /* min */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni042C">
/* VTTTalk Unicode 0x42c */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 8 */
/* CVT 1 2 */
/* Min and Max */
ResYAnchor(0,8)	/* min, CVT */
ResYAnchor(1,2)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(1,3,0)
YAnchor(3)
ResYDist(3,14) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,15) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni042D">
/* VTTTalk glyph 427, char 0x42d */
/* GUI generated Fri Nov 15 23:40:00 2019 */

/* Y direction */
ResYAnchor(0,9)
YShift(0,3)
ResYDist(0,7)
YShift(7,4)
ResYAnchor(21,3)
ResYDist(21,16)
YIPAnchor(0,12,21)
ResYDist(12,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni042E">
/* VTTTalk glyph 432, char 0x42e */
/* GUI generated Fri Nov 15 23:40:51 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
ResYAnchor(7,3)
ResYDist(7,25)
ResYAnchor(13,9)
ResYDist(13,19)
YIPAnchor(13,3,7)
ResYDist(3,17)
YInterpolate(3,10,28,22,17)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni042F">
/* VTTTalk glyph 433, char 0x42f */
/* GUI generated Mon Nov 18 16:40:01 2019 */

/* Y direction */
ResYAnchor(20,2)
YDist(20,34)
ResYAnchor(22,8)
YShift(22,0)
ResYDist(0,1)
YInterpolate(22,33,20)
ResYDist(33,23)
YInterpolate(23,11,12,33)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0431">
/* VTTTalk glyph 453, char 0x431 */
/* GUI generated Mon Nov 18 18:38:44 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,25)
ResYDist(0,8)
ResYDist(8,9)
YIPAnchor(0,19,8)
YShift(19,15)
ResYDist(19,31)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0431.loclSRB">
/* VTTTalk glyph 533, char 0xffff */
/* GUI generated Mon Nov 18 19:15:58 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,35)
ResYDist(0,17)
ResYDist(17,18)
YInterpolate(0,27,17)
ResYDist(27,41)
YInterpolate(41,6,7,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0432">
/* VTTTalk glyph 454, char 0x432 */
/* GUI generated Sat Nov 16 00:12:11 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,27)
ResYAnchor(1,6)
ResYDist(1,17)
YIPAnchor(0,18,1)
ResYDist(18,26)
YInterpolate(26,9,8,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0432.loclBGR">
/* VTTTalk glyph 515, char 0xffff */
/* GUI generated Mon Nov 18 18:58:02 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,19)
ResYAnchor(6,3)
ResYDist(6,34)
YInterpolate(0,27,6)
ResYDist(27,26)
YInterpolate(26,13,12,27)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0433">
/* VTTTalk Unicode 0x433 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(1,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,4) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0433.loclBGR">
/* VTTTalk glyph 516, char 0xffff */
/* GUI generated Mon Nov 18 18:59:33 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,37)
ResYAnchor(22,7)
ResYDist(22,15)
YInterpolate(0,3,34,31,30,8,9,12,25,22)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0434">
/* VTTTalk glyph 458, char 0x434 */
/* GUI generated Sat Nov 16 00:16:13 2019 */

/* Y direction */
ResYAnchor(6,6)
ResYDist(6,21)
ResYAnchor(13,10)
ResYDist(13,14)
YShift(14,11)
ResYDist(13,18)
YShift(18,2)
YShift(18,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0436">
/* VTTTalk glyph 462, char 0x436 */
/* GUI generated Mon Nov 18 22:47:29 2019 */

/* Y direction */
ResYAnchor(31,6)
YShift(31,21)
ResYDist(21,20)
YShift(31,42)
ResYDist(42,43)
ResYAnchor(74,10)
YShift(74,0)
ResYDist(0,1)
YIPAnchor(74,33,31)
YShift(33,30)
ResYDist(33,72)
YShift(72,75)
YInterpolate(75,53,10,11,52,30)
YShift(74,63)
ResYDist(63,62)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0436.loclBGR">
/* VTTTalk glyph 518, char 0xffff */
/* GUI generated Mon Nov 18 19:02:11 2019 */

/* Y direction */
ResYAnchor(21,6)
ResYDist(21,20)
YShift(21,44)
ResYDist(44,45)
ResYAnchor(32,2)
ResYAnchor(77,10)
YShift(77,0)
ResYDist(0,1)
YIPAnchor(77,31,21)
YShift(31,34)
ResYDist(31,78)
YShift(78,75)
YInterpolate(34,11,54,55,10,75)
YShift(77,65)
ResYDist(65,64)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0437">
/* VTTTalk glyph 463, char 0x437 */
/* GUI generated Mon Nov 18 18:44:16 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,3)
ResYDist(0,7)
YShift(7,4)
ResYAnchor(30,7)
ResYDist(30,23)
YIPAnchor(0,15,30)
ResYDist(15,14)
YInterpolate(14,37,36,15)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0437.loclBGR">
/* VTTTalk glyph 519, char 0xffff */
/* GUI generated Mon Nov 18 19:03:47 2019 */

/* Y direction */
ResYAnchor(29,7)
ResYDist(29,21)
ResYDist(29,0)
YShift(0,2)
ResYDist(0,6)
YShift(6,3)
YIPAnchor(0,15,29)
ResYDist(15,14)
YInterpolate(14,37,36,15)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0438">
/* VTTTalk glyph 464, char 0x438 */
/* GUI generated Sat Nov 16 00:19:55 2019 */

/* Y direction */
ResYAnchor(1,6)
YShift(1,6)
ResYAnchor(11,10)
YShift(11,8)
YInterpolate(8,4,10,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043A">
/* VTTTalk glyph 467, char 0x43a */
/* GUI generated Sat Nov 16 00:20:38 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,31)
ResYDist(31,30)
ResYAnchor(1,6)
YIPAnchor(0,3,1)
ResYDist(3,41)
YInterpolate(41,23,22,3)
YShift(1,13)
ResYDist(13,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043A.loclBGR">
/* VTTTalk glyph 523, char 0xffff */
/* GUI generated Sat Nov 16 01:56:25 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,31)
ResYDist(31,30)
ResYAnchor(1,0)
ResYAnchor(13,6)
ResYDist(13,14)
YIPAnchor(0,3,13)
ResYDist(3,41)
YInterpolate(41,23,22,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043B">
/* VTTTalk glyph 469, char 0x43b */
/* GUI generated Sat Nov 16 00:31:15 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,1)
YShift(0,9)
ResYAnchor(6,6)
ResYDist(6,11)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043B.loclBGR">
/* VTTTalk glyph 524, char 0xffff */
/* GUI generated Sat Nov 16 01:56:48 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,4)
ResYAnchor(1,6)
YInterpolate(4,6,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043C">
/* VTTTalk glyph 470, char 0x43c */
/* GUI generated Sat Nov 16 00:31:35 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,8)
ResYAnchor(2,6)
YShift(2,6)
YInterpolate(0,12,3,13,10,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni043D">
/* VTTTalk glyph 471, char 0x43d */
/* GUI generated Sat Nov 16 00:31:50 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,8)
ResYAnchor(1,6)
YShift(1,6)
YIPAnchor(1,3,0)
ResYDist(3,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni043F">
/* VTTTalk Unicode 0x43f */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(1,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(1,6) /*perpendicular to the stroke*/

/* Extreme Min */
YShift(0,4)

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0442">
/* VTTTalk Unicode 0x442 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 3 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(3,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/
YShift(2,6) /*along bottom edge*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0444">
/* VTTTalk glyph 479, char 0x444 */
/* GUI generated Mon Nov 18 18:46:40 2019 */

/* Y direction */
YAnchor(0,11)
YShift(0,21)
YShift(0,28)
YShift(28,25)
ResYDist(0,46)
YShift(46,37)
YAnchor(6,7)
YShift(6,15)
YShift(6,9)
YShift(9,12)
ResYDist(6,51)
YShift(51,32)
YAnchor(10,0)
YAnchor(27,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0446">
/* VTTTalk glyph 482, char 0x446 */
/* GUI generated Sat Nov 16 00:33:36 2019 */

/* Y direction */
ResYAnchor(0,10)
YDist(0,9,&gt;=1.5)
ResYDist(0,3)
YShift(3,7)
ResYAnchor(1,6)
YShift(1,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0446.loclBGR">
/* VTTTalk glyph 527, char 0xffff */
/* GUI generated Mon Nov 18 19:04:45 2019 */

/* Y direction */ 

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0447">
/* VTTTalk glyph 481, char 0x447 */
/* GUI generated Sat Nov 16 00:33:28 2019 */

/* Y direction */
ResYAnchor(3,6)
YShift(3,10)
ResYAnchor(11,10)
YIPAnchor(11,7,3)
ResYDist(7,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0448">
/* VTTTalk glyph 483, char 0x448 */
/* GUI generated Mon Nov 18 18:47:05 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,3)
YShift(3,7)
ResYAnchor(1,6)
YShift(1,6)
YShift(6,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0448.loclBGR">
/* VTTTalk glyph 528, char 0xffff */
/* GUI generated Mon Nov 18 19:06:28 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,29)
ResYDist(0,9)
YShift(9,17)
YShift(0,27)
YShift(27,24)
ResYAnchor(4,6)
YShift(4,13)
YShift(13,20)
ResYAnchor(22,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0449">
/* VTTTalk glyph 484, char 0x449 */
/* GUI generated Mon Nov 18 18:47:00 2019 */

/* Y direction */
ResYAnchor(0,10)
YDist(0,13,&gt;=3/2)
ResYDist(0,3)
YShift(3,7)
YShift(7,11)
ResYAnchor(1,6)
YShift(1,6)
YShift(6,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0449.loclBGR">
/* VTTTalk glyph 529, char 0xffff */
/* GUI generated Mon Nov 18 19:08:43 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,9)
YShift(0,33)
YShift(0,31)
YShift(31,28)
ResYAnchor(4,6)
YShift(4,13)
YShift(13,20)
ResYAnchor(26,10)
ResYDist(26,22)
ResYDist(26,24)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044A">
/* VTTTalk Unicode 0x44a */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 3 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(3,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
ResYDist(3,2) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
YInterpolate(3,14,0)
YAnchor(14)
ResYDist(14,5) /*perpendicular to the stroke*/

/* YDir: Stroke #2 */
ResYDist(0,15) /*perpendicular to the stroke*/

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044A.loclBGR">
/* VTTTalk glyph 531, char 0xffff */
/* GUI generated Mon Nov 18 19:10:57 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,18)
ResYAnchor(6,6)
ResYDist(6,5)
YInterpolate(0,24,6)
ResYDist(24,12)
YShift(12,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044B">
/* VTTTalk glyph 488, char 0x44b */
/* GUI generated Sat Nov 16 00:42:13 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,11)
ResYDist(0,17)
ResYAnchor(1,6)
YShift(1,12)
YInterpolate(1,16,0)
ResYDist(16,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni044C">
/* VTTTalk Unicode 0x44c */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(1,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(1,12,0)
YAnchor(12)
ResYDist(12,3) /*perpendicular to the stroke*/

/* YDir: Stroke #1 */
ResYDist(0,13) /*perpendicular to the stroke*/

Smooth()


    </glyphProgram>

    <glyphProgram name="uni044C.loclBGR">
/* VTTTalk glyph 530, char 0xffff */
/* GUI generated Mon Nov 18 19:09:56 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,16)
ResYAnchor(4,6)
YInterpolate(0,22,4)
ResYDist(22,10)
YShift(10,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044D">
/* VTTTalk glyph 493, char 0x44d */
/* GUI generated Mon Nov 18 18:49:50 2019 */

/* Y direction */
ResYAnchor(0,11)
YShift(0,3)
ResYDist(0,7)
YShift(7,4)
ResYAnchor(21,7)
ResYDist(21,16)
YInterpolate(0,11,21)
ResYDist(11,12)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni044E">
/* VTTTalk glyph 498, char 0x44e */
/* GUI generated Sat Nov 16 00:49:26 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
ResYAnchor(7,7)
ResYDist(7,25)
ResYAnchor(13,11)
ResYDist(13,19)
YIPAnchor(7,17,13)
ResYDist(17,3)
YInterpolate(17,10,28,22,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni044E.loclBGR">
/* VTTTalk glyph 532, char 0xffff */
/* GUI generated Mon Nov 18 19:13:44 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,19)
ResYAnchor(6,10)
ResYAnchor(7,0)
ResYAnchor(13,7)
ResYDist(13,25)
YIPAnchor(0,9,13)
ResYDist(9,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni044F">
/* VTTTalk glyph 499, char 0x44f */
/* GUI generated Mon Nov 18 18:51:40 2019 */

/* Y direction */
ResYAnchor(18,6)
ResYDist(18,34)
ResYAnchor(20,10)
YShift(20,0)
ResYDist(0,1)
YIPAnchor(18,33,20)
ResYDist(33,21)
YInterpolate(21,9,10,33)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0452">
/* VTTTalk glyph 500, char 0x452 */
/* GUI generated Sat Nov 16 00:57:43 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(5,0)
YIPAnchor(0,14,7,5)
YShift(14,11)
ResYDist(14,31)
YShift(31,33)
YShift(7,3)
ResYDist(7,10)
YShift(10,2)
ResYAnchor(22,15)
ResYDist(22,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0454">
/* VTTTalk glyph 492, char 0x454 */
/* GUI generated Mon Nov 18 18:49:06 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,22)
ResYAnchor(6,7)
YShift(6,9)
ResYDist(6,13)
YShift(13,10)
YInterpolate(0,16,6)
ResYDist(16,19)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0459">
/* VTTTalk glyph 489, char 0x459 */
/* GUI generated Sat Nov 16 00:42:27 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,1)
YShift(0,15)
ResYDist(15,24)
ResYAnchor(5,6)
ResYDist(5,17)
YIPAnchor(5,23,0)
ResYDist(23,7)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni045A">
/* VTTTalk Unicode 0x45a */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/* CVT 0 10 */
/* CVT 1 6 */
/* Min and Max */
ResYAnchor(0,10)	/* min, CVT */
ResYAnchor(1,6)	/* max, CVT */

/* CVTs - beginning */
/* CVTs - end */


/* YDir: Stroke #0 */
YInterpolate(1,17,0)
YAnchor(17)
ResYDist(17,3) /*perpendicular to the stroke*/
YShift(17,20) /*along bottom edge*/
YShift(3,7) /*along top edge*/

/* YDir: Stroke #1 */
YShift(0,15) /*stroke, CVT of another stroke*/
ResYDist(15,21) /*perpendicular to the stroke*/

/* Extreme Max */
YShift(1,6)

Smooth()


    </glyphProgram>

    <glyphProgram name="uni045B">
/* VTTTalk glyph 497, char 0x45b */
/* GUI generated Sat Nov 16 00:49:02 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,19)
ResYAnchor(5,0)
YIPAnchor(5,7,14,0)
YShift(7,3)
ResYDist(7,10)
YShift(10,2)
YShift(14,11)
ResYDist(14,23)
YShift(23,25)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni045F">
/* VTTTalk glyph 485, char 0x45f */
/* GUI generated Sat Nov 16 00:34:18 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,3)
YShift(0,8)
YDist(0,9,&gt;=1.5)
ResYAnchor(1,6)
YShift(1,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0490">
/* VTTTalk glyph 391, char 0x490 */
/* GUI generated Mon Nov 18 16:30:26 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(1,2)
ResYDist(1,3)
ResYDist(1,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0491">
/* VTTTalk glyph 457, char 0x491 */
/* GUI generated Sat Nov 16 00:12:29 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
ResYDist(1,3)
ResYDist(1,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0492">
/* VTTTalk glyph 435, char 0x492 */
/* GUI generated Mon Nov 18 16:40:54 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(5,2)
ResYDist(5,8)
YIPAnchor(0,9,5)
YShift(9,4)
ResYDist(9,12)
YShift(12,1)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0493">
/* VTTTalk glyph 501, char 0x493 */
/* GUI generated Sat Nov 16 00:57:53 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(5,6)
ResYDist(5,8)
YIPAnchor(0,9,5)
YShift(9,3)
ResYDist(9,12)
YShift(12,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni0496">
/* VTTTalk glyph 436, char 0x496 */
/* GUI generated Mon Nov 18 22:45:10 2019 */

/* Y direction */
ResYAnchor(31,2)
YShift(31,21)
ResYDist(21,20)
YShift(31,42)
ResYDist(42,43)
YAnchor(66)
ResYDist(66,62)
ResYAnchor(76,8)
ResYDist(76,64)
YShift(76,65)
YShift(76,0)
ResYDist(0,1)
YIPAnchor(76,33,31)
YShift(33,30)
ResYDist(33,74)
YShift(74,77)
YInterpolate(77,10,53,52,11,30)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0497">
/* VTTTalk glyph 502, char 0x497 */
/* GUI generated Mon Nov 18 18:54:42 2019 */

/* Y direction */
ResYAnchor(31,6)
YShift(31,21)
ResYDist(21,20)
YShift(31,42)
ResYDist(42,43)
ResYAnchor(75,10)
YShift(75,0)
ResYDist(0,1)
YIPAnchor(31,33,75)
YShift(33,30)
ResYDist(33,73)
YShift(73,76)
YInterpolate(76,53,10,11,52,30)
YShift(75,65)
ResYDist(65,62)
ResYDist(65,63)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni049A">
/* VTTTalk glyph 437, char 0x49a */
/* GUI generated Fri Nov 15 23:51:40 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,34)
YShift(0,36)
ResYDist(36,33)
ResYAnchor(1,2)
YIPAnchor(0,3,1)
ResYDist(3,44)
YInterpolate(44,24,23,3)
YShift(1,13)
ResYDist(13,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni049B">
/* VTTTalk glyph 503, char 0x49b */
/* GUI generated Sat Nov 16 01:10:23 2019 */

/* Y direction */
ResYAnchor(0,10)
YDist(0,32,&gt;=3/2)
YShift(0,33)
ResYDist(33,30)
ResYAnchor(1,6)
YIPAnchor(1,3,0)
ResYDist(3,41)
YInterpolate(41,23,22,3)
YShift(1,13)
ResYDist(13,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04A2">
/* VTTTalk glyph 438, char 0x4a2 */
/* GUI generated Fri Nov 15 23:52:33 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,10)
YShift(0,12)
ResYDist(12,7)
ResYAnchor(1,2)
YShift(1,6)
YIPAnchor(0,3,1)
ResYDist(3,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04A3">
/* VTTTalk glyph 504, char 0x4a3 */
/* GUI generated Sat Nov 16 01:12:36 2019 */

/* Y direction */
ResYAnchor(0,10)
YDist(0,10,&gt;=3/2)
YShift(0,12)
ResYDist(12,7)
ResYAnchor(1,6)
YShift(1,6)
YIPAnchor(1,3,0)
ResYDist(3,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04AF">
/* VTTTalk glyph 505, char 0x4af */
/* GUI generated Sat Nov 16 01:14:32 2019 */

/* Y direction */
ResYAnchor(2,6)
YShift(2,6)
ResYAnchor(7,10)
YShift(7,1)
YInterpolate(7,4,2)
ResYAnchor(8,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04B0">
/* VTTTalk glyph 440, char 0x4b0 */
/* GUI generated Fri Nov 15 23:52:58 2019 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,9)
ResYAnchor(15,8)
YIPAnchor(4,0,15)
YInterpolate(4,6,10,3,0)
YShift(0,14)
ResYDist(0,1)
YShift(1,11)

/* X direction */

Smooth()

 

    </glyphProgram>

    <glyphProgram name="uni04B1">
/* VTTTalk glyph 506, char 0x4b1 */
/* GUI generated Sat Nov 16 01:27:38 2019 */

/* Y direction */
ResYAnchor(1,10)
ResYDist(1,0)
ResYAnchor(4,6)
YShift(4,8)
YInterpolate(1,3,6,8)
YShift(3,9)
ResYAnchor(14,14)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04B2">
/* VTTTalk glyph 441, char 0x4b2 */
/* GUI generated Mon Nov 18 22:46:01 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,12)
ResYDist(12,9)
ResYDist(12,10)
ResYAnchor(2,2)
YShift(2,6)
YInterpolate(0,14,7,1,4,6)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04B3">
/* VTTTalk glyph 507, char 0x4b3 */
/* GUI generated Mon Nov 18 22:49:46 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,12)
ResYDist(12,9)
ResYDist(12,10)
ResYAnchor(2,6)
YShift(2,6)
YInterpolate(6,4,7,1,14,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04B6">
/* VTTTalk glyph 442, char 0x4b6 */
/* GUI generated Fri Nov 15 23:56:53 2019 */

/* Y direction */
ResYAnchor(4,2)
YShift(4,12)
ResYAnchor(18,8)
ResYDist(18,13)
ResYDist(18,15)
YIPAnchor(4,9,18)
ResYDist(9,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04B7">
/* VTTTalk glyph 508, char 0x4b7 */
/* GUI generated Sat Nov 16 01:34:56 2019 */

/* Y direction */
ResYAnchor(3,6)
YShift(3,10)
ResYAnchor(16,10)
ResYDist(16,11)
YDist(16,13,&gt;=3/2)
YIPAnchor(3,7,16)
ResYDist(7,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04BA">
/* VTTTalk glyph 443, char 0x4ba */
/* GUI generated Mon Nov 18 17:04:51 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,9)
ResYAnchor(1,2)
YIPAnchor(0,3,1)
ResYDist(3,14)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni04E8">
/* VTTTalk glyph 447, char 0x4e8 */
/* GUI generated Fri Nov 15 23:57:40 2019 */

/* Y direction */
ResYAnchor(0,9)
ResYDist(0,13)
ResYAnchor(4,3)
ResYDist(4,8)
YIPAnchor(0,10,4)
ResYDist(10,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni04E9">
/* VTTTalk glyph 513, char 0x4e9 */
/* GUI generated Sat Nov 16 01:35:31 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,19)
ResYAnchor(6,7)
ResYDist(6,12)
YIPAnchor(0,15,6)
ResYDist(15,23)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni0E3F">
/* VTTTalk glyph 770, char 0xe3f */
/* GUI generated Sun Nov 17 22:37:31 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,19)
YDist(0,21,&gt;=3/2)
ResYDist(0,34)
YShift(34,40)
ResYAnchor(1,2)
YDist(1,3,&gt;=3/2)
YShift(1,5)
ResYDist(1,24)
YShift(24,29)
YIPAnchor(0,25,1)
YShift(25,30)
ResYDist(25,33)
YShift(33,39)
YInterpolate(33,12,11,25)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni1E9E">
/* VTTTalk glyph 135, char 0x1e9e */
/* GUI generated Fri Nov 15 21:24:41 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(4,3)
ResYDist(4,30)
ResYAnchor(14,9)
ResYDist(14,20)
YInterpolate(14,23,11,8,28,6,4)
ResYDist(8,27)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2028">
/* VTTTalk Unicode 0x2028 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uni203E">
/* VTTTalk glyph 678, char 0x203e */
/* GUI generated Sun Nov 17 09:30:28 2019 */

/* Y direction */
YAnchor(0)
ResYDist(0,1)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2070">
/* VTTTalk glyph 646, char 0x2070 */
/* GUI generated Sun Nov 17 08:52:34 2019 */

/* Y direction */
ResYAnchor(6,3)
ResYDist(6,18)
ResYDist(18,12)
ResYDist(12,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2074">
/* VTTTalk glyph 640, char 0xffff */
/* GUI generated Sun Nov 17 08:47:59 2019 */

/* Y direction */
ResYAnchor(6,2)
ResYDist(6,8)
YShift(8,4)
YInterpolate(8,3,6)
ResYDist(8,11)
YShift(11,0)
ResYDist(11,12)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="uni2075">
/* VTTTalk glyph 651, char 0x2075 */
/* GUI generated Mon Nov 18 19:37:51 2019 */

/* Y direction */
ResYAnchor(14,2)
ResYDist(14,17)
ResYDist(17,20)
ResYDist(20,10)
ResYDist(10,6)
ResYDist(6,0)
YInterpolate(6,3,13,10)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2076">
/* VTTTalk glyph 652, char 0x2076 */
/* GUI generated Mon Nov 18 19:38:43 2019 */

/* Y direction */
ResYAnchor(7,3)
ResYDist(7,8)
ResYDist(8,15)
YShift(15,11)
ResYDist(15,25)
ResYDist(25,21)
ResYDist(21,0)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2077">
/* VTTTalk glyph 643, char 0xffff */
/* GUI generated Sun Nov 17 08:49:58 2019 */

/* Y direction */
ResYAnchor(5,2)
ResYDist(5,2)
ResYDist(2,0)
YInterpolate(0,4,2)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="uni2078">
/* VTTTalk glyph 644, char 0xffff */
/* GUI generated Sun Nov 17 08:51:29 2019 */

/* Y direction */
ResYAnchor(12,3)
ResYDist(12,28)
ResYDist(28,24)
ResYDist(24,36)
YInterpolate(36,6,18,24)
ResYDist(36,32)
ResYDist(32,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2079">
/* VTTTalk glyph 645, char 0xffff */
/* GUI generated Sun Nov 17 08:52:25 2019 */

/* Y direction */
ResYAnchor(14,3)
ResYDist(14,25)
ResYDist(25,21)
ResYDist(21,8)
YShift(8,5)
ResYDist(8,1)
ResYDist(1,0)

/* X direction */

Smooth()



    </glyphProgram>

    <glyphProgram name="uni207F">
/* VTTTalk glyph 385, char 0x207f */
/* GUI generated Fri Nov 15 23:15:57 2019 */

/* Y direction */
ResYAnchor(1,2)
ResYDist(1,0)
YShift(0,12)
ResYAnchor(7,3)
YShift(7,3)
ResYDist(7,15)
YShift(15,17)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20A0">
/* VTTTalk glyph 778, char 0x20a0 */
/* GUI generated Mon Nov 18 07:24:17 2019 */

/* Y direction */
ResYAnchor(0,18)
ResYDist(0,22)
YInterpolate(0,20,22)
ResYDist(20,1)
ResYDist(22,23)
ResYDist(0,29)
YInterpolate(29,28,25,23)
ResYAnchor(8,3)
YShift(8,11)
ResYDist(8,14)
YShift(14,12)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20A6">
/* VTTTalk glyph 788, char 0x20a6 */
/* GUI generated Sun Nov 17 23:43:52 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,16)
ResYAnchor(5,2)
YShift(5,9)
YIPAnchor(9,3,0)
YInterpolate(9,21,3)
YInterpolate(3,25,0)
ResYDist(3,2)
YShift(2,18)
YShift(18,27)
YShift(27,14)
YShift(3,22)
YShift(22,7)
YShift(7,11)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20A8">
/* VTTTalk glyph 792, char 0x20a8 */
/* GUI generated Sun Nov 17 23:47:57 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,9)
ResYAnchor(1,2)
ResYDist(1,16)
YIPAnchor(0,17,1)
ResYDist (17,13)
YInterpolate(13,10,7,17)
ResYAnchor(24,11)
ResYDist(24,29)
ResYAnchor(38,7)
ResYDist(38,43)
YInterpolate(24,31,50,33,48,36,45,38)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20A9">
/* VTTTalk glyph 798, char 0x20a9 */
/* GUI generated Sun Nov 17 23:54:49 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,20)
ResYAnchor(5,2)
YShift(5,13)
YIPAnchor(0,3,13)
YInterpolate(0,32,28,3)
YInterpolate(3,24,9,13)
ResYDist(3,2)
YShift(2,30)
YShift(30,21)
YShift(21,34)
YShift(34,17)
YShift(3,8)
YShift(8,26)
YShift(26,12)
YShift(12,16)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20AA">
/* VTTTalk glyph 794, char 0x20aa */
/* GUI generated Sun Nov 17 23:50:05 2019 */

/* Y direction */
ResYAnchor(8,8)
YShift(8,0)
ResYDist(0,3)
YDist(3,12,&gt;=1.5)
ResYDist(8,9)
YShift(9,5)
ResYDist(9,14)
YDist(14,1,&gt;=1.5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20AD">
/* VTTTalk glyph 783, char 0x20ad */
/* GUI generated Sun Nov 17 23:10:48 2019 */

/* Y direction */
ResYAnchor(0,8)
YShift(0,21)
ResYAnchor(5,2)
YShift(5,12)
YIPAnchor(5,4,0)
YInterpolate(4,7,0)
YShift(4,16)
ResYDist(4,1)
YShift(1,19)
ResYDist(7,25)
YInterpolate(25,22,7)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20AE">
/* VTTTalk glyph 797, char 0x20ae */
/* GUI generated Sun Nov 17 23:52:58 2019 */

/* Y direction */
ResYAnchor(9,2)
ResYDist(9,8)
YShift(8,12)
ResYAnchor(22,8)
YInterpolate(22,2,3,8)
YShift(2,17)
ResYDist(2,23)
YShift(23,20)
YShift(3,16)
ResYDist(3,6)
YShift(6,13)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20B1">
/* VTTTalk glyph 790, char 0x20b1 */
/* GUI generated Mon Nov 18 14:10:13 2019 */

/* Y direction */
ResYAnchor(0,12)
ResYAnchor(9,4)
ResYDist(9,30)
YIPAnchor(0,31,9)
YInterpolate(0,37,31)
YShift(37,6)
YShift(37,16)
YShift(31,7)
YShift(31,13)
ResYDist(31,38)
YShift(38,3)
YShift(38,20)
ResYDist(38,44)
YShift(44,2)
YShift(44,23)
YDist(44,45,&gt;=)
ResYDist(45,27)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B2">
/* VTTTalk glyph 781, char 0x20b2 */
/* GUI generated Sun Nov 17 23:03:59 2019 */

/* Y direction */
ResYAnchor(9,3)
YShift(9,6)
YDist(9,8,&gt;=1.5)
YShift(9,12)
ResYDist(9,15)
YShift(15,13)
YShift(15,26)
ResYAnchor(21,9)
YShift(21,1)
YDist(21,22,&gt;=1.5)
YInterpolate(21,17,9)
ResYDist(17,34)
ResYDist(21,30)
YShift(30,25)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B4">
/* VTTTalk glyph 782, char 0x20b4 */
/* GUI generated Mon Nov 18 22:58:18 2019 */

/* Y direction */
ResYAnchor(18,3)
YShift(18,15)
ResYDist(18,11)
YShift(11,14)
ResYAnchor(43,9)
ResYDist(43,36)
YIPAnchor(43,1,5,18)
YInterpolate(43,0,1)
YInterpolate(1,4,5)
YShift(0,30)
YShift(1,29)
YShift(4,26)
YShift(5,25)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B5">
/* VTTTalk glyph 771, char 0x20b5 */
/* GUI generated Sun Nov 17 22:38:40 2019 */

/* Y direction */
ResYAnchor(1,9)
YDist(1,0,&gt;=1.5)
YShift(1,23)
ResYDist(1,27)
YShift(27,16)
ResYAnchor(6,3)
YDist(6,7,&gt;=1.5)
YShift(6,9)
YShift(9,12)
ResYDist(6,28)
YShift(28,15)
YShift(15,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B8">
/* VTTTalk glyph 796, char 0x20b8 */
/* GUI generated Sun Nov 17 23:52:22 2019 */

/* Y direction */
ResYAnchor(1,2)
ResYDist(1,0)
YDist(1,7)
ResYDist(7,6)
YShift(6,10)
ResYAnchor(4,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20B9">
/* VTTTalk glyph 793, char 0x20b9 */
/* GUI generated Sun Nov 17 23:49:08 2019 */

/* Y direction */
ResYAnchor(12,2)
ResYDist(12,11)
YShift(11,15)
ResYDist(11,7)
YShift(7,18)
ResYDist(7,6)
YShift(6,21)
ResYDist(6,1)
ResYDist(1,0)
YInterpolate(1,23,0)
ResYAnchor(24,8)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20BA">
/* VTTTalk glyph 786, char 0x20ba */
/* GUI generated Sun Nov 17 23:35:20 2019 */

/* Y direction */
ResYAnchor(7,3)
ResYAnchor(28,9)
YShift(28,25)
YInterpolate(28,13,12,7)
YShift(13,2)
ResYDist(13,16)
YShift(16,32)
YShift(12,3)
ResYDist(12,9)
YShift(9,6)
ResYDist(28,21)
YShift(21,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20BC">
/* VTTTalk glyph 787, char 0x20bc */
/* GUI generated Sun Nov 17 23:42:30 2019 */

/* Y direction */
YAnchor(0,8)
YShift(0,15)
YShift(15,10)
YAnchor(4,2)
YInterpolate(0,3,4)
YShift(3,6)
ResYDist(3,16)
YShift(16,13)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni20BD">
/* VTTTalk glyph 791, char 0x20bd */
/* GUI generated Mon Nov 18 07:33:04 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,21)
YShift(21,2)
ResYDist(21,18)
YShift(18,3)
YDist(18,6,&gt;=1.5)
YShift(6,17)
ResYDist(6,7)
YShift(7,25)
YAnchor(9,2)
ResYDist(9,24)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni20BE">
/* VTTTalk glyph 784, char 0x20be */
/* GUI generated Sun Nov 17 23:28:46 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYDist(0,1)
YShift(1,44)
ResYAnchor(14,3)
YShift(14,9)
YShift(14,19)
YDist(14,10,&gt;=3/2)
YShift(10,17)
YIPAnchor(0,24,14)
YShift(24,28)
YShift(28,35)
ResYDist(14,32)
YShift(32,27)
YShift(32,37)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2105">
/* VTTTalk glyph 1120, char 0x2105 */
/* GUI generated Mon Nov 18 20:49:14 2019 */

/* Y direction */
ResYAnchor(6,17)
ResYDist(6,12)
ResYDist(12,18)
ResYDist(18,0)
ResYDist(0,24)
ResYDist(24,23)
ResYAnchor(27,19)
ResYDist(27,39)
ResYDist(39,45)
ResYDist(45,33)
ResYDist(33,26)
ResYDist(26,25)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2113">
/* VTTTalk glyph 1127, char 0x2113 */
/* GUI generated Mon Nov 18 20:51:10 2019 */

/* Y direction */
ResYAnchor(0,18)
ResYDist(0,22)
ResYAnchor(13,17)
ResYDist(13,31)
YIPAnchor(0,6,13)
ResYDist(6,5)
YShift(5,3)
YShift(3,19)
YShift(6,8)
YShift(8,25)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2116">
/* VTTTalk glyph 1129, char 0x2116 */
/* GUI generated Mon Nov 18 01:14:58 2019 */

/* Y direction */
ResYAnchor(2,16)
YShift(2,6)
ResYDist(2,7)
YShift(7,11)
YInterpolate(2,10,4,7)
ResYAnchor(36,18)
ResYDist(36,37)
ResYDist(37,12)
ResYDist(12,24)
ResYDist(24,30)
ResYDist(30,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2117">
/* VTTTalk glyph 1118, char 0x2117 */
/* GUI generated Mon Nov 18 08:01:22 2019 */

/* Y direction */
ResYAnchor(0,18)
ResYDist(0,12)
ResYAnchor(6,16)
ResYDist(6,18)
YIPAnchor(6,25,33,24,0)
ResYDist(25,36)
ResYDist(33,37)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni21E1">
/* VTTTalk glyph 1582, char 0x21e1 */
/* GUI generated Wed Apr 29 12:53:04 2020 */

/* Y direction */
ResYAnchor(1,17)
ResYAnchor(20,18)
YIPAnchor(20,17,1)
YInterpolate(20,21,17)
YInterpolate(17,4,11,8,1)
ResYDist(21,16)
ResYDist(17,12)
ResYDist(8,13)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni21E3">
/* VTTTalk glyph 1583, char 0x21e3 */
/* GUI generated Wed Apr 29 12:54:12 2020 */

/* Y direction */
ResYAnchor(0,17)
ResYDist(0,23)
YInterpolate(23,16,13,20,7,3,0)
ResYDist(16,11)
ResYDist(7,8)
ResYDist(3,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2262">
/* VTTTalk glyph 1552, char 0x2262 */
/* GUI generated Tue Dec  3 11:05:36 2019 */

/* Y direction */
ResYAnchor(0,8)
YAnchor(15)
YShift(15,19)
ResYDist(15,14)
YShift(14,22)
ResYDist(14,11)
YShift(11,23)
ResYDist(11,10)
YShift(10,26)
ResYDist(10,7)
YShift(7,27)
ResYDist(7,6)
YShift(6,30)
ResYDist(6,3)
YShift(3,31)
ResYDist(3,2)
YShift(2,34)
ResYAnchor(17,2)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2263">
/* VTTTalk glyph 1553, char 0x2263 */
/* GUI generated Tue Dec  3 11:04:47 2019 */

/* Y direction */
YAnchor(1)
ResYDist(1,0)
ResYDist(0,5)
ResYDist(5,4)
ResYDist(4,9)
ResYDist(9,8)
ResYDist(8,13)
ResYDist(13,12)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2619">
/* VTTTalk glyph 1103, char 0x2619 */
/* GUI generated Mon Nov 18 20:33:52 2019 */

/* Y direction */
YAnchor(15)
YShift(15,18)
ResYDist(15,22)
YShift(22,19)
ResYDist(15,30)
YShift(30,33)
YInterpolate(30,54,0,29,58,47,24,13,9,10,15)
ResYDist(13,4)
ResYDist(30,37)
YShift(37,34)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2713">
/* VTTTalk glyph 1110, char 0x2713 */
/* GUI generated Mon Nov 18 01:00:07 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(6,2)
YIPAnchor(0,2,6)
YInterpolate(0,4,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni2767">
/* VTTTalk glyph 1111, char 0x2767 */
/* GUI generated Mon Nov 18 20:40:21 2019 */

/* Y direction */
YAnchor(15)
YShift(15,12)
ResYDist(15,8)
YShift(8,11)
ResYDist(15,30)
YShift(30,62)
YInterpolate(30,41,42,0,1,37,48,6,17,21,20,15)
ResYDist(17,26)
ResYDist(30,58)
YShift(58,61)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni276C">
/* VTTTalk glyph 687, char 0x276c */
/* GUI generated Mon Nov 18 19:58:39 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(4,2)
YInterpolate(0,1,6,2,5,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="uni276D">
/* VTTTalk glyph 688, char 0x276d */
/* GUI generated Sun Nov 17 09:35:12 2019 */

/* Y direction */
ResYAnchor(3,2)
ResYAnchor(7,18)
YInterpolate(7,6,1,2,5,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni276E">
/* VTTTalk glyph 1548, char 0x276e */
/* GUI generated Tue Dec  3 11:02:48 2019 */

/* Y direction */
ResYAnchor(0,8)
ResYAnchor(3,2)
YInterpolate(0,1,6,2,5,3)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni276F">
/* VTTTalk glyph 1549, char 0x276f */
/* GUI generated Tue Dec  3 11:03:11 2019 */

/* Y direction */
ResYAnchor(4,2)
ResYAnchor(7,8)
YInterpolate(7,6,1,2,5,4)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uni2800">
/* VTTTalk Unicode 0x2800 */
/* ACT generated Fri Nov 15 15:37:24 2019 */

/* Auto-Hinting Light */

/* ***Settings*** */
/* ModeHinting = LightLatin */
/* ToAnchorBottom = true */


/*Auto-Hinting Light is not applied: Empty glyph or glyph with one point*/

    </glyphProgram>

    <glyphProgram name="uniA774A774A774.liga">
/* VTTTalk glyph 379, char 0xffff */
/* GUI generated Fri Nov 15 22:55:38 2019 */

/* Y direction */
ResYAnchor(16,8)
YShift(16,12)
YShift(12,8)
YShift(8,4)
YShift(4,0)
YShift(0,56)
ResYAnchor(25,2)
YIPAnchor(25,22,19,16)
ResYDist(22,24)
YShift(24,27)
YShift(27,31)
YShift(31,35)
YShift(35,39)
YShift(39,43)
YShift(43,47)
YShift(22,79)
YShift(79,70)
YShift(70,75)
YShift(75,62)
YShift(62,67)
YShift(67,50)
ResYDist(19,17)
YShift(17,14)
YShift(14,10)
YShift(10,6)
YShift(6,2)
YShift(2,58)
YShift(58,54)
YShift(19,76)
YShift(76,71)
YShift(71,72)
YShift(72,63)
YShift(63,64)
YShift(64,51)
YShift(25,29)
YShift(29,33)
YShift(33,37)
YShift(37,41)
YShift(41,45)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uniA774A774A774A774.liga">
/* VTTTalk glyph 380, char 0xffff */
/* GUI generated Fri Nov 15 22:59:58 2019 */

/* Y direction */
ResYAnchor(24,8)
YShift(24,20)
YShift(20,16)
YShift(16,12)
YShift(12,8)
YShift(8,4)
YShift(4,0)
YShift(0,72)
ResYAnchor(33,2)
YIPAnchor(24,27,30,33)
ResYDist(27,25)
YShift(25,22)
YShift(22,18)
YShift(18,14)
YShift(14,10)
YShift(10,6)
YShift(6,2)
YShift(2,74)
YShift(74,70)
YShift(27,100)
YShift(100,87)
YShift(87,88)
YShift(88,93)
YShift(93,96)
YShift(96,77)
YShift(77,80)
YShift(80,67)
ResYDist(30,32)
YShift(32,35)
YShift(35,39)
YShift(39,43)
YShift(43,47)
YShift(47,51)
YShift(51,55)
YShift(55,59)
YShift(59,63)
YShift(30,103)
YShift(103,86)
YShift(86,91)
YShift(91,92)
YShift(92,99)
YShift(99,76)
YShift(76,83)
YShift(83,66)
YShift(33,37)
YShift(37,41)
YShift(41,45)
YShift(45,49)
YShift(49,53)
YShift(53,57)
YShift(57,61)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="uogonek">
/* VTTTalk glyph 348, char 0x173 */
/* GUI generated Mon Nov 18 16:23:20 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,9)
YShift(0,37)
ResYAnchor(4,6)
YShift(4,13)
ResYAnchor(17,10)
YShift(17,36)
ResYDist(17,16)
YShift(16,15)
YDist(17,23,&gt;=)
ResYDist(23,28)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="upsilon">
/* VTTTalk glyph 588, char 0x3c5 */
/* GUI generated Mon Nov 18 19:28:13 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,15)
ResYAnchor(8,6)
ResYDist(8,6)
YShift(8,18)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="v">
/* VTTTalk glyph 351, char 0x76 (v) */
/* GUI generated Fri Nov 15 22:36:48 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
YShift(1,6)
YInterpolate(6,4,0)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="w">
/* VTTTalk glyph 352, char 0x77 (w) */
/* GUI generated Fri Nov 15 22:37:02 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,12)
ResYAnchor(1,6)
YShift(1,6)
YShift(6,10)
YInterpolate(0,7,4,13,10)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="w_w_w.liga">
/* VTTTalk glyph 382, char 0xffff */
/* GUI generated Fri Nov 15 23:12:21 2019 */

/* Y direction */
YAnchor(16,10)
YShift(16,12)
YShift(12,8)
YShift(8,4)
YShift(4,0)
YShift(0,44)
ResYAnchor(17,6)
YShift(17,41)
YInterpolate(16,19,14,21,17)
YShift(19,23)
YShift(23,27)
YShift(27,31)
YShift(31,35)
YShift(35,39)
YShift(14,10)
YShift(10,6)
YShift(6,2)
YShift(2,46)
YShift(21,25)
YShift(25,29)
YShift(29,33)
YShift(33,37)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="x">
/* VTTTalk glyph 357, char 0x78 (x) */
/* GUI generated Fri Nov 15 22:37:27 2019 */

/* Y direction */
ResYAnchor(0,10)
YShift(0,9)
ResYAnchor(2,6)
YShift(2,6)
YInterpolate(9,10,1,7,4,2)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="xi">
/* VTTTalk glyph 581, char 0x3be */
/* GUI generated Mon Nov 18 19:25:14 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,28)
ResYAnchor(15,0)
ResYDist(15,14)
YShift(14,17)
YIPAnchor(15,22,0)
ResYDist(22,23)
YInterpolate(23,5,6,22)
ResYAnchor(34,15)
ResYDist(34,35)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="y">
/* VTTTalk glyph 358, char 0x79 (y) */
/* GUI generated Fri Nov 15 22:37:43 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYAnchor(1,6)
YShift(1,6)
YInterpolate(6,3,7,0)
ResYAnchor(12,15)
ResYDist(12,13)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="yen">
/* VTTTalk glyph 799, char 0xa5 */
/* GUI generated Mon Nov 18 22:59:30 2019 */

/* Y direction */
ResYAnchor(7,4)
YShift(7,11)
ResYAnchor(22,12)
ResYDist(22,0)
YShift(0,19)
ResYDist(0,1)
YShift(1,18)
ResYDist(1,4)
YShift(4,15)
ResYDist(4,5)
YShift(5,14)
YInterpolate(11,9,5)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="z">
/* VTTTalk glyph 367, char 0x7a (z) */
/* GUI generated Fri Nov 15 22:39:24 2019 */

/* Y direction */
ResYAnchor(0,10)
ResYDist(0,7)
YShift(7,1)
ResYAnchor(4,6)
ResYDist(4,3)
YShift(3,6)

/* X direction */

Smooth()


    </glyphProgram>

    <glyphProgram name="zero">
/* VTTTalk glyph 605, char 0x30 (0) */
/* GUI generated Sat Nov 16 09:44:06 2019 */

/* Y direction */
ResYAnchor(0,11)
ResYDist(0,8)
ResYAnchor(4,3)
ResYDist(4,12)
YInterpolate(0,16,22,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="zero.zero">
/* VTTTalk glyph 615, char 0xffff */
/* GUI generated Mon Nov 18 22:52:33 2019 */

/* Y direction */
ResYAnchor(0,19)
ResYDist(0,15)
ResYAnchor(4,17)
ResYDist(4,13)
YInterpolate(0,20,10,19,11,4)

/* X direction */

Smooth()

    </glyphProgram>

    <glyphProgram name="zeta">
/* VTTTalk glyph 573, char 0x3b6 */
/* GUI generated Sat Nov 16 09:32:29 2019 */

/* Y direction */
ResYAnchor(0,15)
ResYDist(0,1)
ResYAnchor(6,11)
ResYDist(6,22)
ResYAnchor(14,0)
ResYDist(14,13)
YShift(13,11)
YShift(13,16)

/* X direction */

Smooth()


    </glyphProgram>

  </TSI3>

  <TSI5>
    <glyphgroup name=".notdef" value="1"/>
    <glyphgroup name="A" value="2"/>
    <glyphgroup name="AE" value="2"/>
    <glyphgroup name="AEacute" value="2"/>
    <glyphgroup name="Aacute" value="2"/>
    <glyphgroup name="Abreve" value="2"/>
    <glyphgroup name="Acircumflex" value="2"/>
    <glyphgroup name="Adieresis" value="2"/>
    <glyphgroup name="Agrave" value="2"/>
    <glyphgroup name="Alpha" value="2"/>
    <glyphgroup name="Alphatonos" value="2"/>
    <glyphgroup name="Amacron" value="2"/>
    <glyphgroup name="Aogonek" value="2"/>
    <glyphgroup name="Aring" value="2"/>
    <glyphgroup name="Aringacute" value="2"/>
    <glyphgroup name="Atilde" value="2"/>
    <glyphgroup name="B" value="2"/>
    <glyphgroup name="Beta" value="2"/>
    <glyphgroup name="C" value="2"/>
    <glyphgroup name="CR" value="0"/>
    <glyphgroup name="Cacute" value="2"/>
    <glyphgroup name="Cacute.loclPLK" value="1"/>
    <glyphgroup name="Ccaron" value="2"/>
    <glyphgroup name="Ccedilla" value="2"/>
    <glyphgroup name="Ccircumflex" value="2"/>
    <glyphgroup name="Cdotaccent" value="2"/>
    <glyphgroup name="Chi" value="2"/>
    <glyphgroup name="D" value="2"/>
    <glyphgroup name="Dcaron" value="2"/>
    <glyphgroup name="Dcroat" value="2"/>
    <glyphgroup name="E" value="2"/>
    <glyphgroup name="Eacute" value="2"/>
    <glyphgroup name="Ebreve" value="2"/>
    <glyphgroup name="Ecaron" value="2"/>
    <glyphgroup name="Ecircumflex" value="2"/>
    <glyphgroup name="Edieresis" value="2"/>
    <glyphgroup name="Edotaccent" value="2"/>
    <glyphgroup name="Egrave" value="2"/>
    <glyphgroup name="Emacron" value="2"/>
    <glyphgroup name="Eng" value="2"/>
    <glyphgroup name="Eogonek" value="2"/>
    <glyphgroup name="Epsilon" value="2"/>
    <glyphgroup name="Epsilontonos" value="2"/>
    <glyphgroup name="Eta" value="2"/>
    <glyphgroup name="Etatonos" value="2"/>
    <glyphgroup name="Eth" value="2"/>
    <glyphgroup name="Euro" value="4"/>
    <glyphgroup name="F" value="2"/>
    <glyphgroup name="G" value="2"/>
    <glyphgroup name="Gamma" value="2"/>
    <glyphgroup name="Gbreve" value="2"/>
    <glyphgroup name="Gcaron" value="2"/>
    <glyphgroup name="Gcircumflex" value="2"/>
    <glyphgroup name="Gdotaccent" value="2"/>
    <glyphgroup name="H" value="2"/>
    <glyphgroup name="Hbar" value="2"/>
    <glyphgroup name="Hcircumflex" value="2"/>
    <glyphgroup name="I" value="2"/>
    <glyphgroup name="IJ" value="2"/>
    <glyphgroup name="Iacute" value="2"/>
    <glyphgroup name="Iacute_J.loclNLD" value="1"/>
    <glyphgroup name="Ibreve" value="2"/>
    <glyphgroup name="Icircumflex" value="2"/>
    <glyphgroup name="Idieresis" value="2"/>
    <glyphgroup name="Idotaccent" value="2"/>
    <glyphgroup name="Igrave" value="2"/>
    <glyphgroup name="Imacron" value="2"/>
    <glyphgroup name="Iogonek" value="2"/>
    <glyphgroup name="Iota" value="2"/>
    <glyphgroup name="Iotadieresis" value="2"/>
    <glyphgroup name="Iotatonos" value="2"/>
    <glyphgroup name="Itilde" value="2"/>
    <glyphgroup name="J" value="2"/>
    <glyphgroup name="Jcircumflex" value="2"/>
    <glyphgroup name="K" value="2"/>
    <glyphgroup name="Kappa" value="2"/>
    <glyphgroup name="L" value="2"/>
    <glyphgroup name="LIG" value="1"/>
    <glyphgroup name="Lacute" value="2"/>
    <glyphgroup name="Lambda" value="2"/>
    <glyphgroup name="Lcaron" value="2"/>
    <glyphgroup name="Ldot" value="2"/>
    <glyphgroup name="Lslash" value="2"/>
    <glyphgroup name="M" value="2"/>
    <glyphgroup name="Mu" value="2"/>
    <glyphgroup name="N" value="2"/>
    <glyphgroup name="Nacute" value="2"/>
    <glyphgroup name="Nacute.loclPLK" value="1"/>
    <glyphgroup name="Ncaron" value="2"/>
    <glyphgroup name="Ntilde" value="2"/>
    <glyphgroup name="Nu" value="2"/>
    <glyphgroup name="O" value="2"/>
    <glyphgroup name="OE" value="2"/>
    <glyphgroup name="Oacute" value="2"/>
    <glyphgroup name="Oacute.loclPLK" value="1"/>
    <glyphgroup name="Obreve" value="2"/>
    <glyphgroup name="Ocircumflex" value="2"/>
    <glyphgroup name="Odieresis" value="2"/>
    <glyphgroup name="Ograve" value="2"/>
    <glyphgroup name="Ohorn" value="2"/>
    <glyphgroup name="Ohungarumlaut" value="2"/>
    <glyphgroup name="Omacron" value="2"/>
    <glyphgroup name="Omegatonos" value="0"/>
    <glyphgroup name="Omicron" value="2"/>
    <glyphgroup name="Omicrontonos" value="2"/>
    <glyphgroup name="Oslash" value="2"/>
    <glyphgroup name="Oslashacute" value="2"/>
    <glyphgroup name="Otilde" value="2"/>
    <glyphgroup name="P" value="2"/>
    <glyphgroup name="Phi" value="2"/>
    <glyphgroup name="Pi" value="2"/>
    <glyphgroup name="Psi" value="2"/>
    <glyphgroup name="Q" value="2"/>
    <glyphgroup name="R" value="2"/>
    <glyphgroup name="Racute" value="2"/>
    <glyphgroup name="Rcaron" value="2"/>
    <glyphgroup name="Rho" value="2"/>
    <glyphgroup name="S" value="2"/>
    <glyphgroup name="Sacute" value="2"/>
    <glyphgroup name="Sacute.loclPLK" value="1"/>
    <glyphgroup name="Scaron" value="2"/>
    <glyphgroup name="Scedilla" value="2"/>
    <glyphgroup name="Scircumflex" value="2"/>
    <glyphgroup name="Sigma" value="2"/>
    <glyphgroup name="T" value="2"/>
    <glyphgroup name="Tau" value="2"/>
    <glyphgroup name="Tbar" value="2"/>
    <glyphgroup name="Tcaron" value="2"/>
    <glyphgroup name="Theta" value="2"/>
    <glyphgroup name="Thorn" value="2"/>
    <glyphgroup name="U" value="2"/>
    <glyphgroup name="Uacute" value="2"/>
    <glyphgroup name="Ubreve" value="2"/>
    <glyphgroup name="Ucircumflex" value="2"/>
    <glyphgroup name="Udieresis" value="2"/>
    <glyphgroup name="Ugrave" value="2"/>
    <glyphgroup name="Uhorn" value="2"/>
    <glyphgroup name="Uhungarumlaut" value="2"/>
    <glyphgroup name="Umacron" value="2"/>
    <glyphgroup name="Uogonek" value="2"/>
    <glyphgroup name="Upsilon" value="2"/>
    <glyphgroup name="Upsilondieresis" value="2"/>
    <glyphgroup name="Upsilontonos" value="0"/>
    <glyphgroup name="Uring" value="2"/>
    <glyphgroup name="Utilde" value="2"/>
    <glyphgroup name="V" value="2"/>
    <glyphgroup name="W" value="2"/>
    <glyphgroup name="Wacute" value="2"/>
    <glyphgroup name="Wcircumflex" value="2"/>
    <glyphgroup name="Wdieresis" value="2"/>
    <glyphgroup name="Wgrave" value="2"/>
    <glyphgroup name="X" value="2"/>
    <glyphgroup name="Xi" value="2"/>
    <glyphgroup name="Y" value="2"/>
    <glyphgroup name="Yacute" value="2"/>
    <glyphgroup name="Ycircumflex" value="2"/>
    <glyphgroup name="Ydieresis" value="2"/>
    <glyphgroup name="Ygrave" value="2"/>
    <glyphgroup name="Z" value="2"/>
    <glyphgroup name="Zacute" value="2"/>
    <glyphgroup name="Zacute.loclPLK" value="1"/>
    <glyphgroup name="Zcaron" value="2"/>
    <glyphgroup name="Zdotaccent" value="2"/>
    <glyphgroup name="Zeta" value="2"/>
    <glyphgroup name="a" value="3"/>
    <glyphgroup name="aacute" value="3"/>
    <glyphgroup name="abreve" value="3"/>
    <glyphgroup name="acircumflex" value="3"/>
    <glyphgroup name="acute" value="1"/>
    <glyphgroup name="acutecomb" value="1"/>
    <glyphgroup name="acutecomb.case" value="1"/>
    <glyphgroup name="acutecomb.case.loclPLK" value="1"/>
    <glyphgroup name="acutecomb.loclPLK" value="1"/>
    <glyphgroup name="adieresis" value="3"/>
    <glyphgroup name="ae" value="3"/>
    <glyphgroup name="aeacute" value="3"/>
    <glyphgroup name="agrave" value="3"/>
    <glyphgroup name="alpha" value="3"/>
    <glyphgroup name="alphatonos" value="3"/>
    <glyphgroup name="amacron" value="3"/>
    <glyphgroup name="ampersand" value="1"/>
    <glyphgroup name="ampersand_ampersand.liga" value="1"/>
    <glyphgroup name="anoteleia" value="1"/>
    <glyphgroup name="aogonek" value="3"/>
    <glyphgroup name="approxequal" value="0"/>
    <glyphgroup name="aring" value="3"/>
    <glyphgroup name="aringacute" value="3"/>
    <glyphgroup name="arrowboth" value="1"/>
    <glyphgroup name="arrowdown" value="0"/>
    <glyphgroup name="arrowleft" value="0"/>
    <glyphgroup name="arrowright" value="1"/>
    <glyphgroup name="arrowup" value="1"/>
    <glyphgroup name="arrowupdn" value="1"/>
    <glyphgroup name="arrowupdnbse" value="1"/>
    <glyphgroup name="asciicircum" value="1"/>
    <glyphgroup name="asciicircum_equal.liga" value="1"/>
    <glyphgroup name="asciitilde" value="1"/>
    <glyphgroup name="asciitilde_asciitilde.liga" value="1"/>
    <glyphgroup name="asciitilde_asciitilde_greater.liga" value="0"/>
    <glyphgroup name="asciitilde_at.liga" value="1"/>
    <glyphgroup name="asciitilde_equal.liga" value="1"/>
    <glyphgroup name="asciitilde_greater.liga" value="1"/>
    <glyphgroup name="asciitilde_hyphen.liga" value="1"/>
    <glyphgroup name="asterisk" value="1"/>
    <glyphgroup name="asterisk_asterisk.liga" value="1"/>
    <glyphgroup name="asterisk_asterisk_asterisk.liga" value="1"/>
    <glyphgroup name="asterisk_greater.liga" value="1"/>
    <glyphgroup name="asterisk_parenright.liga" value="0"/>
    <glyphgroup name="asterisk_slash.liga" value="1"/>
    <glyphgroup name="at" value="1"/>
    <glyphgroup name="atilde" value="3"/>
    <glyphgroup name="b" value="3"/>
    <glyphgroup name="backslash" value="1"/>
    <glyphgroup name="backslash_backslash.liga" value="0"/>
    <glyphgroup name="bar" value="1"/>
    <glyphgroup name="bar_bar.liga" value="1"/>
    <glyphgroup name="bar_bar_bar_greater.liga" value="1"/>
    <glyphgroup name="bar_bar_equal.liga" value="1"/>
    <glyphgroup name="bar_bar_greater.liga" value="1"/>
    <glyphgroup name="bar_braceright.liga" value="1"/>
    <glyphgroup name="bar_bracketright.liga" value="1"/>
    <glyphgroup name="bar_equal.liga" value="1"/>
    <glyphgroup name="bar_greater.liga" value="1"/>
    <glyphgroup name="bar_hyphen.liga" value="1"/>
    <glyphgroup name="beta" value="0"/>
    <glyphgroup name="block" value="1"/>
    <glyphgroup name="braceleft" value="1"/>
    <glyphgroup name="braceleft_bar.liga" value="1"/>
    <glyphgroup name="braceright" value="1"/>
    <glyphgroup name="braceright_numbersign.liga" value="1"/>
    <glyphgroup name="bracketleft" value="1"/>
    <glyphgroup name="bracketleft_bar.liga" value="1"/>
    <glyphgroup name="bracketright" value="1"/>
    <glyphgroup name="bracketright_numbersign.liga" value="1"/>
    <glyphgroup name="breve" value="1"/>
    <glyphgroup name="brevecombcy" value="1"/>
    <glyphgroup name="brevecombcy.case" value="1"/>
    <glyphgroup name="brokenbar" value="1"/>
    <glyphgroup name="bullet" value="1"/>
    <glyphgroup name="c" value="3"/>
    <glyphgroup name="cacute" value="3"/>
    <glyphgroup name="cacute.loclPLK" value="1"/>
    <glyphgroup name="caron" value="1"/>
    <glyphgroup name="ccaron" value="3"/>
    <glyphgroup name="ccedilla" value="3"/>
    <glyphgroup name="ccircumflex" value="3"/>
    <glyphgroup name="cdotaccent" value="3"/>
    <glyphgroup name="cedilla" value="1"/>
    <glyphgroup name="cent" value="4"/>
    <glyphgroup name="chi" value="3"/>
    <glyphgroup name="circle" value="1"/>
    <glyphgroup name="circumflex" value="1"/>
    <glyphgroup name="club" value="1"/>
    <glyphgroup name="colon" value="1"/>
    <glyphgroup name="colon_colon.liga" value="1"/>
    <glyphgroup name="colon_colon_colon.liga" value="1"/>
    <glyphgroup name="colon_colon_equal.liga" value="1"/>
    <glyphgroup name="colon_equal.liga" value="1"/>
    <glyphgroup name="colon_greater.liga" value="1"/>
    <glyphgroup name="colon_less.liga" value="1"/>
    <glyphgroup name="colon_slash_slash.liga" value="0"/>
    <glyphgroup name="colonmonetary" value="4"/>
    <glyphgroup name="comma" value="1"/>
    <glyphgroup name="copyright" value="1"/>
    <glyphgroup name="currency" value="4"/>
    <glyphgroup name="d" value="3"/>
    <glyphgroup name="dagger" value="1"/>
    <glyphgroup name="daggerdbl" value="1"/>
    <glyphgroup name="dcaron" value="3"/>
    <glyphgroup name="dcaron.alt" value="1"/>
    <glyphgroup name="dcroat" value="3"/>
    <glyphgroup name="degree" value="1"/>
    <glyphgroup name="delta" value="3"/>
    <glyphgroup name="diamond" value="1"/>
    <glyphgroup name="dieresis" value="1"/>
    <glyphgroup name="dieresistonos" value="1"/>
    <glyphgroup name="divide" value="1"/>
    <glyphgroup name="dkshade" value="1"/>
    <glyphgroup name="dnblock" value="1"/>
    <glyphgroup name="dollar" value="4"/>
    <glyphgroup name="dollar_greater.liga" value="1"/>
    <glyphgroup name="dong" value="4"/>
    <glyphgroup name="dotaccent" value="1"/>
    <glyphgroup name="dotbelowcomb" value="1"/>
    <glyphgroup name="dotlessi" value="3"/>
    <glyphgroup name="e" value="3"/>
    <glyphgroup name="eacute" value="3"/>
    <glyphgroup name="ebreve" value="3"/>
    <glyphgroup name="ecaron" value="3"/>
    <glyphgroup name="ecircumflex" value="3"/>
    <glyphgroup name="edieresis" value="3"/>
    <glyphgroup name="edotaccent" value="3"/>
    <glyphgroup name="egrave" value="3"/>
    <glyphgroup name="eight" value="4"/>
    <glyphgroup name="eight.dnom" value="1"/>
    <glyphgroup name="eight.numr" value="1"/>
    <glyphgroup name="ellipsis" value="1"/>
    <glyphgroup name="emacron" value="3"/>
    <glyphgroup name="emdash" value="1"/>
    <glyphgroup name="endash" value="1"/>
    <glyphgroup name="eng" value="3"/>
    <glyphgroup name="eogonek" value="3"/>
    <glyphgroup name="epsilon" value="3"/>
    <glyphgroup name="epsilontonos" value="3"/>
    <glyphgroup name="equal" value="1"/>
    <glyphgroup name="equal_colon_equal.liga" value="1"/>
    <glyphgroup name="equal_equal.liga" value="1"/>
    <glyphgroup name="equal_equal_equal.liga" value="1"/>
    <glyphgroup name="equal_equal_greater.liga" value="1"/>
    <glyphgroup name="equal_exclam_equal.liga" value="1"/>
    <glyphgroup name="equal_greater.liga" value="1"/>
    <glyphgroup name="equal_greater_greater.liga" value="1"/>
    <glyphgroup name="equal_less_less.liga" value="1"/>
    <glyphgroup name="equal_slash_equal.liga" value="1"/>
    <glyphgroup name="equivalence" value="1"/>
    <glyphgroup name="estimated" value="1"/>
    <glyphgroup name="eta" value="3"/>
    <glyphgroup name="etatonos" value="3"/>
    <glyphgroup name="eth" value="3"/>
    <glyphgroup name="exclam" value="1"/>
    <glyphgroup name="exclam_equal.liga" value="1"/>
    <glyphgroup name="exclam_equal_equal.liga" value="1"/>
    <glyphgroup name="exclam_exclam.liga" value="1"/>
    <glyphgroup name="exclam_exclam_period.liga" value="1"/>
    <glyphgroup name="exclamdbl" value="0"/>
    <glyphgroup name="exclamdown" value="1"/>
    <glyphgroup name="f" value="3"/>
    <glyphgroup name="female" value="1"/>
    <glyphgroup name="filledbox" value="1"/>
    <glyphgroup name="filledrect" value="1"/>
    <glyphgroup name="five" value="4"/>
    <glyphgroup name="five.dnom" value="1"/>
    <glyphgroup name="five.numr" value="1"/>
    <glyphgroup name="fiveeighths" value="1"/>
    <glyphgroup name="florin" value="3"/>
    <glyphgroup name="four" value="4"/>
    <glyphgroup name="four.dnom" value="1"/>
    <glyphgroup name="four.numr" value="1"/>
    <glyphgroup name="fraction" value="1"/>
    <glyphgroup name="franc" value="4"/>
    <glyphgroup name="g" value="3"/>
    <glyphgroup name="gamma" value="3"/>
    <glyphgroup name="gbreve" value="3"/>
    <glyphgroup name="gcaron" value="3"/>
    <glyphgroup name="gcircumflex" value="3"/>
    <glyphgroup name="gdotaccent" value="3"/>
    <glyphgroup name="germandbls" value="3"/>
    <glyphgroup name="grave" value="1"/>
    <glyphgroup name="gravecomb" value="1"/>
    <glyphgroup name="gravecomb.case" value="1"/>
    <glyphgroup name="greater" value="1"/>
    <glyphgroup name="greater_colon.liga" value="1"/>
    <glyphgroup name="greater_equal.liga" value="1"/>
    <glyphgroup name="greater_equal_greater.liga" value="1"/>
    <glyphgroup name="greater_greater.liga" value="1"/>
    <glyphgroup name="greater_greater_equal.liga" value="1"/>
    <glyphgroup name="greater_greater_greater.liga" value="1"/>
    <glyphgroup name="greater_greater_hyphen.liga" value="1"/>
    <glyphgroup name="greater_hyphen.liga" value="1"/>
    <glyphgroup name="greater_hyphen_greater.liga" value="1"/>
    <glyphgroup name="greaterequal" value="1"/>
    <glyphgroup name="guillemotleft" value="1"/>
    <glyphgroup name="guillemotright" value="1"/>
    <glyphgroup name="guilsinglleft" value="1"/>
    <glyphgroup name="guilsinglright" value="1"/>
    <glyphgroup name="h" value="3"/>
    <glyphgroup name="hbar" value="3"/>
    <glyphgroup name="hcircumflex" value="3"/>
    <glyphgroup name="heart" value="1"/>
    <glyphgroup name="hookabovecomb" value="1"/>
    <glyphgroup name="hookabovecomb.case" value="1"/>
    <glyphgroup name="hungarumlaut" value="1"/>
    <glyphgroup name="hyphen" value="1"/>
    <glyphgroup name="hyphen_asciitilde.liga" value="1"/>
    <glyphgroup name="hyphen_bar.liga" value="1"/>
    <glyphgroup name="hyphen_greater.liga" value="1"/>
    <glyphgroup name="hyphen_greater_greater.liga" value="1"/>
    <glyphgroup name="hyphen_hyphen.liga" value="1"/>
    <glyphgroup name="hyphen_hyphen_greater.liga" value="1"/>
    <glyphgroup name="hyphen_hyphen_hyphen.liga" value="1"/>
    <glyphgroup name="hyphen_less.liga" value="1"/>
    <glyphgroup name="hyphen_less_less.liga" value="1"/>
    <glyphgroup name="i" value="3"/>
    <glyphgroup name="iacute" value="3"/>
    <glyphgroup name="iacute_j.loclNLD" value="1"/>
    <glyphgroup name="ibreve" value="3"/>
    <glyphgroup name="icircumflex" value="3"/>
    <glyphgroup name="idieresis" value="3"/>
    <glyphgroup name="igrave" value="3"/>
    <glyphgroup name="ij" value="3"/>
    <glyphgroup name="imacron" value="3"/>
    <glyphgroup name="infinity" value="1"/>
    <glyphgroup name="integral" value="1"/>
    <glyphgroup name="integralbt" value="1"/>
    <glyphgroup name="integraltp" value="1"/>
    <glyphgroup name="intersection" value="1"/>
    <glyphgroup name="invbullet" value="1"/>
    <glyphgroup name="invcircle" value="1"/>
    <glyphgroup name="invsmileface" value="0"/>
    <glyphgroup name="iogonek" value="3"/>
    <glyphgroup name="iota" value="3"/>
    <glyphgroup name="iotadieresis" value="3"/>
    <glyphgroup name="iotadieresistonos" value="3"/>
    <glyphgroup name="iotatonos" value="3"/>
    <glyphgroup name="itilde" value="3"/>
    <glyphgroup name="j" value="3"/>
    <glyphgroup name="jcircumflex" value="3"/>
    <glyphgroup name="k" value="3"/>
    <glyphgroup name="kappa" value="3"/>
    <glyphgroup name="kgreenlandic" value="3"/>
    <glyphgroup name="l" value="3"/>
    <glyphgroup name="lacute" value="3"/>
    <glyphgroup name="lambda" value="3"/>
    <glyphgroup name="lcaron" value="3"/>
    <glyphgroup name="ldot" value="3"/>
    <glyphgroup name="less" value="1"/>
    <glyphgroup name="less_asciitilde.liga" value="1"/>
    <glyphgroup name="less_asciitilde_asciitilde.liga" value="1"/>
    <glyphgroup name="less_asciitilde_greater.liga" value="1"/>
    <glyphgroup name="less_asterisk.liga" value="1"/>
    <glyphgroup name="less_asterisk_greater.liga" value="1"/>
    <glyphgroup name="less_bar.liga" value="1"/>
    <glyphgroup name="less_bar_bar.liga" value="1"/>
    <glyphgroup name="less_bar_bar_bar.liga" value="1"/>
    <glyphgroup name="less_bar_greater.liga" value="1"/>
    <glyphgroup name="less_colon.liga" value="1"/>
    <glyphgroup name="less_dollar.liga" value="1"/>
    <glyphgroup name="less_dollar_greater.liga" value="1"/>
    <glyphgroup name="less_equal.liga" value="1"/>
    <glyphgroup name="less_equal_equal.liga" value="1"/>
    <glyphgroup name="less_equal_equal_greater.liga" value="1"/>
    <glyphgroup name="less_equal_greater.liga" value="1"/>
    <glyphgroup name="less_equal_less.liga" value="1"/>
    <glyphgroup name="less_exclam_hyphen_hyphen.liga" value="1"/>
    <glyphgroup name="less_greater.liga" value="1"/>
    <glyphgroup name="less_hyphen.liga" value="1"/>
    <glyphgroup name="less_hyphen_greater.liga" value="1"/>
    <glyphgroup name="less_hyphen_hyphen.liga" value="1"/>
    <glyphgroup name="less_hyphen_less.liga" value="1"/>
    <glyphgroup name="less_less.liga" value="1"/>
    <glyphgroup name="less_less_equal.liga" value="1"/>
    <glyphgroup name="less_less_hyphen.liga" value="1"/>
    <glyphgroup name="less_less_less.liga" value="1"/>
    <glyphgroup name="less_plus.liga" value="1"/>
    <glyphgroup name="less_plus_greater.liga" value="1"/>
    <glyphgroup name="less_slash.liga" value="1"/>
    <glyphgroup name="less_slash_greater.liga" value="1"/>
    <glyphgroup name="lessequal" value="1"/>
    <glyphgroup name="lfblock" value="1"/>
    <glyphgroup name="lira" value="4"/>
    <glyphgroup name="logicalnot" value="1"/>
    <glyphgroup name="longs" value="3"/>
    <glyphgroup name="lozenge" value="1"/>
    <glyphgroup name="lslash" value="3"/>
    <glyphgroup name="ltshade" value="1"/>
    <glyphgroup name="m" value="3"/>
    <glyphgroup name="macron" value="1"/>
    <glyphgroup name="male" value="1"/>
    <glyphgroup name="minus" value="1"/>
    <glyphgroup name="minute" value="1"/>
    <glyphgroup name="multiply" value="1"/>
    <glyphgroup name="musicalnote" value="0"/>
    <glyphgroup name="musicalnotedbl" value="0"/>
    <glyphgroup name="n" value="3"/>
    <glyphgroup name="nacute" value="3"/>
    <glyphgroup name="nacute.loclPLK" value="1"/>
    <glyphgroup name="napostrophe" value="3"/>
    <glyphgroup name="ncaron" value="3"/>
    <glyphgroup name="nine" value="4"/>
    <glyphgroup name="nine.dnom" value="1"/>
    <glyphgroup name="nine.numr" value="1"/>
    <glyphgroup name="notequal" value="1"/>
    <glyphgroup name="ntilde" value="3"/>
    <glyphgroup name="nu" value="3"/>
    <glyphgroup name="numbersign" value="1"/>
    <glyphgroup name="numbersign_braceleft.liga" value="1"/>
    <glyphgroup name="numbersign_bracketleft.liga" value="1"/>
    <glyphgroup name="numbersign_colon.liga" value="1"/>
    <glyphgroup name="numbersign_equal.liga" value="1"/>
    <glyphgroup name="numbersign_exclam.liga" value="1"/>
    <glyphgroup name="numbersign_numbersign.liga" value="1"/>
    <glyphgroup name="numbersign_parenleft.liga" value="1"/>
    <glyphgroup name="numbersign_question.liga" value="1"/>
    <glyphgroup name="numbersign_underscore.liga" value="1"/>
    <glyphgroup name="numbersign_underscore_parenleft.liga" value="0"/>
    <glyphgroup name="o" value="3"/>
    <glyphgroup name="oacute" value="3"/>
    <glyphgroup name="oacute.loclPLK" value="1"/>
    <glyphgroup name="obreve" value="3"/>
    <glyphgroup name="ocircumflex" value="3"/>
    <glyphgroup name="odieresis" value="3"/>
    <glyphgroup name="oe" value="3"/>
    <glyphgroup name="ogonek" value="1"/>
    <glyphgroup name="ograve" value="3"/>
    <glyphgroup name="ohorn" value="3"/>
    <glyphgroup name="ohungarumlaut" value="3"/>
    <glyphgroup name="omacron" value="3"/>
    <glyphgroup name="omega" value="3"/>
    <glyphgroup name="omegatonos" value="3"/>
    <glyphgroup name="omicron" value="3"/>
    <glyphgroup name="omicrontonos" value="3"/>
    <glyphgroup name="one" value="4"/>
    <glyphgroup name="one.dnom" value="1"/>
    <glyphgroup name="one.numr" value="1"/>
    <glyphgroup name="onedotenleader" value="0"/>
    <glyphgroup name="oneeighth" value="1"/>
    <glyphgroup name="onehalf" value="1"/>
    <glyphgroup name="onequarter" value="1"/>
    <glyphgroup name="openbullet" value="1"/>
    <glyphgroup name="ordfeminine" value="1"/>
    <glyphgroup name="ordmasculine" value="1"/>
    <glyphgroup name="orthogonal" value="1"/>
    <glyphgroup name="oslash" value="3"/>
    <glyphgroup name="oslashacute" value="3"/>
    <glyphgroup name="otilde" value="3"/>
    <glyphgroup name="p" value="3"/>
    <glyphgroup name="paragraph" value="1"/>
    <glyphgroup name="parenleft" value="1"/>
    <glyphgroup name="parenleft_asterisk.liga" value="0"/>
    <glyphgroup name="parenright" value="1"/>
    <glyphgroup name="partialdiff" value="1"/>
    <glyphgroup name="percent" value="1"/>
    <glyphgroup name="percent_percent.liga" value="1"/>
    <glyphgroup name="period" value="1"/>
    <glyphgroup name="period_equal.liga" value="1"/>
    <glyphgroup name="period_hyphen.liga" value="1"/>
    <glyphgroup name="period_period.liga" value="1"/>
    <glyphgroup name="period_period_equal.liga" value="1"/>
    <glyphgroup name="period_period_less.liga" value="1"/>
    <glyphgroup name="period_period_period.liga" value="1"/>
    <glyphgroup name="period_question.liga" value="1"/>
    <glyphgroup name="periodcentered" value="1"/>
    <glyphgroup name="perthousand" value="1"/>
    <glyphgroup name="peseta" value="4"/>
    <glyphgroup name="phi" value="3"/>
    <glyphgroup name="pi" value="3"/>
    <glyphgroup name="plus" value="1"/>
    <glyphgroup name="plus_greater.liga" value="1"/>
    <glyphgroup name="plus_plus.liga" value="1"/>
    <glyphgroup name="plus_plus_plus.liga" value="1"/>
    <glyphgroup name="plusminus" value="1"/>
    <glyphgroup name="product" value="1"/>
    <glyphgroup name="psi" value="3"/>
    <glyphgroup name="q" value="3"/>
    <glyphgroup name="question" value="1"/>
    <glyphgroup name="question_colon.liga" value="1"/>
    <glyphgroup name="question_equal.liga" value="1"/>
    <glyphgroup name="question_period.liga" value="1"/>
    <glyphgroup name="question_question.liga" value="1"/>
    <glyphgroup name="questiondown" value="1"/>
    <glyphgroup name="quotedbl" value="1"/>
    <glyphgroup name="quotedblbase" value="1"/>
    <glyphgroup name="quotedblleft" value="1"/>
    <glyphgroup name="quotedblright" value="1"/>
    <glyphgroup name="quoteleft" value="1"/>
    <glyphgroup name="quotereversed" value="0"/>
    <glyphgroup name="quoteright" value="1"/>
    <glyphgroup name="quotesinglbase" value="1"/>
    <glyphgroup name="quotesingle" value="1"/>
    <glyphgroup name="r" value="3"/>
    <glyphgroup name="racute" value="3"/>
    <glyphgroup name="radical" value="1"/>
    <glyphgroup name="rcaron" value="3"/>
    <glyphgroup name="registered" value="1"/>
    <glyphgroup name="revlogicalnot" value="1"/>
    <glyphgroup name="rho" value="3"/>
    <glyphgroup name="ring" value="1"/>
    <glyphgroup name="rtblock" value="1"/>
    <glyphgroup name="s" value="3"/>
    <glyphgroup name="sacute" value="3"/>
    <glyphgroup name="sacute.loclPLK" value="1"/>
    <glyphgroup name="scaron" value="3"/>
    <glyphgroup name="scedilla" value="3"/>
    <glyphgroup name="scircumflex" value="3"/>
    <glyphgroup name="second" value="1"/>
    <glyphgroup name="section" value="1"/>
    <glyphgroup name="semicolon" value="1"/>
    <glyphgroup name="semicolon_semicolon.liga" value="1"/>
    <glyphgroup name="seven" value="4"/>
    <glyphgroup name="seven.dnom" value="1"/>
    <glyphgroup name="seven.numr" value="1"/>
    <glyphgroup name="seveneighths" value="1"/>
    <glyphgroup name="shade" value="1"/>
    <glyphgroup name="sigma" value="3"/>
    <glyphgroup name="six" value="4"/>
    <glyphgroup name="six.dnom" value="1"/>
    <glyphgroup name="six.numr" value="1"/>
    <glyphgroup name="slash" value="1"/>
    <glyphgroup name="slash_asterisk.liga" value="1"/>
    <glyphgroup name="slash_equal.liga" value="1"/>
    <glyphgroup name="slash_equal_equal.liga" value="1"/>
    <glyphgroup name="slash_greater.liga" value="1"/>
    <glyphgroup name="slash_slash.liga" value="1"/>
    <glyphgroup name="slash_slash_slash.liga" value="1"/>
    <glyphgroup name="smileface" value="0"/>
    <glyphgroup name="space" value="1"/>
    <glyphgroup name="spade" value="1"/>
    <glyphgroup name="sterling" value="4"/>
    <glyphgroup name="summation" value="1"/>
    <glyphgroup name="sun" value="0"/>
    <glyphgroup name="t" value="3"/>
    <glyphgroup name="tau" value="3"/>
    <glyphgroup name="tbar" value="3"/>
    <glyphgroup name="tcaron" value="3"/>
    <glyphgroup name="theta" value="3"/>
    <glyphgroup name="thorn" value="3"/>
    <glyphgroup name="three" value="4"/>
    <glyphgroup name="three.dnom" value="1"/>
    <glyphgroup name="three.numr" value="1"/>
    <glyphgroup name="threeeighths" value="1"/>
    <glyphgroup name="threequarters" value="1"/>
    <glyphgroup name="tilde" value="1"/>
    <glyphgroup name="tildecomb" value="1"/>
    <glyphgroup name="tildecomb.case" value="1"/>
    <glyphgroup name="tonos" value="1"/>
    <glyphgroup name="tonos.case" value="1"/>
    <glyphgroup name="trademark" value="1"/>
    <glyphgroup name="triagdn" value="1"/>
    <glyphgroup name="triaglf" value="1"/>
    <glyphgroup name="triagrt" value="1"/>
    <glyphgroup name="triagup" value="1"/>
    <glyphgroup name="two" value="4"/>
    <glyphgroup name="two.dnom" value="1"/>
    <glyphgroup name="two.numr" value="1"/>
    <glyphgroup name="u" value="3"/>
    <glyphgroup name="uacute" value="3"/>
    <glyphgroup name="ubreve" value="3"/>
    <glyphgroup name="ucircumflex" value="3"/>
    <glyphgroup name="udieresis" value="3"/>
    <glyphgroup name="ugrave" value="3"/>
    <glyphgroup name="uhorn" value="3"/>
    <glyphgroup name="uhungarumlaut" value="3"/>
    <glyphgroup name="umacron" value="3"/>
    <glyphgroup name="underscore" value="1"/>
    <glyphgroup name="underscore_bar_underscore.liga" value="1"/>
    <glyphgroup name="underscore_underscore.liga" value="1"/>
    <glyphgroup name="underscoredbl" value="1"/>
    <glyphgroup name="uni0009" value="0"/>
    <glyphgroup name="uni00A0" value="1"/>
    <glyphgroup name="uni00AD" value="1"/>
    <glyphgroup name="uni00B2" value="1"/>
    <glyphgroup name="uni00B3" value="1"/>
    <glyphgroup name="uni00B5" value="1"/>
    <glyphgroup name="uni00B9" value="1"/>
    <glyphgroup name="uni0122" value="2"/>
    <glyphgroup name="uni0123" value="3"/>
    <glyphgroup name="uni0136" value="2"/>
    <glyphgroup name="uni0137" value="3"/>
    <glyphgroup name="uni013B" value="2"/>
    <glyphgroup name="uni013C" value="3"/>
    <glyphgroup name="uni0145" value="2"/>
    <glyphgroup name="uni0146" value="3"/>
    <glyphgroup name="uni0156" value="2"/>
    <glyphgroup name="uni0157" value="3"/>
    <glyphgroup name="uni0162" value="2"/>
    <glyphgroup name="uni0163" value="3"/>
    <glyphgroup name="uni0186" value="0"/>
    <glyphgroup name="uni018F" value="2"/>
    <glyphgroup name="uni0190" value="0"/>
    <glyphgroup name="uni019D" value="1"/>
    <glyphgroup name="uni01A9" value="0"/>
    <glyphgroup name="uni01B7" value="0"/>
    <glyphgroup name="uni01CD" value="0"/>
    <glyphgroup name="uni01CE" value="0"/>
    <glyphgroup name="uni01EA" value="2"/>
    <glyphgroup name="uni01EB" value="3"/>
    <glyphgroup name="uni0218" value="2"/>
    <glyphgroup name="uni0219" value="3"/>
    <glyphgroup name="uni021A" value="2"/>
    <glyphgroup name="uni021B" value="3"/>
    <glyphgroup name="uni021E" value="0"/>
    <glyphgroup name="uni021F" value="0"/>
    <glyphgroup name="uni0232" value="2"/>
    <glyphgroup name="uni0233" value="3"/>
    <glyphgroup name="uni0237" value="3"/>
    <glyphgroup name="uni0245" value="0"/>
    <glyphgroup name="uni0254" value="0"/>
    <glyphgroup name="uni0259" value="3"/>
    <glyphgroup name="uni025B" value="0"/>
    <glyphgroup name="uni026A" value="0"/>
    <glyphgroup name="uni0272" value="1"/>
    <glyphgroup name="uni0283" value="0"/>
    <glyphgroup name="uni028C" value="0"/>
    <glyphgroup name="uni0292" value="0"/>
    <glyphgroup name="uni02A7" value="0"/>
    <glyphgroup name="uni02BB" value="0"/>
    <glyphgroup name="uni02BC" value="1"/>
    <glyphgroup name="uni02C9" value="1"/>
    <glyphgroup name="uni0302" value="1"/>
    <glyphgroup name="uni0302.case" value="1"/>
    <glyphgroup name="uni0304" value="1"/>
    <glyphgroup name="uni0304.case" value="1"/>
    <glyphgroup name="uni0306" value="1"/>
    <glyphgroup name="uni0306.case" value="1"/>
    <glyphgroup name="uni0307" value="1"/>
    <glyphgroup name="uni0307.case" value="1"/>
    <glyphgroup name="uni0308" value="1"/>
    <glyphgroup name="uni0308.case" value="1"/>
    <glyphgroup name="uni030A" value="1"/>
    <glyphgroup name="uni030A.case" value="1"/>
    <glyphgroup name="uni030B" value="1"/>
    <glyphgroup name="uni030B.case" value="1"/>
    <glyphgroup name="uni030C" value="1"/>
    <glyphgroup name="uni030C.case" value="1"/>
    <glyphgroup name="uni0312" value="1"/>
    <glyphgroup name="uni031B" value="1"/>
    <glyphgroup name="uni031B.case" value="1"/>
    <glyphgroup name="uni0326" value="1"/>
    <glyphgroup name="uni0327" value="1"/>
    <glyphgroup name="uni0328" value="1"/>
    <glyphgroup name="uni0340" value="0"/>
    <glyphgroup name="uni0341" value="0"/>
    <glyphgroup name="uni0342" value="0"/>
    <glyphgroup name="uni0374" value="1"/>
    <glyphgroup name="uni0375" value="1"/>
    <glyphgroup name="uni037E" value="1"/>
    <glyphgroup name="uni0394" value="2"/>
    <glyphgroup name="uni03A9" value="0"/>
    <glyphgroup name="uni03BC" value="3"/>
    <glyphgroup name="uni03C2" value="3"/>
    <glyphgroup name="uni03CF" value="1"/>
    <glyphgroup name="uni03D7" value="1"/>
    <glyphgroup name="uni0400" value="2"/>
    <glyphgroup name="uni0401" value="2"/>
    <glyphgroup name="uni0402" value="2"/>
    <glyphgroup name="uni0403" value="2"/>
    <glyphgroup name="uni0404" value="2"/>
    <glyphgroup name="uni0405" value="2"/>
    <glyphgroup name="uni0406" value="2"/>
    <glyphgroup name="uni0407" value="2"/>
    <glyphgroup name="uni0408" value="2"/>
    <glyphgroup name="uni0409" value="2"/>
    <glyphgroup name="uni040A" value="2"/>
    <glyphgroup name="uni040B" value="2"/>
    <glyphgroup name="uni040C" value="2"/>
    <glyphgroup name="uni040D" value="2"/>
    <glyphgroup name="uni040E" value="2"/>
    <glyphgroup name="uni040F" value="2"/>
    <glyphgroup name="uni0410" value="2"/>
    <glyphgroup name="uni0411" value="2"/>
    <glyphgroup name="uni0412" value="2"/>
    <glyphgroup name="uni0413" value="2"/>
    <glyphgroup name="uni0414" value="2"/>
    <glyphgroup name="uni0414.loclBGR" value="1"/>
    <glyphgroup name="uni0415" value="2"/>
    <glyphgroup name="uni0416" value="2"/>
    <glyphgroup name="uni0417" value="0"/>
    <glyphgroup name="uni0418" value="2"/>
    <glyphgroup name="uni0419" value="2"/>
    <glyphgroup name="uni041A" value="2"/>
    <glyphgroup name="uni041B" value="2"/>
    <glyphgroup name="uni041B.loclBGR" value="1"/>
    <glyphgroup name="uni041C" value="2"/>
    <glyphgroup name="uni041D" value="2"/>
    <glyphgroup name="uni041E" value="2"/>
    <glyphgroup name="uni041F" value="2"/>
    <glyphgroup name="uni0420" value="2"/>
    <glyphgroup name="uni0421" value="2"/>
    <glyphgroup name="uni0422" value="2"/>
    <glyphgroup name="uni0423" value="2"/>
    <glyphgroup name="uni0424" value="2"/>
    <glyphgroup name="uni0424.loclBGR" value="1"/>
    <glyphgroup name="uni0425" value="2"/>
    <glyphgroup name="uni0426" value="2"/>
    <glyphgroup name="uni0427" value="2"/>
    <glyphgroup name="uni0428" value="2"/>
    <glyphgroup name="uni0429" value="2"/>
    <glyphgroup name="uni042A" value="2"/>
    <glyphgroup name="uni042B" value="2"/>
    <glyphgroup name="uni042C" value="2"/>
    <glyphgroup name="uni042D" value="0"/>
    <glyphgroup name="uni042E" value="2"/>
    <glyphgroup name="uni042F" value="2"/>
    <glyphgroup name="uni0430" value="3"/>
    <glyphgroup name="uni0431" value="0"/>
    <glyphgroup name="uni0431.loclSRB" value="1"/>
    <glyphgroup name="uni0432" value="3"/>
    <glyphgroup name="uni0432.loclBGR" value="0"/>
    <glyphgroup name="uni0433" value="3"/>
    <glyphgroup name="uni0433.loclBGR" value="0"/>
    <glyphgroup name="uni0434" value="3"/>
    <glyphgroup name="uni0434.loclBGR" value="1"/>
    <glyphgroup name="uni0435" value="3"/>
    <glyphgroup name="uni0436" value="3"/>
    <glyphgroup name="uni0436.loclBGR" value="1"/>
    <glyphgroup name="uni0437" value="3"/>
    <glyphgroup name="uni0437.loclBGR" value="0"/>
    <glyphgroup name="uni0438" value="3"/>
    <glyphgroup name="uni0438.loclBGR" value="1"/>
    <glyphgroup name="uni0439" value="3"/>
    <glyphgroup name="uni0439.loclBGR" value="1"/>
    <glyphgroup name="uni043A" value="3"/>
    <glyphgroup name="uni043A.loclBGR" value="1"/>
    <glyphgroup name="uni043B" value="3"/>
    <glyphgroup name="uni043B.loclBGR" value="1"/>
    <glyphgroup name="uni043C" value="3"/>
    <glyphgroup name="uni043D" value="3"/>
    <glyphgroup name="uni043E" value="3"/>
    <glyphgroup name="uni043F" value="3"/>
    <glyphgroup name="uni043F.loclBGR" value="1"/>
    <glyphgroup name="uni0440" value="3"/>
    <glyphgroup name="uni0441" value="3"/>
    <glyphgroup name="uni0442" value="3"/>
    <glyphgroup name="uni0442.loclBGR" value="1"/>
    <glyphgroup name="uni0443" value="3"/>
    <glyphgroup name="uni0444" value="3"/>
    <glyphgroup name="uni0445" value="3"/>
    <glyphgroup name="uni0446" value="3"/>
    <glyphgroup name="uni0446.loclBGR" value="1"/>
    <glyphgroup name="uni0447" value="3"/>
    <glyphgroup name="uni0448" value="3"/>
    <glyphgroup name="uni0448.loclBGR" value="1"/>
    <glyphgroup name="uni0449" value="3"/>
    <glyphgroup name="uni0449.loclBGR" value="1"/>
    <glyphgroup name="uni044A" value="3"/>
    <glyphgroup name="uni044A.loclBGR" value="1"/>
    <glyphgroup name="uni044B" value="3"/>
    <glyphgroup name="uni044C" value="3"/>
    <glyphgroup name="uni044C.loclBGR" value="1"/>
    <glyphgroup name="uni044D" value="0"/>
    <glyphgroup name="uni044E" value="3"/>
    <glyphgroup name="uni044E.loclBGR" value="1"/>
    <glyphgroup name="uni044F" value="0"/>
    <glyphgroup name="uni0450" value="3"/>
    <glyphgroup name="uni0451" value="3"/>
    <glyphgroup name="uni0452" value="3"/>
    <glyphgroup name="uni0453" value="3"/>
    <glyphgroup name="uni0454" value="3"/>
    <glyphgroup name="uni0455" value="3"/>
    <glyphgroup name="uni0456" value="3"/>
    <glyphgroup name="uni0457" value="3"/>
    <glyphgroup name="uni0458" value="3"/>
    <glyphgroup name="uni0459" value="3"/>
    <glyphgroup name="uni045A" value="3"/>
    <glyphgroup name="uni045B" value="3"/>
    <glyphgroup name="uni045C" value="3"/>
    <glyphgroup name="uni045D" value="3"/>
    <glyphgroup name="uni045D.loclBGR" value="1"/>
    <glyphgroup name="uni045E" value="3"/>
    <glyphgroup name="uni045F" value="3"/>
    <glyphgroup name="uni0490" value="2"/>
    <glyphgroup name="uni0491" value="3"/>
    <glyphgroup name="uni0492" value="2"/>
    <glyphgroup name="uni0493" value="3"/>
    <glyphgroup name="uni0496" value="0"/>
    <glyphgroup name="uni0497" value="0"/>
    <glyphgroup name="uni049A" value="2"/>
    <glyphgroup name="uni049B" value="3"/>
    <glyphgroup name="uni04A2" value="2"/>
    <glyphgroup name="uni04A3" value="3"/>
    <glyphgroup name="uni04AE" value="2"/>
    <glyphgroup name="uni04AF" value="0"/>
    <glyphgroup name="uni04B0" value="0"/>
    <glyphgroup name="uni04B1" value="0"/>
    <glyphgroup name="uni04B2" value="2"/>
    <glyphgroup name="uni04B3" value="3"/>
    <glyphgroup name="uni04B6" value="2"/>
    <glyphgroup name="uni04B7" value="3"/>
    <glyphgroup name="uni04BA" value="2"/>
    <glyphgroup name="uni04BB" value="3"/>
    <glyphgroup name="uni04C0" value="2"/>
    <glyphgroup name="uni04CF" value="3"/>
    <glyphgroup name="uni04D8" value="2"/>
    <glyphgroup name="uni04D9" value="3"/>
    <glyphgroup name="uni04E2" value="2"/>
    <glyphgroup name="uni04E3" value="3"/>
    <glyphgroup name="uni04E8" value="2"/>
    <glyphgroup name="uni04E9" value="3"/>
    <glyphgroup name="uni04EE" value="2"/>
    <glyphgroup name="uni04EF" value="3"/>
    <glyphgroup name="uni0E3F" value="0"/>
    <glyphgroup name="uni1E9E" value="1"/>
    <glyphgroup name="uni1EA0" value="2"/>
    <glyphgroup name="uni1EA1" value="3"/>
    <glyphgroup name="uni1EA2" value="2"/>
    <glyphgroup name="uni1EA3" value="3"/>
    <glyphgroup name="uni1EA4" value="2"/>
    <glyphgroup name="uni1EA5" value="3"/>
    <glyphgroup name="uni1EA6" value="2"/>
    <glyphgroup name="uni1EA7" value="3"/>
    <glyphgroup name="uni1EA8" value="2"/>
    <glyphgroup name="uni1EA9" value="3"/>
    <glyphgroup name="uni1EAA" value="2"/>
    <glyphgroup name="uni1EAB" value="3"/>
    <glyphgroup name="uni1EAC" value="2"/>
    <glyphgroup name="uni1EAD" value="3"/>
    <glyphgroup name="uni1EAE" value="2"/>
    <glyphgroup name="uni1EAF" value="3"/>
    <glyphgroup name="uni1EB0" value="2"/>
    <glyphgroup name="uni1EB1" value="3"/>
    <glyphgroup name="uni1EB2" value="2"/>
    <glyphgroup name="uni1EB3" value="3"/>
    <glyphgroup name="uni1EB4" value="2"/>
    <glyphgroup name="uni1EB5" value="3"/>
    <glyphgroup name="uni1EB6" value="2"/>
    <glyphgroup name="uni1EB7" value="3"/>
    <glyphgroup name="uni1EB8" value="2"/>
    <glyphgroup name="uni1EB9" value="3"/>
    <glyphgroup name="uni1EBA" value="2"/>
    <glyphgroup name="uni1EBB" value="3"/>
    <glyphgroup name="uni1EBC" value="2"/>
    <glyphgroup name="uni1EBD" value="3"/>
    <glyphgroup name="uni1EBE" value="2"/>
    <glyphgroup name="uni1EBF" value="3"/>
    <glyphgroup name="uni1EC0" value="2"/>
    <glyphgroup name="uni1EC1" value="3"/>
    <glyphgroup name="uni1EC2" value="2"/>
    <glyphgroup name="uni1EC3" value="3"/>
    <glyphgroup name="uni1EC4" value="2"/>
    <glyphgroup name="uni1EC5" value="3"/>
    <glyphgroup name="uni1EC6" value="2"/>
    <glyphgroup name="uni1EC7" value="3"/>
    <glyphgroup name="uni1EC8" value="2"/>
    <glyphgroup name="uni1EC9" value="3"/>
    <glyphgroup name="uni1ECA" value="2"/>
    <glyphgroup name="uni1ECB" value="3"/>
    <glyphgroup name="uni1ECC" value="2"/>
    <glyphgroup name="uni1ECD" value="3"/>
    <glyphgroup name="uni1ECE" value="2"/>
    <glyphgroup name="uni1ECF" value="3"/>
    <glyphgroup name="uni1ED0" value="2"/>
    <glyphgroup name="uni1ED1" value="3"/>
    <glyphgroup name="uni1ED2" value="2"/>
    <glyphgroup name="uni1ED3" value="3"/>
    <glyphgroup name="uni1ED4" value="2"/>
    <glyphgroup name="uni1ED5" value="3"/>
    <glyphgroup name="uni1ED6" value="2"/>
    <glyphgroup name="uni1ED7" value="3"/>
    <glyphgroup name="uni1ED8" value="2"/>
    <glyphgroup name="uni1ED9" value="3"/>
    <glyphgroup name="uni1EDA" value="2"/>
    <glyphgroup name="uni1EDB" value="3"/>
    <glyphgroup name="uni1EDC" value="2"/>
    <glyphgroup name="uni1EDD" value="3"/>
    <glyphgroup name="uni1EDE" value="2"/>
    <glyphgroup name="uni1EDF" value="3"/>
    <glyphgroup name="uni1EE0" value="2"/>
    <glyphgroup name="uni1EE1" value="3"/>
    <glyphgroup name="uni1EE2" value="2"/>
    <glyphgroup name="uni1EE3" value="3"/>
    <glyphgroup name="uni1EE4" value="2"/>
    <glyphgroup name="uni1EE5" value="3"/>
    <glyphgroup name="uni1EE6" value="2"/>
    <glyphgroup name="uni1EE7" value="3"/>
    <glyphgroup name="uni1EE8" value="2"/>
    <glyphgroup name="uni1EE9" value="3"/>
    <glyphgroup name="uni1EEA" value="2"/>
    <glyphgroup name="uni1EEB" value="3"/>
    <glyphgroup name="uni1EEC" value="2"/>
    <glyphgroup name="uni1EED" value="3"/>
    <glyphgroup name="uni1EEE" value="2"/>
    <glyphgroup name="uni1EEF" value="3"/>
    <glyphgroup name="uni1EF0" value="2"/>
    <glyphgroup name="uni1EF1" value="3"/>
    <glyphgroup name="uni1EF4" value="2"/>
    <glyphgroup name="uni1EF5" value="3"/>
    <glyphgroup name="uni1EF6" value="2"/>
    <glyphgroup name="uni1EF7" value="3"/>
    <glyphgroup name="uni1EF8" value="2"/>
    <glyphgroup name="uni1EF9" value="3"/>
    <glyphgroup name="uni2008" value="0"/>
    <glyphgroup name="uni2010" value="0"/>
    <glyphgroup name="uni2011" value="0"/>
    <glyphgroup name="uni2015" value="1"/>
    <glyphgroup name="uni2028" value="1"/>
    <glyphgroup name="uni203E" value="1"/>
    <glyphgroup name="uni2070" value="1"/>
    <glyphgroup name="uni2074" value="1"/>
    <glyphgroup name="uni2075" value="1"/>
    <glyphgroup name="uni2076" value="1"/>
    <glyphgroup name="uni2077" value="1"/>
    <glyphgroup name="uni2078" value="1"/>
    <glyphgroup name="uni2079" value="1"/>
    <glyphgroup name="uni207F" value="1"/>
    <glyphgroup name="uni2080" value="1"/>
    <glyphgroup name="uni2081" value="1"/>
    <glyphgroup name="uni2082" value="1"/>
    <glyphgroup name="uni2083" value="1"/>
    <glyphgroup name="uni2084" value="1"/>
    <glyphgroup name="uni2085" value="1"/>
    <glyphgroup name="uni2086" value="1"/>
    <glyphgroup name="uni2087" value="1"/>
    <glyphgroup name="uni2088" value="1"/>
    <glyphgroup name="uni2089" value="1"/>
    <glyphgroup name="uni20A0" value="1"/>
    <glyphgroup name="uni20A6" value="4"/>
    <glyphgroup name="uni20A8" value="4"/>
    <glyphgroup name="uni20A9" value="4"/>
    <glyphgroup name="uni20AA" value="4"/>
    <glyphgroup name="uni20AD" value="4"/>
    <glyphgroup name="uni20AE" value="4"/>
    <glyphgroup name="uni20B1" value="4"/>
    <glyphgroup name="uni20B2" value="0"/>
    <glyphgroup name="uni20B4" value="4"/>
    <glyphgroup name="uni20B5" value="0"/>
    <glyphgroup name="uni20B8" value="1"/>
    <glyphgroup name="uni20B9" value="1"/>
    <glyphgroup name="uni20BA" value="1"/>
    <glyphgroup name="uni20BC" value="1"/>
    <glyphgroup name="uni20BD" value="1"/>
    <glyphgroup name="uni20BE" value="0"/>
    <glyphgroup name="uni2105" value="1"/>
    <glyphgroup name="uni2113" value="1"/>
    <glyphgroup name="uni2116" value="1"/>
    <glyphgroup name="uni2117" value="1"/>
    <glyphgroup name="uni2126" value="1"/>
    <glyphgroup name="uni21E1" value="0"/>
    <glyphgroup name="uni21E3" value="0"/>
    <glyphgroup name="uni2206" value="1"/>
    <glyphgroup name="uni2215" value="1"/>
    <glyphgroup name="uni2219" value="1"/>
    <glyphgroup name="uni2262" value="0"/>
    <glyphgroup name="uni2263" value="0"/>
    <glyphgroup name="uni23AF" value="1"/>
    <glyphgroup name="uni2500" value="1"/>
    <glyphgroup name="uni2501" value="1"/>
    <glyphgroup name="uni2502" value="1"/>
    <glyphgroup name="uni2503" value="1"/>
    <glyphgroup name="uni2504" value="1"/>
    <glyphgroup name="uni2505" value="1"/>
    <glyphgroup name="uni2506" value="1"/>
    <glyphgroup name="uni2507" value="1"/>
    <glyphgroup name="uni2508" value="1"/>
    <glyphgroup name="uni2509" value="1"/>
    <glyphgroup name="uni250A" value="1"/>
    <glyphgroup name="uni250B" value="1"/>
    <glyphgroup name="uni250C" value="1"/>
    <glyphgroup name="uni250D" value="1"/>
    <glyphgroup name="uni250E" value="1"/>
    <glyphgroup name="uni250F" value="1"/>
    <glyphgroup name="uni2510" value="1"/>
    <glyphgroup name="uni2511" value="1"/>
    <glyphgroup name="uni2512" value="1"/>
    <glyphgroup name="uni2513" value="1"/>
    <glyphgroup name="uni2514" value="1"/>
    <glyphgroup name="uni2515" value="1"/>
    <glyphgroup name="uni2516" value="1"/>
    <glyphgroup name="uni2517" value="1"/>
    <glyphgroup name="uni2518" value="1"/>
    <glyphgroup name="uni2519" value="1"/>
    <glyphgroup name="uni251A" value="1"/>
    <glyphgroup name="uni251B" value="1"/>
    <glyphgroup name="uni251C" value="1"/>
    <glyphgroup name="uni251D" value="1"/>
    <glyphgroup name="uni251E" value="1"/>
    <glyphgroup name="uni251F" value="1"/>
    <glyphgroup name="uni2520" value="1"/>
    <glyphgroup name="uni2521" value="1"/>
    <glyphgroup name="uni2522" value="1"/>
    <glyphgroup name="uni2523" value="1"/>
    <glyphgroup name="uni2524" value="1"/>
    <glyphgroup name="uni2525" value="1"/>
    <glyphgroup name="uni2526" value="1"/>
    <glyphgroup name="uni2527" value="1"/>
    <glyphgroup name="uni2528" value="1"/>
    <glyphgroup name="uni2529" value="1"/>
    <glyphgroup name="uni252A" value="1"/>
    <glyphgroup name="uni252B" value="1"/>
    <glyphgroup name="uni252C" value="1"/>
    <glyphgroup name="uni252D" value="1"/>
    <glyphgroup name="uni252E" value="1"/>
    <glyphgroup name="uni252F" value="1"/>
    <glyphgroup name="uni2530" value="1"/>
    <glyphgroup name="uni2531" value="1"/>
    <glyphgroup name="uni2532" value="1"/>
    <glyphgroup name="uni2533" value="1"/>
    <glyphgroup name="uni2534" value="1"/>
    <glyphgroup name="uni2535" value="1"/>
    <glyphgroup name="uni2536" value="1"/>
    <glyphgroup name="uni2537" value="1"/>
    <glyphgroup name="uni2538" value="1"/>
    <glyphgroup name="uni2539" value="1"/>
    <glyphgroup name="uni253A" value="1"/>
    <glyphgroup name="uni253B" value="1"/>
    <glyphgroup name="uni253C" value="1"/>
    <glyphgroup name="uni253D" value="1"/>
    <glyphgroup name="uni253E" value="1"/>
    <glyphgroup name="uni253F" value="1"/>
    <glyphgroup name="uni2540" value="1"/>
    <glyphgroup name="uni2541" value="1"/>
    <glyphgroup name="uni2542" value="1"/>
    <glyphgroup name="uni2543" value="1"/>
    <glyphgroup name="uni2544" value="1"/>
    <glyphgroup name="uni2545" value="1"/>
    <glyphgroup name="uni2546" value="1"/>
    <glyphgroup name="uni2547" value="1"/>
    <glyphgroup name="uni2548" value="1"/>
    <glyphgroup name="uni2549" value="1"/>
    <glyphgroup name="uni254A" value="1"/>
    <glyphgroup name="uni254B" value="1"/>
    <glyphgroup name="uni254C" value="1"/>
    <glyphgroup name="uni254D" value="1"/>
    <glyphgroup name="uni254E" value="1"/>
    <glyphgroup name="uni254F" value="1"/>
    <glyphgroup name="uni2550" value="1"/>
    <glyphgroup name="uni2551" value="1"/>
    <glyphgroup name="uni2552" value="1"/>
    <glyphgroup name="uni2553" value="1"/>
    <glyphgroup name="uni2554" value="1"/>
    <glyphgroup name="uni2555" value="1"/>
    <glyphgroup name="uni2556" value="1"/>
    <glyphgroup name="uni2557" value="1"/>
    <glyphgroup name="uni2558" value="1"/>
    <glyphgroup name="uni2559" value="1"/>
    <glyphgroup name="uni255A" value="1"/>
    <glyphgroup name="uni255B" value="1"/>
    <glyphgroup name="uni255C" value="1"/>
    <glyphgroup name="uni255D" value="1"/>
    <glyphgroup name="uni255E" value="1"/>
    <glyphgroup name="uni255F" value="1"/>
    <glyphgroup name="uni2560" value="1"/>
    <glyphgroup name="uni2561" value="1"/>
    <glyphgroup name="uni2562" value="1"/>
    <glyphgroup name="uni2563" value="1"/>
    <glyphgroup name="uni2564" value="1"/>
    <glyphgroup name="uni2565" value="1"/>
    <glyphgroup name="uni2566" value="1"/>
    <glyphgroup name="uni2567" value="1"/>
    <glyphgroup name="uni2568" value="1"/>
    <glyphgroup name="uni2569" value="1"/>
    <glyphgroup name="uni256A" value="1"/>
    <glyphgroup name="uni256B" value="1"/>
    <glyphgroup name="uni256C" value="1"/>
    <glyphgroup name="uni256D" value="1"/>
    <glyphgroup name="uni256E" value="1"/>
    <glyphgroup name="uni256F" value="1"/>
    <glyphgroup name="uni2570" value="1"/>
    <glyphgroup name="uni2571" value="1"/>
    <glyphgroup name="uni2572" value="1"/>
    <glyphgroup name="uni2573" value="1"/>
    <glyphgroup name="uni2574" value="1"/>
    <glyphgroup name="uni2575" value="1"/>
    <glyphgroup name="uni2576" value="1"/>
    <glyphgroup name="uni2577" value="1"/>
    <glyphgroup name="uni2578" value="1"/>
    <glyphgroup name="uni2579" value="1"/>
    <glyphgroup name="uni257A" value="1"/>
    <glyphgroup name="uni257B" value="1"/>
    <glyphgroup name="uni257C" value="1"/>
    <glyphgroup name="uni257D" value="1"/>
    <glyphgroup name="uni257E" value="1"/>
    <glyphgroup name="uni257F" value="1"/>
    <glyphgroup name="uni2581" value="1"/>
    <glyphgroup name="uni2582" value="1"/>
    <glyphgroup name="uni2583" value="1"/>
    <glyphgroup name="uni2585" value="1"/>
    <glyphgroup name="uni2586" value="1"/>
    <glyphgroup name="uni2587" value="1"/>
    <glyphgroup name="uni2589" value="1"/>
    <glyphgroup name="uni258A" value="1"/>
    <glyphgroup name="uni258B" value="1"/>
    <glyphgroup name="uni258D" value="1"/>
    <glyphgroup name="uni258E" value="1"/>
    <glyphgroup name="uni258F" value="1"/>
    <glyphgroup name="uni2594" value="1"/>
    <glyphgroup name="uni2595" value="1"/>
    <glyphgroup name="uni2596" value="1"/>
    <glyphgroup name="uni2597" value="1"/>
    <glyphgroup name="uni2598" value="1"/>
    <glyphgroup name="uni2599" value="1"/>
    <glyphgroup name="uni259A" value="1"/>
    <glyphgroup name="uni259B" value="1"/>
    <glyphgroup name="uni259C" value="1"/>
    <glyphgroup name="uni259D" value="1"/>
    <glyphgroup name="uni259E" value="1"/>
    <glyphgroup name="uni259F" value="1"/>
    <glyphgroup name="uni25A1" value="1"/>
    <glyphgroup name="uni25A2" value="1"/>
    <glyphgroup name="uni25A3" value="1"/>
    <glyphgroup name="uni25A4" value="1"/>
    <glyphgroup name="uni25A5" value="1"/>
    <glyphgroup name="uni25A6" value="1"/>
    <glyphgroup name="uni25A7" value="1"/>
    <glyphgroup name="uni25A8" value="1"/>
    <glyphgroup name="uni25A9" value="1"/>
    <glyphgroup name="uni25AA" value="1"/>
    <glyphgroup name="uni25AB" value="1"/>
    <glyphgroup name="uni25AD" value="1"/>
    <glyphgroup name="uni25AE" value="1"/>
    <glyphgroup name="uni25AF" value="1"/>
    <glyphgroup name="uni25B0" value="1"/>
    <glyphgroup name="uni25B1" value="1"/>
    <glyphgroup name="uni25B3" value="1"/>
    <glyphgroup name="uni25B4" value="1"/>
    <glyphgroup name="uni25B5" value="1"/>
    <glyphgroup name="uni25B6" value="1"/>
    <glyphgroup name="uni25B7" value="1"/>
    <glyphgroup name="uni25B8" value="1"/>
    <glyphgroup name="uni25B9" value="1"/>
    <glyphgroup name="uni25BB" value="1"/>
    <glyphgroup name="uni25BD" value="1"/>
    <glyphgroup name="uni25BE" value="1"/>
    <glyphgroup name="uni25BF" value="1"/>
    <glyphgroup name="uni25C0" value="1"/>
    <glyphgroup name="uni25C1" value="1"/>
    <glyphgroup name="uni25C2" value="1"/>
    <glyphgroup name="uni25C3" value="1"/>
    <glyphgroup name="uni25C5" value="1"/>
    <glyphgroup name="uni25C6" value="1"/>
    <glyphgroup name="uni25C7" value="1"/>
    <glyphgroup name="uni25C8" value="1"/>
    <glyphgroup name="uni25C9" value="1"/>
    <glyphgroup name="uni25CC" value="1"/>
    <glyphgroup name="uni25CD" value="1"/>
    <glyphgroup name="uni25CE" value="1"/>
    <glyphgroup name="uni25CF" value="1"/>
    <glyphgroup name="uni25D0" value="1"/>
    <glyphgroup name="uni25D1" value="1"/>
    <glyphgroup name="uni25D2" value="1"/>
    <glyphgroup name="uni25D3" value="1"/>
    <glyphgroup name="uni25D4" value="1"/>
    <glyphgroup name="uni25D5" value="1"/>
    <glyphgroup name="uni25D6" value="1"/>
    <glyphgroup name="uni25D7" value="1"/>
    <glyphgroup name="uni25DA" value="1"/>
    <glyphgroup name="uni25DB" value="1"/>
    <glyphgroup name="uni25DC" value="1"/>
    <glyphgroup name="uni25DD" value="1"/>
    <glyphgroup name="uni25DE" value="1"/>
    <glyphgroup name="uni25DF" value="1"/>
    <glyphgroup name="uni25E0" value="1"/>
    <glyphgroup name="uni25E1" value="1"/>
    <glyphgroup name="uni25E2" value="1"/>
    <glyphgroup name="uni25E3" value="1"/>
    <glyphgroup name="uni25E4" value="1"/>
    <glyphgroup name="uni25E5" value="1"/>
    <glyphgroup name="uni25E7" value="1"/>
    <glyphgroup name="uni25E8" value="1"/>
    <glyphgroup name="uni25E9" value="1"/>
    <glyphgroup name="uni25EA" value="1"/>
    <glyphgroup name="uni25EB" value="1"/>
    <glyphgroup name="uni25EC" value="1"/>
    <glyphgroup name="uni25ED" value="1"/>
    <glyphgroup name="uni25EE" value="1"/>
    <glyphgroup name="uni25EF" value="1"/>
    <glyphgroup name="uni25F0" value="1"/>
    <glyphgroup name="uni25F1" value="1"/>
    <glyphgroup name="uni25F2" value="1"/>
    <glyphgroup name="uni25F3" value="1"/>
    <glyphgroup name="uni25F4" value="1"/>
    <glyphgroup name="uni25F5" value="1"/>
    <glyphgroup name="uni25F6" value="1"/>
    <glyphgroup name="uni25F7" value="1"/>
    <glyphgroup name="uni25F8" value="1"/>
    <glyphgroup name="uni25F9" value="1"/>
    <glyphgroup name="uni25FA" value="1"/>
    <glyphgroup name="uni25FB" value="1"/>
    <glyphgroup name="uni25FC" value="1"/>
    <glyphgroup name="uni25FD" value="1"/>
    <glyphgroup name="uni25FE" value="1"/>
    <glyphgroup name="uni25FF" value="1"/>
    <glyphgroup name="uni2619" value="0"/>
    <glyphgroup name="uni2713" value="1"/>
    <glyphgroup name="uni2767" value="1"/>
    <glyphgroup name="uni276C" value="1"/>
    <glyphgroup name="uni276D" value="1"/>
    <glyphgroup name="uni276E" value="0"/>
    <glyphgroup name="uni276F" value="0"/>
    <glyphgroup name="uni2800" value="1"/>
    <glyphgroup name="uni2801" value="1"/>
    <glyphgroup name="uni2802" value="1"/>
    <glyphgroup name="uni2803" value="1"/>
    <glyphgroup name="uni2804" value="1"/>
    <glyphgroup name="uni2805" value="1"/>
    <glyphgroup name="uni2806" value="1"/>
    <glyphgroup name="uni2807" value="1"/>
    <glyphgroup name="uni2808" value="1"/>
    <glyphgroup name="uni2809" value="1"/>
    <glyphgroup name="uni280A" value="1"/>
    <glyphgroup name="uni280B" value="1"/>
    <glyphgroup name="uni280C" value="1"/>
    <glyphgroup name="uni280D" value="1"/>
    <glyphgroup name="uni280E" value="1"/>
    <glyphgroup name="uni280F" value="1"/>
    <glyphgroup name="uni2810" value="1"/>
    <glyphgroup name="uni2811" value="1"/>
    <glyphgroup name="uni2812" value="1"/>
    <glyphgroup name="uni2813" value="1"/>
    <glyphgroup name="uni2814" value="1"/>
    <glyphgroup name="uni2815" value="1"/>
    <glyphgroup name="uni2816" value="1"/>
    <glyphgroup name="uni2817" value="1"/>
    <glyphgroup name="uni2818" value="1"/>
    <glyphgroup name="uni2819" value="1"/>
    <glyphgroup name="uni281A" value="1"/>
    <glyphgroup name="uni281B" value="1"/>
    <glyphgroup name="uni281C" value="1"/>
    <glyphgroup name="uni281D" value="1"/>
    <glyphgroup name="uni281E" value="1"/>
    <glyphgroup name="uni281F" value="1"/>
    <glyphgroup name="uni2820" value="1"/>
    <glyphgroup name="uni2821" value="1"/>
    <glyphgroup name="uni2822" value="1"/>
    <glyphgroup name="uni2823" value="1"/>
    <glyphgroup name="uni2824" value="1"/>
    <glyphgroup name="uni2825" value="1"/>
    <glyphgroup name="uni2826" value="1"/>
    <glyphgroup name="uni2827" value="1"/>
    <glyphgroup name="uni2828" value="1"/>
    <glyphgroup name="uni2829" value="1"/>
    <glyphgroup name="uni282A" value="1"/>
    <glyphgroup name="uni282B" value="1"/>
    <glyphgroup name="uni282C" value="1"/>
    <glyphgroup name="uni282D" value="1"/>
    <glyphgroup name="uni282E" value="1"/>
    <glyphgroup name="uni282F" value="1"/>
    <glyphgroup name="uni2830" value="1"/>
    <glyphgroup name="uni2831" value="1"/>
    <glyphgroup name="uni2832" value="1"/>
    <glyphgroup name="uni2833" value="1"/>
    <glyphgroup name="uni2834" value="1"/>
    <glyphgroup name="uni2835" value="1"/>
    <glyphgroup name="uni2836" value="1"/>
    <glyphgroup name="uni2837" value="1"/>
    <glyphgroup name="uni2838" value="1"/>
    <glyphgroup name="uni2839" value="1"/>
    <glyphgroup name="uni283A" value="1"/>
    <glyphgroup name="uni283B" value="1"/>
    <glyphgroup name="uni283C" value="1"/>
    <glyphgroup name="uni283D" value="1"/>
    <glyphgroup name="uni283E" value="1"/>
    <glyphgroup name="uni283F" value="1"/>
    <glyphgroup name="uni2840" value="1"/>
    <glyphgroup name="uni2841" value="1"/>
    <glyphgroup name="uni2842" value="1"/>
    <glyphgroup name="uni2843" value="1"/>
    <glyphgroup name="uni2844" value="1"/>
    <glyphgroup name="uni2845" value="1"/>
    <glyphgroup name="uni2846" value="1"/>
    <glyphgroup name="uni2847" value="1"/>
    <glyphgroup name="uni2848" value="1"/>
    <glyphgroup name="uni2849" value="1"/>
    <glyphgroup name="uni284A" value="1"/>
    <glyphgroup name="uni284B" value="1"/>
    <glyphgroup name="uni284C" value="1"/>
    <glyphgroup name="uni284D" value="1"/>
    <glyphgroup name="uni284E" value="1"/>
    <glyphgroup name="uni284F" value="1"/>
    <glyphgroup name="uni2850" value="1"/>
    <glyphgroup name="uni2851" value="1"/>
    <glyphgroup name="uni2852" value="1"/>
    <glyphgroup name="uni2853" value="1"/>
    <glyphgroup name="uni2854" value="1"/>
    <glyphgroup name="uni2855" value="1"/>
    <glyphgroup name="uni2856" value="1"/>
    <glyphgroup name="uni2857" value="1"/>
    <glyphgroup name="uni2858" value="1"/>
    <glyphgroup name="uni2859" value="1"/>
    <glyphgroup name="uni285A" value="1"/>
    <glyphgroup name="uni285B" value="1"/>
    <glyphgroup name="uni285C" value="1"/>
    <glyphgroup name="uni285D" value="1"/>
    <glyphgroup name="uni285E" value="1"/>
    <glyphgroup name="uni285F" value="1"/>
    <glyphgroup name="uni2860" value="1"/>
    <glyphgroup name="uni2861" value="1"/>
    <glyphgroup name="uni2862" value="1"/>
    <glyphgroup name="uni2863" value="1"/>
    <glyphgroup name="uni2864" value="1"/>
    <glyphgroup name="uni2865" value="1"/>
    <glyphgroup name="uni2866" value="1"/>
    <glyphgroup name="uni2867" value="1"/>
    <glyphgroup name="uni2868" value="1"/>
    <glyphgroup name="uni2869" value="1"/>
    <glyphgroup name="uni286A" value="1"/>
    <glyphgroup name="uni286B" value="1"/>
    <glyphgroup name="uni286C" value="1"/>
    <glyphgroup name="uni286D" value="1"/>
    <glyphgroup name="uni286E" value="1"/>
    <glyphgroup name="uni286F" value="1"/>
    <glyphgroup name="uni2870" value="1"/>
    <glyphgroup name="uni2871" value="1"/>
    <glyphgroup name="uni2872" value="1"/>
    <glyphgroup name="uni2873" value="1"/>
    <glyphgroup name="uni2874" value="1"/>
    <glyphgroup name="uni2875" value="1"/>
    <glyphgroup name="uni2876" value="1"/>
    <glyphgroup name="uni2877" value="1"/>
    <glyphgroup name="uni2878" value="1"/>
    <glyphgroup name="uni2879" value="1"/>
    <glyphgroup name="uni287A" value="1"/>
    <glyphgroup name="uni287B" value="1"/>
    <glyphgroup name="uni287C" value="1"/>
    <glyphgroup name="uni287D" value="1"/>
    <glyphgroup name="uni287E" value="1"/>
    <glyphgroup name="uni287F" value="1"/>
    <glyphgroup name="uni2880" value="1"/>
    <glyphgroup name="uni2881" value="1"/>
    <glyphgroup name="uni2882" value="1"/>
    <glyphgroup name="uni2883" value="1"/>
    <glyphgroup name="uni2884" value="1"/>
    <glyphgroup name="uni2885" value="1"/>
    <glyphgroup name="uni2886" value="1"/>
    <glyphgroup name="uni2887" value="1"/>
    <glyphgroup name="uni2888" value="1"/>
    <glyphgroup name="uni2889" value="1"/>
    <glyphgroup name="uni288A" value="1"/>
    <glyphgroup name="uni288B" value="1"/>
    <glyphgroup name="uni288C" value="1"/>
    <glyphgroup name="uni288D" value="1"/>
    <glyphgroup name="uni288E" value="1"/>
    <glyphgroup name="uni288F" value="1"/>
    <glyphgroup name="uni2890" value="1"/>
    <glyphgroup name="uni2891" value="1"/>
    <glyphgroup name="uni2892" value="1"/>
    <glyphgroup name="uni2893" value="1"/>
    <glyphgroup name="uni2894" value="1"/>
    <glyphgroup name="uni2895" value="1"/>
    <glyphgroup name="uni2896" value="1"/>
    <glyphgroup name="uni2897" value="1"/>
    <glyphgroup name="uni2898" value="1"/>
    <glyphgroup name="uni2899" value="1"/>
    <glyphgroup name="uni289A" value="1"/>
    <glyphgroup name="uni289B" value="1"/>
    <glyphgroup name="uni289C" value="1"/>
    <glyphgroup name="uni289D" value="1"/>
    <glyphgroup name="uni289E" value="1"/>
    <glyphgroup name="uni289F" value="1"/>
    <glyphgroup name="uni28A0" value="1"/>
    <glyphgroup name="uni28A1" value="1"/>
    <glyphgroup name="uni28A2" value="1"/>
    <glyphgroup name="uni28A3" value="1"/>
    <glyphgroup name="uni28A4" value="1"/>
    <glyphgroup name="uni28A5" value="1"/>
    <glyphgroup name="uni28A6" value="1"/>
    <glyphgroup name="uni28A7" value="1"/>
    <glyphgroup name="uni28A8" value="1"/>
    <glyphgroup name="uni28A9" value="1"/>
    <glyphgroup name="uni28AA" value="1"/>
    <glyphgroup name="uni28AB" value="1"/>
    <glyphgroup name="uni28AC" value="1"/>
    <glyphgroup name="uni28AD" value="1"/>
    <glyphgroup name="uni28AE" value="1"/>
    <glyphgroup name="uni28AF" value="1"/>
    <glyphgroup name="uni28B0" value="1"/>
    <glyphgroup name="uni28B1" value="1"/>
    <glyphgroup name="uni28B2" value="1"/>
    <glyphgroup name="uni28B3" value="1"/>
    <glyphgroup name="uni28B4" value="1"/>
    <glyphgroup name="uni28B5" value="1"/>
    <glyphgroup name="uni28B6" value="1"/>
    <glyphgroup name="uni28B7" value="1"/>
    <glyphgroup name="uni28B8" value="1"/>
    <glyphgroup name="uni28B9" value="1"/>
    <glyphgroup name="uni28BA" value="1"/>
    <glyphgroup name="uni28BB" value="1"/>
    <glyphgroup name="uni28BC" value="1"/>
    <glyphgroup name="uni28BD" value="1"/>
    <glyphgroup name="uni28BE" value="1"/>
    <glyphgroup name="uni28BF" value="1"/>
    <glyphgroup name="uni28C0" value="1"/>
    <glyphgroup name="uni28C1" value="1"/>
    <glyphgroup name="uni28C2" value="1"/>
    <glyphgroup name="uni28C3" value="1"/>
    <glyphgroup name="uni28C4" value="1"/>
    <glyphgroup name="uni28C5" value="1"/>
    <glyphgroup name="uni28C6" value="1"/>
    <glyphgroup name="uni28C7" value="1"/>
    <glyphgroup name="uni28C8" value="1"/>
    <glyphgroup name="uni28C9" value="1"/>
    <glyphgroup name="uni28CA" value="1"/>
    <glyphgroup name="uni28CB" value="1"/>
    <glyphgroup name="uni28CC" value="1"/>
    <glyphgroup name="uni28CD" value="1"/>
    <glyphgroup name="uni28CE" value="1"/>
    <glyphgroup name="uni28CF" value="1"/>
    <glyphgroup name="uni28D0" value="1"/>
    <glyphgroup name="uni28D1" value="1"/>
    <glyphgroup name="uni28D2" value="1"/>
    <glyphgroup name="uni28D3" value="1"/>
    <glyphgroup name="uni28D4" value="1"/>
    <glyphgroup name="uni28D5" value="1"/>
    <glyphgroup name="uni28D6" value="1"/>
    <glyphgroup name="uni28D7" value="1"/>
    <glyphgroup name="uni28D8" value="1"/>
    <glyphgroup name="uni28D9" value="1"/>
    <glyphgroup name="uni28DA" value="1"/>
    <glyphgroup name="uni28DB" value="1"/>
    <glyphgroup name="uni28DC" value="1"/>
    <glyphgroup name="uni28DD" value="1"/>
    <glyphgroup name="uni28DE" value="1"/>
    <glyphgroup name="uni28DF" value="1"/>
    <glyphgroup name="uni28E0" value="1"/>
    <glyphgroup name="uni28E1" value="1"/>
    <glyphgroup name="uni28E2" value="1"/>
    <glyphgroup name="uni28E3" value="1"/>
    <glyphgroup name="uni28E4" value="1"/>
    <glyphgroup name="uni28E5" value="1"/>
    <glyphgroup name="uni28E6" value="1"/>
    <glyphgroup name="uni28E7" value="1"/>
    <glyphgroup name="uni28E8" value="1"/>
    <glyphgroup name="uni28E9" value="1"/>
    <glyphgroup name="uni28EA" value="1"/>
    <glyphgroup name="uni28EB" value="1"/>
    <glyphgroup name="uni28EC" value="1"/>
    <glyphgroup name="uni28ED" value="1"/>
    <glyphgroup name="uni28EE" value="1"/>
    <glyphgroup name="uni28EF" value="1"/>
    <glyphgroup name="uni28F0" value="1"/>
    <glyphgroup name="uni28F1" value="1"/>
    <glyphgroup name="uni28F2" value="1"/>
    <glyphgroup name="uni28F3" value="1"/>
    <glyphgroup name="uni28F4" value="1"/>
    <glyphgroup name="uni28F5" value="1"/>
    <glyphgroup name="uni28F6" value="1"/>
    <glyphgroup name="uni28F7" value="1"/>
    <glyphgroup name="uni28F8" value="1"/>
    <glyphgroup name="uni28F9" value="1"/>
    <glyphgroup name="uni28FA" value="1"/>
    <glyphgroup name="uni28FB" value="1"/>
    <glyphgroup name="uni28FC" value="1"/>
    <glyphgroup name="uni28FD" value="1"/>
    <glyphgroup name="uni28FE" value="1"/>
    <glyphgroup name="uni28FF" value="1"/>
    <glyphgroup name="uni2A2F" value="0"/>
    <glyphgroup name="uni2B12" value="1"/>
    <glyphgroup name="uni2B13" value="1"/>
    <glyphgroup name="uni2B14" value="1"/>
    <glyphgroup name="uni2B15" value="1"/>
    <glyphgroup name="uni2B16" value="1"/>
    <glyphgroup name="uni2B17" value="1"/>
    <glyphgroup name="uni2B18" value="1"/>
    <glyphgroup name="uni2B19" value="1"/>
    <glyphgroup name="uni2B1A" value="1"/>
    <glyphgroup name="uni2B1B" value="1"/>
    <glyphgroup name="uni2B1C" value="1"/>
    <glyphgroup name="uni2B1D" value="1"/>
    <glyphgroup name="uni2B1E" value="1"/>
    <glyphgroup name="uni2B1F" value="1"/>
    <glyphgroup name="uni2B20" value="1"/>
    <glyphgroup name="uni2B21" value="1"/>
    <glyphgroup name="uni2B22" value="1"/>
    <glyphgroup name="uni2B23" value="1"/>
    <glyphgroup name="uni2B24" value="1"/>
    <glyphgroup name="uni2B25" value="1"/>
    <glyphgroup name="uni2B26" value="1"/>
    <glyphgroup name="uni2B27" value="1"/>
    <glyphgroup name="uni2B28" value="1"/>
    <glyphgroup name="uni2B29" value="1"/>
    <glyphgroup name="uni2B2A" value="1"/>
    <glyphgroup name="uni2B2B" value="1"/>
    <glyphgroup name="uni2B2C" value="1"/>
    <glyphgroup name="uni2B2D" value="1"/>
    <glyphgroup name="uni2B2E" value="1"/>
    <glyphgroup name="uni2B2F" value="1"/>
    <glyphgroup name="uni2BC5" value="1"/>
    <glyphgroup name="uni2BC6" value="1"/>
    <glyphgroup name="uni2BC7" value="1"/>
    <glyphgroup name="uni2BC8" value="1"/>
    <glyphgroup name="uni2BCA" value="1"/>
    <glyphgroup name="uni2BCB" value="1"/>
    <glyphgroup name="uniA774A774A774.liga" value="1"/>
    <glyphgroup name="uniA774A774A774A774.liga" value="1"/>
    <glyphgroup name="uogonek" value="3"/>
    <glyphgroup name="upblock" value="1"/>
    <glyphgroup name="upsilon" value="3"/>
    <glyphgroup name="upsilondieresis" value="3"/>
    <glyphgroup name="upsilondieresistonos" value="3"/>
    <glyphgroup name="upsilontonos" value="3"/>
    <glyphgroup name="uring" value="3"/>
    <glyphgroup name="utilde" value="3"/>
    <glyphgroup name="v" value="3"/>
    <glyphgroup name="w" value="3"/>
    <glyphgroup name="w_w_w.liga" value="1"/>
    <glyphgroup name="wacute" value="3"/>
    <glyphgroup name="wcircumflex" value="3"/>
    <glyphgroup name="wdieresis" value="3"/>
    <glyphgroup name="wgrave" value="3"/>
    <glyphgroup name="x" value="3"/>
    <glyphgroup name="x.multiply" value="1"/>
    <glyphgroup name="xi" value="3"/>
    <glyphgroup name="y" value="3"/>
    <glyphgroup name="yacute" value="3"/>
    <glyphgroup name="ycircumflex" value="3"/>
    <glyphgroup name="ydieresis" value="3"/>
    <glyphgroup name="yen" value="4"/>
    <glyphgroup name="ygrave" value="3"/>
    <glyphgroup name="z" value="3"/>
    <glyphgroup name="zacute" value="3"/>
    <glyphgroup name="zacute.loclPLK" value="1"/>
    <glyphgroup name="zcaron" value="3"/>
    <glyphgroup name="zdotaccent" value="3"/>
    <glyphgroup name="zero" value="4"/>
    <glyphgroup name="zero.dnom" value="1"/>
    <glyphgroup name="zero.numr" value="1"/>
    <glyphgroup name="zero.zero" value="1"/>
    <glyphgroup name="zeta" value="3"/>
  </TSI5>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="1547"/>
    <maxPoints value="148"/>
    <maxContours value="37"/>
    <maxCompositePoints value="83"/>
    <maxCompositeContours value="6"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="16"/>
    <maxStorage value="47"/>
    <maxFunctionDefs value="154"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="717"/>
    <maxSizeOfInstructions value="3971"/>
    <maxComponentElements value="3"/>
    <maxComponentDepth value="4"/>
  </maxp>

</ttFont>
